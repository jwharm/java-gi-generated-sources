package org.gstreamer.gst;

import io.github.jwharm.javagi.*;
import java.lang.foreign.*;
import java.lang.invoke.*;
import org.jetbrains.annotations.*;

/**
 * {@link ReferenceTimestampMeta} can be used to attach alternative timestamps and
 * possibly durations to a {@link Buffer}. These are generally not according to
 * the pipeline clock and could be e.g. the NTP timestamp when the media was
 * captured.
 * <p>
 * The reference is stored as a {@link Caps} in {@code reference}. Examples of valid
 * references would be {@code timestamp/x-drivername-stream} for timestamps that are locally
 * generated by some driver named {@code drivername} when generating the stream,
 * e.g. based on a frame counter, or {@code timestamp/x-ntp, host=pool.ntp.org,
 * port=123} for timestamps based on a specific NTP server.
 * @version 1.14
 */
public class ReferenceTimestampMeta extends Struct {
    
    static {
        Gst.javagi$ensureInitialized();
    }
    
    private static final java.lang.String C_TYPE_NAME = "GstReferenceTimestampMeta";
    
    private static final GroupLayout memoryLayout = MemoryLayout.structLayout(
        org.gstreamer.gst.Meta.getMemoryLayout().withName("parent"),
        Interop.valueLayout.ADDRESS.withName("reference"),
        Interop.valueLayout.C_LONG.withName("timestamp"),
        Interop.valueLayout.C_LONG.withName("duration")
    ).withName(C_TYPE_NAME);
    
    /**
     * The memory layout of the native struct.
     * @return the memory layout
     */
    @ApiStatus.Internal
    public static MemoryLayout getMemoryLayout() {
        return memoryLayout;
    }
    
    private MemorySegment allocatedMemorySegment;
    
    /**
     * Allocate a new {@link ReferenceTimestampMeta}
     * @return A new, uninitialized @{link ReferenceTimestampMeta}
     */
    public static ReferenceTimestampMeta allocate() {
        MemorySegment segment = Interop.getAllocator().allocate(getMemoryLayout());
        ReferenceTimestampMeta newInstance = new ReferenceTimestampMeta(segment.address(), Ownership.NONE);
        newInstance.allocatedMemorySegment = segment;
        return newInstance;
    }
    
    /**
     * Get the value of the field {@code parent}
     * @return The value of the field {@code parent}
     */
    public org.gstreamer.gst.Meta parent$get() {
        long OFFSET = getMemoryLayout().byteOffset(MemoryLayout.PathElement.groupElement("parent"));
        return new org.gstreamer.gst.Meta(((MemoryAddress) handle()).addOffset(OFFSET), Ownership.UNKNOWN);
    }
    
    /**
     * Get the value of the field {@code reference}
     * @return The value of the field {@code reference}
     */
    public org.gstreamer.gst.Caps reference$get() {
        var RESULT = (MemoryAddress) getMemoryLayout()
            .varHandle(MemoryLayout.PathElement.groupElement("reference"))
            .get(MemorySegment.ofAddress((MemoryAddress) handle(), getMemoryLayout().byteSize(), Interop.getScope()));
        return new org.gstreamer.gst.Caps(RESULT, Ownership.UNKNOWN);
    }
    
    /**
     * Change the value of the field {@code reference}
     * @param reference The new value of the field {@code reference}
     */
    public void reference$set(org.gstreamer.gst.Caps reference) {
        getMemoryLayout()
            .varHandle(MemoryLayout.PathElement.groupElement("reference"))
            .set(MemorySegment.ofAddress((MemoryAddress) handle(), getMemoryLayout().byteSize(), Interop.getScope()), reference.handle());
    }
    
    /**
     * Get the value of the field {@code timestamp}
     * @return The value of the field {@code timestamp}
     */
    public org.gstreamer.gst.ClockTime timestamp$get() {
        var RESULT = (long) getMemoryLayout()
            .varHandle(MemoryLayout.PathElement.groupElement("timestamp"))
            .get(MemorySegment.ofAddress((MemoryAddress) handle(), getMemoryLayout().byteSize(), Interop.getScope()));
        return new org.gstreamer.gst.ClockTime(RESULT);
    }
    
    /**
     * Change the value of the field {@code timestamp}
     * @param timestamp The new value of the field {@code timestamp}
     */
    public void timestamp$set(org.gstreamer.gst.ClockTime timestamp) {
        getMemoryLayout()
            .varHandle(MemoryLayout.PathElement.groupElement("timestamp"))
            .set(MemorySegment.ofAddress((MemoryAddress) handle(), getMemoryLayout().byteSize(), Interop.getScope()), timestamp.getValue().longValue());
    }
    
    /**
     * Get the value of the field {@code duration}
     * @return The value of the field {@code duration}
     */
    public org.gstreamer.gst.ClockTime duration$get() {
        var RESULT = (long) getMemoryLayout()
            .varHandle(MemoryLayout.PathElement.groupElement("duration"))
            .get(MemorySegment.ofAddress((MemoryAddress) handle(), getMemoryLayout().byteSize(), Interop.getScope()));
        return new org.gstreamer.gst.ClockTime(RESULT);
    }
    
    /**
     * Change the value of the field {@code duration}
     * @param duration The new value of the field {@code duration}
     */
    public void duration$set(org.gstreamer.gst.ClockTime duration) {
        getMemoryLayout()
            .varHandle(MemoryLayout.PathElement.groupElement("duration"))
            .set(MemorySegment.ofAddress((MemoryAddress) handle(), getMemoryLayout().byteSize(), Interop.getScope()), duration.getValue().longValue());
    }
    
    /**
     * Create a ReferenceTimestampMeta proxy instance for the provided memory address.
     * @param address   The memory address of the native object
     * @param ownership The ownership indicator used for ref-counted objects
     */
    @ApiStatus.Internal
    public ReferenceTimestampMeta(Addressable address, Ownership ownership) {
        super(address, ownership);
    }
    
    /**
     * Gets the global {@link MetaInfo} describing the {@link ReferenceTimestampMeta} meta.
     * @return The {@link MetaInfo}
     */
    public static @NotNull org.gstreamer.gst.MetaInfo getInfo() {
        MemoryAddress RESULT;
        try {
            RESULT = (MemoryAddress) DowncallHandles.gst_reference_timestamp_meta_get_info.invokeExact();
        } catch (Throwable ERR) {
            throw new AssertionError("Unexpected exception occured: ", ERR);
        }
        return new org.gstreamer.gst.MetaInfo(RESULT, Ownership.NONE);
    }
    
    private static class DowncallHandles {
        
        private static final MethodHandle gst_reference_timestamp_meta_get_info = Interop.downcallHandle(
            "gst_reference_timestamp_meta_get_info",
            FunctionDescriptor.of(Interop.valueLayout.ADDRESS),
            false
        );
    }

    /**
     * Inner class implementing a builder pattern to construct 
     * a struct and set its values.
     */
    public static class Build {
        
        private ReferenceTimestampMeta struct;
        
         /**
         * A {@link ReferenceTimestampMeta.Build} object constructs a {@link ReferenceTimestampMeta} 
         * struct using the <em>builder pattern</em> to set the field values. 
         * Use the various {@code set...()} methods to set field values, 
         * and finish construction with {@link #construct()}. 
         */
        public Build() {
            struct = ReferenceTimestampMeta.allocate();
        }
        
         /**
         * Finish building the {@link ReferenceTimestampMeta} struct.
         * @return A new instance of {@code ReferenceTimestampMeta} with the fields 
         *         that were set in the Build object.
         */
        public ReferenceTimestampMeta construct() {
            return struct;
        }
        
        /**
         * the parent {@link Meta} structure
         * @param parent The value for the {@code parent} field
         * @return The {@code Build} instance is returned, to allow method chaining
         */
        public Build setParent(org.gstreamer.gst.Meta parent) {
            getMemoryLayout()
                .varHandle(MemoryLayout.PathElement.groupElement("parent"))
                .set(MemorySegment.ofAddress((MemoryAddress) struct.handle(), getMemoryLayout().byteSize(), Interop.getScope()), (Addressable) (parent == null ? MemoryAddress.NULL : parent.handle()));
            return this;
        }
        
        /**
         * identifier for the timestamp reference.
         * @param reference The value for the {@code reference} field
         * @return The {@code Build} instance is returned, to allow method chaining
         */
        public Build setReference(org.gstreamer.gst.Caps reference) {
            getMemoryLayout()
                .varHandle(MemoryLayout.PathElement.groupElement("reference"))
                .set(MemorySegment.ofAddress((MemoryAddress) struct.handle(), getMemoryLayout().byteSize(), Interop.getScope()), (Addressable) (reference == null ? MemoryAddress.NULL : reference.handle()));
            return this;
        }
        
        /**
         * timestamp
         * @param timestamp The value for the {@code timestamp} field
         * @return The {@code Build} instance is returned, to allow method chaining
         */
        public Build setTimestamp(org.gstreamer.gst.ClockTime timestamp) {
            getMemoryLayout()
                .varHandle(MemoryLayout.PathElement.groupElement("timestamp"))
                .set(MemorySegment.ofAddress((MemoryAddress) struct.handle(), getMemoryLayout().byteSize(), Interop.getScope()), (Addressable) (timestamp == null ? MemoryAddress.NULL : timestamp.getValue().longValue()));
            return this;
        }
        
        /**
         * duration, or {@code GST_CLOCK_TIME_NONE}
         * @param duration The value for the {@code duration} field
         * @return The {@code Build} instance is returned, to allow method chaining
         */
        public Build setDuration(org.gstreamer.gst.ClockTime duration) {
            getMemoryLayout()
                .varHandle(MemoryLayout.PathElement.groupElement("duration"))
                .set(MemorySegment.ofAddress((MemoryAddress) struct.handle(), getMemoryLayout().byteSize(), Interop.getScope()), (Addressable) (duration == null ? MemoryAddress.NULL : duration.getValue().longValue()));
            return this;
        }
    }
}
