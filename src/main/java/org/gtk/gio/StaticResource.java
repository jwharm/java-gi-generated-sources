package org.gtk.gio;

import io.github.jwharm.javagi.*;
import java.lang.foreign.*;
import java.lang.invoke.*;
import org.jetbrains.annotations.*;

/**
 * {@link StaticResource} is an opaque data structure and can only be accessed
 * using the following functions.
 */
public class StaticResource extends io.github.jwharm.javagi.ResourceBase {
    
    static {
        Gio.javagi$ensureInitialized();
    }
    
    private static GroupLayout memoryLayout = MemoryLayout.structLayout(
        ValueLayout.JAVA_BYTE.withName("data"),
        ValueLayout.JAVA_LONG.withName("data_len"),
        org.gtk.gio.Resource.getMemoryLayout().withName("resource"),
        org.gtk.gio.StaticResource.getMemoryLayout().withName("next"),
        Interop.valueLayout.ADDRESS.withName("padding")
    ).withName("GStaticResource");
    
    /**
     * Memory layout of the native struct is unknown (no fields in the GIR file).
     * @return always {code Interop.valueLayout.ADDRESS}
     */
    public static MemoryLayout getMemoryLayout() {
        return memoryLayout;
    }
    
    public StaticResource(io.github.jwharm.javagi.Refcounted ref) {
        super(ref);
    }
    
    /**
     * Finalized a GResource initialized by g_static_resource_init().
     * <p>
     * This is normally used by code generated by
     * [glib-compile-resources][glib-compile-resources]
     * and is not typically used by other code.
     */
    public void fini() {
        try {
            DowncallHandles.g_static_resource_fini.invokeExact(handle());
        } catch (Throwable ERR) {
            throw new AssertionError("Unexpected exception occured: ", ERR);
        }
    }
    
    /**
     * Gets the GResource that was registered by a call to g_static_resource_init().
     * <p>
     * This is normally used by code generated by
     * [glib-compile-resources][glib-compile-resources]
     * and is not typically used by other code.
     * @return a {@link Resource}
     */
    public @NotNull org.gtk.gio.Resource getResource() {
        MemoryAddress RESULT;
        try {
            RESULT = (MemoryAddress) DowncallHandles.g_static_resource_get_resource.invokeExact(handle());
        } catch (Throwable ERR) {
            throw new AssertionError("Unexpected exception occured: ", ERR);
        }
        return new org.gtk.gio.Resource(Refcounted.get(RESULT, false));
    }
    
    /**
     * Initializes a GResource from static data using a
     * GStaticResource.
     * <p>
     * This is normally used by code generated by
     * [glib-compile-resources][glib-compile-resources]
     * and is not typically used by other code.
     */
    public void init() {
        try {
            DowncallHandles.g_static_resource_init.invokeExact(handle());
        } catch (Throwable ERR) {
            throw new AssertionError("Unexpected exception occured: ", ERR);
        }
    }
    
    private static class DowncallHandles {
        
        private static final MethodHandle g_static_resource_fini = Interop.downcallHandle(
            "g_static_resource_fini",
            FunctionDescriptor.ofVoid(ValueLayout.ADDRESS)
        );
        
        private static final MethodHandle g_static_resource_get_resource = Interop.downcallHandle(
            "g_static_resource_get_resource",
            FunctionDescriptor.of(ValueLayout.ADDRESS, ValueLayout.ADDRESS)
        );
        
        private static final MethodHandle g_static_resource_init = Interop.downcallHandle(
            "g_static_resource_init",
            FunctionDescriptor.ofVoid(ValueLayout.ADDRESS)
        );
    }
}
