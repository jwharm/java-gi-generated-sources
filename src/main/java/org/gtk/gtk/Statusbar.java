package org.gtk.gtk;

import io.github.jwharm.javagi.*;
import java.lang.foreign.*;
import java.lang.invoke.*;
import org.jetbrains.annotations.*;

/**
 * A {@code GtkStatusbar} widget is usually placed along the bottom of an application's
 * main {@link Window}.
 * <p>
 * <img src="./doc-files/statusbar.png" alt="An example GtkStatusbar">
 * <p>
 * A {@code GtkStatusBar} may provide a regular commentary of the application's
 * status (as is usually the case in a web browser, for example), or may be
 * used to simply output a message when the status changes, (when an upload
 * is complete in an FTP client, for example).
 * <p>
 * Status bars in GTK maintain a stack of messages. The message at
 * the top of the each bar’s stack is the one that will currently be displayed.
 * <p>
 * Any messages added to a statusbar’s stack must specify a context id that
 * is used to uniquely identify the source of a message. This context id can
 * be generated by {@link Statusbar#getContextId}, given a message and
 * the statusbar that it will be added to. Note that messages are stored in a
 * stack, and when choosing which message to display, the stack structure is
 * adhered to, regardless of the context identifier of a message.
 * <p>
 * One could say that a statusbar maintains one stack of messages for
 * display purposes, but allows multiple message producers to maintain
 * sub-stacks of the messages they produced (via context ids).
 * <p>
 * Status bars are created using {@link Statusbar#Statusbar}.
 * <p>
 * Messages are added to the bar’s stack with {@link Statusbar#push}.
 * <p>
 * The message at the top of the stack can be removed using
 * {@link Statusbar#pop}. A message can be removed from anywhere in the
 * stack if its message id was recorded at the time it was added. This is done
 * using {@link Statusbar#remove}.
 * <p>
 * <strong>CSS node</strong><br/>
 * {@code GtkStatusbar} has a single CSS node with name {@code statusbar}.
 */
public class Statusbar extends org.gtk.gtk.Widget implements org.gtk.gtk.Accessible, org.gtk.gtk.Buildable, org.gtk.gtk.ConstraintTarget {
    
    static {
        Gtk.javagi$ensureInitialized();
    }
    
    private static final java.lang.String C_TYPE_NAME = "GtkStatusbar";
    
    /**
     * Memory layout of the native struct is unknown.
     * @return always {@code Interop.valueLayout.ADDRESS}
     */
    public static MemoryLayout getMemoryLayout() {
        return Interop.valueLayout.ADDRESS;
    }
    
    @ApiStatus.Internal
    public Statusbar(io.github.jwharm.javagi.Refcounted ref) {
        super(ref);
    }
    
    /**
     * Cast object to Statusbar if its GType is a (or inherits from) "GtkStatusbar".
     * @param  gobject            An object that inherits from GObject
     * @return                    An instance of "Statusbar" that points to the memory address of the provided GObject.
     *                            The type of the object is checked with {@code g_type_check_instance_is_a}.
     * @throws ClassCastException If the GType is not derived from "GtkStatusbar", a ClassCastException will be thrown.
     */
    public static Statusbar castFrom(org.gtk.gobject.Object gobject) {
        if (org.gtk.gobject.GObject.typeCheckInstanceIsA(gobject.g_type_instance$get(), org.gtk.gobject.GObject.typeFromName("GtkStatusbar"))) {
            return new Statusbar(gobject.refcounted());
        } else {
            throw new ClassCastException("Object type is not an instance of GtkStatusbar");
        }
    }
    
    private static Refcounted constructNew() {
        Refcounted RESULT;
        try {
            RESULT = Refcounted.get((MemoryAddress) DowncallHandles.gtk_statusbar_new.invokeExact(), false);
        } catch (Throwable ERR) {
            throw new AssertionError("Unexpected exception occured: ", ERR);
        }
        return RESULT;
    }
    
    /**
     * Creates a new {@code GtkStatusbar} ready for messages.
     */
    public Statusbar() {
        super(constructNew());
    }
    
    /**
     * Returns a new context identifier, given a description
     * of the actual context.
     * <p>
     * Note that the description is not shown in the UI.
     * @param contextDescription textual description of what context
     *   the new message is being used in
     * @return an integer id
     */
    public int getContextId(@NotNull java.lang.String contextDescription) {
        java.util.Objects.requireNonNull(contextDescription, "Parameter 'contextDescription' must not be null");
        int RESULT;
        try {
            RESULT = (int) DowncallHandles.gtk_statusbar_get_context_id.invokeExact(
                    handle(),
                    Interop.allocateNativeString(contextDescription));
        } catch (Throwable ERR) {
            throw new AssertionError("Unexpected exception occured: ", ERR);
        }
        return RESULT;
    }
    
    /**
     * Removes the first message in the {@code GtkStatusbar}’s stack
     * with the given context id.
     * <p>
     * Note that this may not change the displayed message,
     * if the message at the top of the stack has a different
     * context id.
     * @param contextId a context identifier
     */
    public void pop(int contextId) {
        try {
            DowncallHandles.gtk_statusbar_pop.invokeExact(
                    handle(),
                    contextId);
        } catch (Throwable ERR) {
            throw new AssertionError("Unexpected exception occured: ", ERR);
        }
    }
    
    /**
     * Pushes a new message onto a statusbar’s stack.
     * @param contextId the message’s context id, as returned by
     *    gtk_statusbar_get_context_id()
     * @param text the message to add to the statusbar
     * @return a message id that can be used with
     *   {@link Statusbar#remove}.
     */
    public int push(int contextId, @NotNull java.lang.String text) {
        java.util.Objects.requireNonNull(text, "Parameter 'text' must not be null");
        int RESULT;
        try {
            RESULT = (int) DowncallHandles.gtk_statusbar_push.invokeExact(
                    handle(),
                    contextId,
                    Interop.allocateNativeString(text));
        } catch (Throwable ERR) {
            throw new AssertionError("Unexpected exception occured: ", ERR);
        }
        return RESULT;
    }
    
    /**
     * Forces the removal of a message from a statusbar’s stack.
     * The exact {@code context_id} and {@code message_id} must be specified.
     * @param contextId a context identifier
     * @param messageId a message identifier, as returned by {@link Statusbar#push}
     */
    public void remove(int contextId, int messageId) {
        try {
            DowncallHandles.gtk_statusbar_remove.invokeExact(
                    handle(),
                    contextId,
                    messageId);
        } catch (Throwable ERR) {
            throw new AssertionError("Unexpected exception occured: ", ERR);
        }
    }
    
    /**
     * Forces the removal of all messages from a statusbar's
     * stack with the exact {@code context_id}.
     * @param contextId a context identifier
     */
    public void removeAll(int contextId) {
        try {
            DowncallHandles.gtk_statusbar_remove_all.invokeExact(
                    handle(),
                    contextId);
        } catch (Throwable ERR) {
            throw new AssertionError("Unexpected exception occured: ", ERR);
        }
    }
    
    @FunctionalInterface
    public interface TextPopped {
        void signalReceived(Statusbar source, int contextId, @NotNull java.lang.String text);
    }
    
    /**
     * Emitted whenever a new message is popped off a statusbar's stack.
     */
    public Signal<Statusbar.TextPopped> onTextPopped(Statusbar.TextPopped handler) {
        try {
            var RESULT = (long) Interop.g_signal_connect_data.invokeExact(
                handle(),
                Interop.allocateNativeString("text-popped"),
                (Addressable) Linker.nativeLinker().upcallStub(
                    MethodHandles.lookup().findStatic(Statusbar.Callbacks.class, "signalStatusbarTextPopped",
                        MethodType.methodType(void.class, MemoryAddress.class, int.class, MemoryAddress.class, MemoryAddress.class)),
                    FunctionDescriptor.ofVoid(ValueLayout.ADDRESS, ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.ADDRESS),
                    Interop.getScope()),
                Interop.registerCallback(handler),
                (Addressable) MemoryAddress.NULL, 0);
            return new Signal<Statusbar.TextPopped>(handle(), RESULT);
        } catch (Throwable ERR) {
            throw new AssertionError("Unexpected exception occured: ", ERR);
        }
    }
    
    @FunctionalInterface
    public interface TextPushed {
        void signalReceived(Statusbar source, int contextId, @NotNull java.lang.String text);
    }
    
    /**
     * Emitted whenever a new message gets pushed onto a statusbar's stack.
     */
    public Signal<Statusbar.TextPushed> onTextPushed(Statusbar.TextPushed handler) {
        try {
            var RESULT = (long) Interop.g_signal_connect_data.invokeExact(
                handle(),
                Interop.allocateNativeString("text-pushed"),
                (Addressable) Linker.nativeLinker().upcallStub(
                    MethodHandles.lookup().findStatic(Statusbar.Callbacks.class, "signalStatusbarTextPushed",
                        MethodType.methodType(void.class, MemoryAddress.class, int.class, MemoryAddress.class, MemoryAddress.class)),
                    FunctionDescriptor.ofVoid(ValueLayout.ADDRESS, ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.ADDRESS),
                    Interop.getScope()),
                Interop.registerCallback(handler),
                (Addressable) MemoryAddress.NULL, 0);
            return new Signal<Statusbar.TextPushed>(handle(), RESULT);
        } catch (Throwable ERR) {
            throw new AssertionError("Unexpected exception occured: ", ERR);
        }
    }
    
    private static class DowncallHandles {
        
        private static final MethodHandle gtk_statusbar_new = Interop.downcallHandle(
            "gtk_statusbar_new",
            FunctionDescriptor.of(ValueLayout.ADDRESS)
        );
        
        private static final MethodHandle gtk_statusbar_get_context_id = Interop.downcallHandle(
            "gtk_statusbar_get_context_id",
            FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.ADDRESS)
        );
        
        private static final MethodHandle gtk_statusbar_pop = Interop.downcallHandle(
            "gtk_statusbar_pop",
            FunctionDescriptor.ofVoid(ValueLayout.ADDRESS, ValueLayout.JAVA_INT)
        );
        
        private static final MethodHandle gtk_statusbar_push = Interop.downcallHandle(
            "gtk_statusbar_push",
            FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.JAVA_INT, ValueLayout.ADDRESS)
        );
        
        private static final MethodHandle gtk_statusbar_remove = Interop.downcallHandle(
            "gtk_statusbar_remove",
            FunctionDescriptor.ofVoid(ValueLayout.ADDRESS, ValueLayout.JAVA_INT, ValueLayout.JAVA_INT)
        );
        
        private static final MethodHandle gtk_statusbar_remove_all = Interop.downcallHandle(
            "gtk_statusbar_remove_all",
            FunctionDescriptor.ofVoid(ValueLayout.ADDRESS, ValueLayout.JAVA_INT)
        );
    }
    
    private static class Callbacks {
        
        public static void signalStatusbarTextPopped(MemoryAddress source, int contextId, MemoryAddress text, MemoryAddress data) {
            int HASH = data.get(ValueLayout.JAVA_INT, 0);
            var HANDLER = (Statusbar.TextPopped) Interop.signalRegistry.get(HASH);
            HANDLER.signalReceived(new Statusbar(Refcounted.get(source)), contextId, Interop.getStringFrom(text));
        }
        
        public static void signalStatusbarTextPushed(MemoryAddress source, int contextId, MemoryAddress text, MemoryAddress data) {
            int HASH = data.get(ValueLayout.JAVA_INT, 0);
            var HANDLER = (Statusbar.TextPushed) Interop.signalRegistry.get(HASH);
            HANDLER.signalReceived(new Statusbar(Refcounted.get(source)), contextId, Interop.getStringFrom(text));
        }
    }
}
