package org.gtk.gtk;

import io.github.jwharm.javagi.*;
import java.lang.foreign.*;
import java.lang.invoke.*;
import org.jetbrains.annotations.*;

/**
 * A {@code GtkStatusbar} widget is usually placed along the bottom of an application's
 * main {@link Window}.
 * <p>
 * <img src="./doc-files/statusbar.png" alt="An example GtkStatusbar">
 * <p>
 * A {@code GtkStatusBar} may provide a regular commentary of the application's
 * status (as is usually the case in a web browser, for example), or may be
 * used to simply output a message when the status changes, (when an upload
 * is complete in an FTP client, for example).
 * <p>
 * Status bars in GTK maintain a stack of messages. The message at
 * the top of the each bar’s stack is the one that will currently be displayed.
 * <p>
 * Any messages added to a statusbar’s stack must specify a context id that
 * is used to uniquely identify the source of a message. This context id can
 * be generated by {@link Statusbar#getContextId}, given a message and
 * the statusbar that it will be added to. Note that messages are stored in a
 * stack, and when choosing which message to display, the stack structure is
 * adhered to, regardless of the context identifier of a message.
 * <p>
 * One could say that a statusbar maintains one stack of messages for
 * display purposes, but allows multiple message producers to maintain
 * sub-stacks of the messages they produced (via context ids).
 * <p>
 * Status bars are created using {@link Statusbar#Statusbar}.
 * <p>
 * Messages are added to the bar’s stack with {@link Statusbar#push}.
 * <p>
 * The message at the top of the stack can be removed using
 * {@link Statusbar#pop}. A message can be removed from anywhere in the
 * stack if its message id was recorded at the time it was added. This is done
 * using {@link Statusbar#remove}.
 * <p>
 * <strong>CSS node</strong><br/>
 * {@code GtkStatusbar} has a single CSS node with name {@code statusbar}.
 */
public class Statusbar extends org.gtk.gtk.Widget implements org.gtk.gtk.Accessible, org.gtk.gtk.Buildable, org.gtk.gtk.ConstraintTarget {
    
    static {
        Gtk.javagi$ensureInitialized();
    }
    
    private static final java.lang.String C_TYPE_NAME = "GtkStatusbar";
    
    /**
     * Memory layout of the native struct is unknown.
     * @return always {@code Interop.valueLayout.ADDRESS}
     */
    @ApiStatus.Internal
    public static MemoryLayout getMemoryLayout() {
        return Interop.valueLayout.ADDRESS;
    }
    
    /**
     * Create a Statusbar proxy instance for the provided memory address.
     * @param address   The memory address of the native object
     */
    protected Statusbar(Addressable address) {
        super(address);
    }
    
    /**
     * The marshal function from a native memory address to a Java proxy instance
     */
    @ApiStatus.Internal
    public static final Marshal<Addressable, Statusbar> fromAddress = (input, scope) -> input.equals(MemoryAddress.NULL) ? null : new Statusbar(input);
    
    private static MemoryAddress constructNew() {
        MemoryAddress RESULT;
        try {
            RESULT = (MemoryAddress) DowncallHandles.gtk_statusbar_new.invokeExact();
        } catch (Throwable ERR) {
            throw new AssertionError("Unexpected exception occured: ", ERR);
        }
        return RESULT;
    }
    
    /**
     * Creates a new {@code GtkStatusbar} ready for messages.
     */
    public Statusbar() {
        super(constructNew());
        this.refSink();
        this.takeOwnership();
    }
    
    /**
     * Returns a new context identifier, given a description
     * of the actual context.
     * <p>
     * Note that the description is not shown in the UI.
     * @param contextDescription textual description of what context
     *   the new message is being used in
     * @return an integer id
     */
    public int getContextId(java.lang.String contextDescription) {
        try (MemorySession SCOPE = MemorySession.openConfined()) {
            int RESULT;
            try {
                RESULT = (int) DowncallHandles.gtk_statusbar_get_context_id.invokeExact(
                        handle(),
                        Marshal.stringToAddress.marshal(contextDescription, SCOPE));
            } catch (Throwable ERR) {
                throw new AssertionError("Unexpected exception occured: ", ERR);
            }
            return RESULT;
        }
    }
    
    /**
     * Removes the first message in the {@code GtkStatusbar}’s stack
     * with the given context id.
     * <p>
     * Note that this may not change the displayed message,
     * if the message at the top of the stack has a different
     * context id.
     * @param contextId a context identifier
     */
    public void pop(int contextId) {
        try {
            DowncallHandles.gtk_statusbar_pop.invokeExact(
                    handle(),
                    contextId);
        } catch (Throwable ERR) {
            throw new AssertionError("Unexpected exception occured: ", ERR);
        }
    }
    
    /**
     * Pushes a new message onto a statusbar’s stack.
     * @param contextId the message’s context id, as returned by
     *    gtk_statusbar_get_context_id()
     * @param text the message to add to the statusbar
     * @return a message id that can be used with
     *   {@link Statusbar#remove}.
     */
    public int push(int contextId, java.lang.String text) {
        try (MemorySession SCOPE = MemorySession.openConfined()) {
            int RESULT;
            try {
                RESULT = (int) DowncallHandles.gtk_statusbar_push.invokeExact(
                        handle(),
                        contextId,
                        Marshal.stringToAddress.marshal(text, SCOPE));
            } catch (Throwable ERR) {
                throw new AssertionError("Unexpected exception occured: ", ERR);
            }
            return RESULT;
        }
    }
    
    /**
     * Forces the removal of a message from a statusbar’s stack.
     * The exact {@code context_id} and {@code message_id} must be specified.
     * @param contextId a context identifier
     * @param messageId a message identifier, as returned by {@link Statusbar#push}
     */
    public void remove(int contextId, int messageId) {
        try {
            DowncallHandles.gtk_statusbar_remove.invokeExact(
                    handle(),
                    contextId,
                    messageId);
        } catch (Throwable ERR) {
            throw new AssertionError("Unexpected exception occured: ", ERR);
        }
    }
    
    /**
     * Forces the removal of all messages from a statusbar's
     * stack with the exact {@code context_id}.
     * @param contextId a context identifier
     */
    public void removeAll(int contextId) {
        try {
            DowncallHandles.gtk_statusbar_remove_all.invokeExact(
                    handle(),
                    contextId);
        } catch (Throwable ERR) {
            throw new AssertionError("Unexpected exception occured: ", ERR);
        }
    }
    
    /**
     * Get the gtype
     * @return The gtype
     */
    public static org.gtk.glib.Type getType() {
        long RESULT;
        try {
            RESULT = (long) DowncallHandles.gtk_statusbar_get_type.invokeExact();
        } catch (Throwable ERR) {
            throw new AssertionError("Unexpected exception occured: ", ERR);
        }
        return new org.gtk.glib.Type(RESULT);
    }
    
    /**
     * Functional interface declaration of the {@code TextPopped} callback.
     */
    @FunctionalInterface
    public interface TextPopped {
    
        /**
         * Emitted whenever a new message is popped off a statusbar's stack.
         */
        void run(int contextId, java.lang.String text);
        
        @ApiStatus.Internal default void upcall(MemoryAddress sourceStatusbar, int contextId, MemoryAddress text) {
            try (MemorySession SCOPE = MemorySession.openConfined()) {
                run(contextId, Marshal.addressToString.marshal(text, null));
            }
        }
        
        /**
         * Describes the parameter types of the native callback function.
         */
        @ApiStatus.Internal FunctionDescriptor DESCRIPTOR = FunctionDescriptor.ofVoid(Interop.valueLayout.ADDRESS, Interop.valueLayout.C_INT, Interop.valueLayout.ADDRESS);
        
        /**
         * The method handle for the callback.
         */
        @ApiStatus.Internal MethodHandle HANDLE = Interop.getHandle(MethodHandles.lookup(), TextPopped.class, DESCRIPTOR);
        
        /**
         * Creates a callback that can be called from native code and executes the {@code run} method.
         * @return the memory address of the callback function
         */
        default MemoryAddress toCallback() {
            return Linker.nativeLinker().upcallStub(HANDLE.bindTo(this), DESCRIPTOR, MemorySession.global()).address();
        }
    }
    
    /**
     * Emitted whenever a new message is popped off a statusbar's stack.
     * @param handler The signal handler
     * @return A {@link io.github.jwharm.javagi.Signal} object to keep track of the signal connection
     */
    public Signal<Statusbar.TextPopped> onTextPopped(Statusbar.TextPopped handler) {
        MemorySession SCOPE = MemorySession.openImplicit();
        try {
            var RESULT = (long) Interop.g_signal_connect_data.invokeExact(
                handle(), Interop.allocateNativeString("text-popped", SCOPE), (Addressable) handler.toCallback(), (Addressable) MemoryAddress.NULL, (Addressable) MemoryAddress.NULL, 0);
            return new Signal<>(handle(), RESULT);
        } catch (Throwable ERR) {
            throw new AssertionError("Unexpected exception occured: ", ERR);
        }
    }
    
    /**
     * Functional interface declaration of the {@code TextPushed} callback.
     */
    @FunctionalInterface
    public interface TextPushed {
    
        /**
         * Emitted whenever a new message gets pushed onto a statusbar's stack.
         */
        void run(int contextId, java.lang.String text);
        
        @ApiStatus.Internal default void upcall(MemoryAddress sourceStatusbar, int contextId, MemoryAddress text) {
            try (MemorySession SCOPE = MemorySession.openConfined()) {
                run(contextId, Marshal.addressToString.marshal(text, null));
            }
        }
        
        /**
         * Describes the parameter types of the native callback function.
         */
        @ApiStatus.Internal FunctionDescriptor DESCRIPTOR = FunctionDescriptor.ofVoid(Interop.valueLayout.ADDRESS, Interop.valueLayout.C_INT, Interop.valueLayout.ADDRESS);
        
        /**
         * The method handle for the callback.
         */
        @ApiStatus.Internal MethodHandle HANDLE = Interop.getHandle(MethodHandles.lookup(), TextPushed.class, DESCRIPTOR);
        
        /**
         * Creates a callback that can be called from native code and executes the {@code run} method.
         * @return the memory address of the callback function
         */
        default MemoryAddress toCallback() {
            return Linker.nativeLinker().upcallStub(HANDLE.bindTo(this), DESCRIPTOR, MemorySession.global()).address();
        }
    }
    
    /**
     * Emitted whenever a new message gets pushed onto a statusbar's stack.
     * @param handler The signal handler
     * @return A {@link io.github.jwharm.javagi.Signal} object to keep track of the signal connection
     */
    public Signal<Statusbar.TextPushed> onTextPushed(Statusbar.TextPushed handler) {
        MemorySession SCOPE = MemorySession.openImplicit();
        try {
            var RESULT = (long) Interop.g_signal_connect_data.invokeExact(
                handle(), Interop.allocateNativeString("text-pushed", SCOPE), (Addressable) handler.toCallback(), (Addressable) MemoryAddress.NULL, (Addressable) MemoryAddress.NULL, 0);
            return new Signal<>(handle(), RESULT);
        } catch (Throwable ERR) {
            throw new AssertionError("Unexpected exception occured: ", ERR);
        }
    }
    
    /**
     * A {@link Statusbar.Builder} object constructs a {@link Statusbar} 
     * using the <em>builder pattern</em> to set property values. 
     * Use the various {@code set...()} methods to set properties, 
     * and finish construction with {@link Statusbar.Builder#build()}. 
     */
    public static Builder builder() {
        return new Builder();
    }
    
    /**
     * Inner class implementing a builder pattern to construct 
     * a GObject with properties.
     */
    public static class Builder extends org.gtk.gtk.Widget.Builder {
        
        /**
         * Default constructor for a {@code Builder} object.
         */
        protected Builder() {
        }
        
        /**
         * Finish building the {@link Statusbar} object.
         * Internally, a call to {@link org.gtk.gobject.GObjects#typeFromName} 
         * is executed to create a new GObject instance, which is then cast to 
         * {@link Statusbar}.
         * @return A new instance of {@code Statusbar} with the properties 
         *         that were set in the Builder object.
         */
        public Statusbar build() {
            return (Statusbar) org.gtk.gobject.GObject.newWithProperties(
                Statusbar.getType(),
                names.size(),
                names.toArray(new String[names.size()]),
                values.toArray(new org.gtk.gobject.Value[names.size()])
            );
        }
    }
    
    private static class DowncallHandles {
        
        private static final MethodHandle gtk_statusbar_new = Interop.downcallHandle(
                "gtk_statusbar_new",
                FunctionDescriptor.of(Interop.valueLayout.ADDRESS),
                false
        );
        
        private static final MethodHandle gtk_statusbar_get_context_id = Interop.downcallHandle(
                "gtk_statusbar_get_context_id",
                FunctionDescriptor.of(Interop.valueLayout.C_INT, Interop.valueLayout.ADDRESS, Interop.valueLayout.ADDRESS),
                false
        );
        
        private static final MethodHandle gtk_statusbar_pop = Interop.downcallHandle(
                "gtk_statusbar_pop",
                FunctionDescriptor.ofVoid(Interop.valueLayout.ADDRESS, Interop.valueLayout.C_INT),
                false
        );
        
        private static final MethodHandle gtk_statusbar_push = Interop.downcallHandle(
                "gtk_statusbar_push",
                FunctionDescriptor.of(Interop.valueLayout.C_INT, Interop.valueLayout.ADDRESS, Interop.valueLayout.C_INT, Interop.valueLayout.ADDRESS),
                false
        );
        
        private static final MethodHandle gtk_statusbar_remove = Interop.downcallHandle(
                "gtk_statusbar_remove",
                FunctionDescriptor.ofVoid(Interop.valueLayout.ADDRESS, Interop.valueLayout.C_INT, Interop.valueLayout.C_INT),
                false
        );
        
        private static final MethodHandle gtk_statusbar_remove_all = Interop.downcallHandle(
                "gtk_statusbar_remove_all",
                FunctionDescriptor.ofVoid(Interop.valueLayout.ADDRESS, Interop.valueLayout.C_INT),
                false
        );
        
        private static final MethodHandle gtk_statusbar_get_type = Interop.downcallHandle(
                "gtk_statusbar_get_type",
                FunctionDescriptor.of(Interop.valueLayout.C_LONG),
                false
        );
    }
    
    /**
     * Check whether the type is available on the runtime platform.
     * @return {@code true} when the type is available on the runtime platform
     */
    public static boolean isAvailable() {
        return DowncallHandles.gtk_statusbar_get_type != null;
    }
}
