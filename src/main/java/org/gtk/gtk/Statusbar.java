package org.gtk.gtk;

import io.github.jwharm.javagi.interop.jextract.gtk_h;
import io.github.jwharm.javagi.*;
import java.lang.foreign.*;
import java.lang.invoke.*;

/**
 * A {@code GtkStatusbar} widget is usually placed along the bottom of an application's
 * main {@link Window}.
 * <p>
 * <img src="./doc-files/statusbar.png" alt="An example GtkStatusbar">
 * <p>
 * A {@code GtkStatusBar} may provide a regular commentary of the application's
 * status (as is usually the case in a web browser, for example), or may be
 * used to simply output a message when the status changes, (when an upload
 * is complete in an FTP client, for example).
 * <p>
 * Status bars in GTK maintain a stack of messages. The message at
 * the top of the each bar’s stack is the one that will currently be displayed.
 * <p>
 * Any messages added to a statusbar’s stack must specify a context id that
 * is used to uniquely identify the source of a message. This context id can
 * be generated by {@link Statusbar#getContextId}, given a message and
 * the statusbar that it will be added to. Note that messages are stored in a
 * stack, and when choosing which message to display, the stack structure is
 * adhered to, regardless of the context identifier of a message.
 * <p>
 * One could say that a statusbar maintains one stack of messages for
 * display purposes, but allows multiple message producers to maintain
 * sub-stacks of the messages they produced (via context ids).
 * <p>
 * Status bars are created using {@link Statusbar#Statusbar}.
 * <p>
 * Messages are added to the bar’s stack with {@link Statusbar#push}.
 * <p>
 * The message at the top of the stack can be removed using
 * {@link Statusbar#pop}. A message can be removed from anywhere in the
 * stack if its message id was recorded at the time it was added. This is done
 * using {@link Statusbar#remove}.
 * <p>
 * <h2>CSS node</h2>
 * <p>
 * {@code GtkStatusbar} has a single CSS node with name {@code statusbar}.
 */
public class Statusbar extends Widget implements Accessible, Buildable, ConstraintTarget {

    public Statusbar(io.github.jwharm.javagi.Reference reference) {
        super(reference);
    }
    
    /** Cast object to Statusbar */
    public static Statusbar castFrom(org.gtk.gobject.Object gobject) {
        return new Statusbar(gobject.getReference());
    }
    
    private static Reference constructNew() {
        Reference RESULT = References.get(gtk_h.gtk_statusbar_new(), false);
        return RESULT;
    }
    
    /**
     * Creates a new {@code GtkStatusbar} ready for messages.
     */
    public Statusbar() {
        super(constructNew());
    }
    
    /**
     * Returns a new context identifier, given a description
     * of the actual context.
     * <p>
     * Note that the description is not shown in the UI.
     */
    public int getContextId(java.lang.String contextDescription) {
        var RESULT = gtk_h.gtk_statusbar_get_context_id(handle(), Interop.allocateNativeString(contextDescription).handle());
        return RESULT;
    }
    
    /**
     * Removes the first message in the {@code GtkStatusbar}’s stack
     * with the given context id.
     * <p>
     * Note that this may not change the displayed message,
     * if the message at the top of the stack has a different
     * context id.
     */
    public void pop(int contextId) {
        gtk_h.gtk_statusbar_pop(handle(), contextId);
    }
    
    /**
     * Pushes a new message onto a statusbar’s stack.
     */
    public int push(int contextId, java.lang.String text) {
        var RESULT = gtk_h.gtk_statusbar_push(handle(), contextId, Interop.allocateNativeString(text).handle());
        return RESULT;
    }
    
    /**
     * Forces the removal of a message from a statusbar’s stack.
     * The exact {@code context_id} and {@code message_id} must be specified.
     */
    public void remove(int contextId, int messageId) {
        gtk_h.gtk_statusbar_remove(handle(), contextId, messageId);
    }
    
    /**
     * Forces the removal of all messages from a statusbar's
     * stack with the exact {@code context_id}.
     */
    public void removeAll(int contextId) {
        gtk_h.gtk_statusbar_remove_all(handle(), contextId);
    }
    
    @FunctionalInterface
    public interface TextPoppedHandler {
        void signalReceived(Statusbar source, int contextId, java.lang.String text);
    }
    
    /**
     * Emitted whenever a new message is popped off a statusbar's stack.
     */
    public SignalHandle onTextPopped(TextPoppedHandler handler) {
        try {
            var RESULT = gtk_h.g_signal_connect_data(
                handle(),
                Interop.allocateNativeString("text-popped").handle(),
                Linker.nativeLinker().upcallStub(
                    MethodHandles.lookup().findStatic(Statusbar.Callbacks.class, "signalStatusbarTextPopped",
                        MethodType.methodType(void.class, MemoryAddress.class, int.class, MemoryAddress.class, MemoryAddress.class)),
                    FunctionDescriptor.ofVoid(ValueLayout.ADDRESS, ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.ADDRESS),
                    Interop.getScope()),
                Interop.getAllocator().allocate(ValueLayout.JAVA_INT, Interop.registerCallback(handler.hashCode(), handler)),
                MemoryAddress.NULL, 0);
            return new SignalHandle(handle(), RESULT);
        } catch (IllegalAccessException | NoSuchMethodException e) {
            throw new RuntimeException(e);
        }
    }
    
    @FunctionalInterface
    public interface TextPushedHandler {
        void signalReceived(Statusbar source, int contextId, java.lang.String text);
    }
    
    /**
     * Emitted whenever a new message gets pushed onto a statusbar's stack.
     */
    public SignalHandle onTextPushed(TextPushedHandler handler) {
        try {
            var RESULT = gtk_h.g_signal_connect_data(
                handle(),
                Interop.allocateNativeString("text-pushed").handle(),
                Linker.nativeLinker().upcallStub(
                    MethodHandles.lookup().findStatic(Statusbar.Callbacks.class, "signalStatusbarTextPushed",
                        MethodType.methodType(void.class, MemoryAddress.class, int.class, MemoryAddress.class, MemoryAddress.class)),
                    FunctionDescriptor.ofVoid(ValueLayout.ADDRESS, ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.ADDRESS),
                    Interop.getScope()),
                Interop.getAllocator().allocate(ValueLayout.JAVA_INT, Interop.registerCallback(handler.hashCode(), handler)),
                MemoryAddress.NULL, 0);
            return new SignalHandle(handle(), RESULT);
        } catch (IllegalAccessException | NoSuchMethodException e) {
            throw new RuntimeException(e);
        }
    }
    
    public static class Callbacks {
    
        public static void signalStatusbarTextPopped(MemoryAddress source, int contextId, MemoryAddress text, MemoryAddress data) {
            int hash = data.get(ValueLayout.JAVA_INT, 0);
            var handler = (Statusbar.TextPoppedHandler) Interop.signalRegistry.get(hash);
            handler.signalReceived(new Statusbar(References.get(source)), contextId, text.getUtf8String(0));
        }
        
        public static void signalStatusbarTextPushed(MemoryAddress source, int contextId, MemoryAddress text, MemoryAddress data) {
            int hash = data.get(ValueLayout.JAVA_INT, 0);
            var handler = (Statusbar.TextPushedHandler) Interop.signalRegistry.get(hash);
            handler.signalReceived(new Statusbar(References.get(source)), contextId, text.getUtf8String(0));
        }
        
    }
}
