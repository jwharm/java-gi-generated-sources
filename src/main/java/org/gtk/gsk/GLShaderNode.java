package org.gtk.gsk;

import io.github.jwharm.javagi.*;
import java.lang.foreign.*;
import java.lang.invoke.*;
import org.jetbrains.annotations.*;

/**
 * A render node using a GL shader when drawing its children nodes.
 */
public class GLShaderNode extends org.gtk.gsk.RenderNode {
    
    static {
        Gsk.javagi$ensureInitialized();
    }
    
    private static final java.lang.String C_TYPE_NAME = "GskGLShaderNode";
    
    /**
     * Memory layout of the native struct is unknown.
     * @return always {@code Interop.valueLayout.ADDRESS}
     */
    @ApiStatus.Internal
    public static MemoryLayout getMemoryLayout() {
        return Interop.valueLayout.ADDRESS;
    }
    
    /**
     * Create a GLShaderNode proxy instance for the provided memory address.
     * @param address   The memory address of the native object
     * @param ownership The ownership indicator used for ref-counted objects
     */
    protected GLShaderNode(Addressable address, Ownership ownership) {
        super(address, ownership);
    }
    
    @ApiStatus.Internal
    public static final Marshal<Addressable, GLShaderNode> fromAddress = (input, ownership) -> input.equals(MemoryAddress.NULL) ? null : new GLShaderNode(input, ownership);
    
    private static MemoryAddress constructNew(org.gtk.gsk.GLShader shader, org.gtk.graphene.Rect bounds, org.gtk.glib.Bytes args, @Nullable org.gtk.gsk.RenderNode[] children, int nChildren) {
        MemoryAddress RESULT;
        try {
            RESULT = (MemoryAddress) DowncallHandles.gsk_gl_shader_node_new.invokeExact(
                    shader.handle(),
                    bounds.handle(),
                    args.handle(),
                    (Addressable) (children == null ? MemoryAddress.NULL : Interop.allocateNativeArray(children, false)),
                    nChildren);
        } catch (Throwable ERR) {
            throw new AssertionError("Unexpected exception occured: ", ERR);
        }
        return RESULT;
    }
    
    /**
     * Creates a {@code GskRenderNode} that will render the given {@code shader} into the
     * area given by {@code bounds}.
     * <p>
     * The {@code args} is a block of data to use for uniform input, as per types and
     * offsets defined by the {@code shader}. Normally this is generated by
     * {@link GLShader#formatArgs} or {@code Gsk.ShaderArgsBuilder}.
     * <p>
     * See {@link GLShader} for details about how the shader should be written.
     * <p>
     * All the children will be rendered into textures (if they aren't already
     * {@code GskTextureNodes}, which will be used directly). These textures will be
     * sent as input to the shader.
     * <p>
     * If the renderer doesn't support GL shaders, or if there is any problem
     * when compiling the shader, then the node will draw pink. You should use
     * {@link GLShader#compile} to ensure the {@code shader} will work for the
     * renderer before using it.
     * @param shader the {@code GskGLShader}
     * @param bounds the rectangle to render the shader into
     * @param args Arguments for the uniforms
     * @param children array of child nodes,
     *   these will be rendered to textures and used as input.
     * @param nChildren Length of {@code children} (currenly the GL backend supports
     *   up to 4 children)
     */
    public GLShaderNode(org.gtk.gsk.GLShader shader, org.gtk.graphene.Rect bounds, org.gtk.glib.Bytes args, @Nullable org.gtk.gsk.RenderNode[] children, int nChildren) {
        super(constructNew(shader, bounds, args, children, nChildren), Ownership.FULL);
    }
    
    /**
     * Gets args for the node.
     * @return A {@code GBytes} with the uniform arguments
     */
    public org.gtk.glib.Bytes getArgs() {
        MemoryAddress RESULT;
        try {
            RESULT = (MemoryAddress) DowncallHandles.gsk_gl_shader_node_get_args.invokeExact(
                    handle());
        } catch (Throwable ERR) {
            throw new AssertionError("Unexpected exception occured: ", ERR);
        }
        return org.gtk.glib.Bytes.fromAddress.marshal(RESULT, Ownership.NONE);
    }
    
    /**
     * Gets one of the children.
     * @param idx the position of the child to get
     * @return the {@code idx}'th child of {@code node}
     */
    public org.gtk.gsk.RenderNode getChild(int idx) {
        MemoryAddress RESULT;
        try {
            RESULT = (MemoryAddress) DowncallHandles.gsk_gl_shader_node_get_child.invokeExact(
                    handle(),
                    idx);
        } catch (Throwable ERR) {
            throw new AssertionError("Unexpected exception occured: ", ERR);
        }
        return (org.gtk.gsk.RenderNode) java.util.Objects.requireNonNullElse(Interop.typeRegister.get(Interop.getType(RESULT)), org.gtk.gsk.RenderNode.fromAddress).marshal(RESULT, Ownership.NONE);
    }
    
    /**
     * Returns the number of children
     * @return The number of children
     */
    public int getNChildren() {
        int RESULT;
        try {
            RESULT = (int) DowncallHandles.gsk_gl_shader_node_get_n_children.invokeExact(
                    handle());
        } catch (Throwable ERR) {
            throw new AssertionError("Unexpected exception occured: ", ERR);
        }
        return RESULT;
    }
    
    /**
     * Gets shader code for the node.
     * @return the {@code GskGLShader} shader
     */
    public org.gtk.gsk.GLShader getShader() {
        MemoryAddress RESULT;
        try {
            RESULT = (MemoryAddress) DowncallHandles.gsk_gl_shader_node_get_shader.invokeExact(
                    handle());
        } catch (Throwable ERR) {
            throw new AssertionError("Unexpected exception occured: ", ERR);
        }
        return (org.gtk.gsk.GLShader) java.util.Objects.requireNonNullElse(Interop.typeRegister.get(Interop.getType(RESULT)), org.gtk.gsk.GLShader.fromAddress).marshal(RESULT, Ownership.NONE);
    }
    
    /**
     * Get the gtype
     * @return The gtype
     */
    public static org.gtk.glib.Type getType() {
        long RESULT;
        try {
            RESULT = (long) DowncallHandles.gsk_gl_shader_node_get_type.invokeExact();
        } catch (Throwable ERR) {
            throw new AssertionError("Unexpected exception occured: ", ERR);
        }
        return new org.gtk.glib.Type(RESULT);
    }
    
    private static class DowncallHandles {
        
        private static final MethodHandle gsk_gl_shader_node_new = Interop.downcallHandle(
            "gsk_gl_shader_node_new",
            FunctionDescriptor.of(Interop.valueLayout.ADDRESS, Interop.valueLayout.ADDRESS, Interop.valueLayout.ADDRESS, Interop.valueLayout.ADDRESS, Interop.valueLayout.ADDRESS, Interop.valueLayout.C_INT),
            false
        );
        
        private static final MethodHandle gsk_gl_shader_node_get_args = Interop.downcallHandle(
            "gsk_gl_shader_node_get_args",
            FunctionDescriptor.of(Interop.valueLayout.ADDRESS, Interop.valueLayout.ADDRESS),
            false
        );
        
        private static final MethodHandle gsk_gl_shader_node_get_child = Interop.downcallHandle(
            "gsk_gl_shader_node_get_child",
            FunctionDescriptor.of(Interop.valueLayout.ADDRESS, Interop.valueLayout.ADDRESS, Interop.valueLayout.C_INT),
            false
        );
        
        private static final MethodHandle gsk_gl_shader_node_get_n_children = Interop.downcallHandle(
            "gsk_gl_shader_node_get_n_children",
            FunctionDescriptor.of(Interop.valueLayout.C_INT, Interop.valueLayout.ADDRESS),
            false
        );
        
        private static final MethodHandle gsk_gl_shader_node_get_shader = Interop.downcallHandle(
            "gsk_gl_shader_node_get_shader",
            FunctionDescriptor.of(Interop.valueLayout.ADDRESS, Interop.valueLayout.ADDRESS),
            false
        );
        
        private static final MethodHandle gsk_gl_shader_node_get_type = Interop.downcallHandle(
            "gsk_gl_shader_node_get_type",
            FunctionDescriptor.of(Interop.valueLayout.C_LONG),
            false
        );
    }
}
