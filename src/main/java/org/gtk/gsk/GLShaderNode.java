package org.gtk.gsk;

import io.github.jwharm.javagi.*;
import java.lang.foreign.*;
import java.lang.invoke.*;
import org.jetbrains.annotations.*;

/**
 * A render node using a GL shader when drawing its children nodes.
 */
public class GLShaderNode extends RenderNode {

    public GLShaderNode(io.github.jwharm.javagi.Refcounted ref) {
        super(ref);
    }
    
    /** Cast object to GLShaderNode */
    public static GLShaderNode castFrom(org.gtk.gobject.Object gobject) {
        return new GLShaderNode(gobject.refcounted());
    }
    
    private static final MethodHandle gsk_gl_shader_node_new = Interop.downcallHandle(
        "gsk_gl_shader_node_new",
        FunctionDescriptor.of(ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.JAVA_INT)
    );
    
    private static Refcounted constructNew(@NotNull GLShader shader, @NotNull org.gtk.graphene.Rect bounds, @NotNull org.gtk.glib.Bytes args, @Nullable RenderNode[] children, @NotNull int nChildren) {
        try {
            Refcounted RESULT = Refcounted.get((MemoryAddress) gsk_gl_shader_node_new.invokeExact(shader.handle(), bounds.handle(), args.handle(), Interop.allocateNativeArray(children), nChildren), true);
            return RESULT;
        } catch (Throwable ERR) {
            throw new AssertionError("Unexpected exception occured: ", ERR);
        }
    }
    
    /**
     * Creates a {@code GskRenderNode} that will render the given {@code shader} into the
     * area given by {@code bounds}.
     * <p>
     * The {@code args} is a block of data to use for uniform input, as per types and
     * offsets defined by the {@code shader}. Normally this is generated by
     * {@code Gsk.ShaderArgsBuilder}.
     * <p>
     * See {@link GLShader} for details about how the shader should be written.
     * <p>
     * All the children will be rendered into textures (if they aren't already
     * {@code GskTextureNodes}, which will be used directly). These textures will be
     * sent as input to the shader.
     * <p>
     * If the renderer doesn't support GL shaders, or if there is any problem
     * when compiling the shader, then the node will draw pink. You should use
     * {@link GLShader#compile} to ensure the {@code shader} will work for the
     * renderer before using it.
     */
    public GLShaderNode(@NotNull GLShader shader, @NotNull org.gtk.graphene.Rect bounds, @NotNull org.gtk.glib.Bytes args, @Nullable RenderNode[] children, @NotNull int nChildren) {
        super(constructNew(shader, bounds, args, children, nChildren));
    }
    
    private static final MethodHandle gsk_gl_shader_node_get_args = Interop.downcallHandle(
        "gsk_gl_shader_node_get_args",
        FunctionDescriptor.of(ValueLayout.ADDRESS, ValueLayout.ADDRESS)
    );
    
    /**
     * Gets args for the node.
     */
    public @NotNull org.gtk.glib.Bytes getArgs() {
        MemoryAddress RESULT;
        try {
            RESULT = (MemoryAddress) gsk_gl_shader_node_get_args.invokeExact(handle());
        } catch (Throwable ERR) {
            throw new AssertionError("Unexpected exception occured: ", ERR);
        }
        return new org.gtk.glib.Bytes(Refcounted.get(RESULT, false));
    }
    
    private static final MethodHandle gsk_gl_shader_node_get_child = Interop.downcallHandle(
        "gsk_gl_shader_node_get_child",
        FunctionDescriptor.of(ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.JAVA_INT)
    );
    
    /**
     * Gets one of the children.
     */
    public @NotNull RenderNode getChild(@NotNull int idx) {
        MemoryAddress RESULT;
        try {
            RESULT = (MemoryAddress) gsk_gl_shader_node_get_child.invokeExact(handle(), idx);
        } catch (Throwable ERR) {
            throw new AssertionError("Unexpected exception occured: ", ERR);
        }
        return new RenderNode(Refcounted.get(RESULT, false));
    }
    
    private static final MethodHandle gsk_gl_shader_node_get_n_children = Interop.downcallHandle(
        "gsk_gl_shader_node_get_n_children",
        FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS)
    );
    
    /**
     * Returns the number of children
     */
    public int getNChildren() {
        int RESULT;
        try {
            RESULT = (int) gsk_gl_shader_node_get_n_children.invokeExact(handle());
        } catch (Throwable ERR) {
            throw new AssertionError("Unexpected exception occured: ", ERR);
        }
        return RESULT;
    }
    
    private static final MethodHandle gsk_gl_shader_node_get_shader = Interop.downcallHandle(
        "gsk_gl_shader_node_get_shader",
        FunctionDescriptor.of(ValueLayout.ADDRESS, ValueLayout.ADDRESS)
    );
    
    /**
     * Gets shader code for the node.
     */
    public @NotNull GLShader getShader() {
        MemoryAddress RESULT;
        try {
            RESULT = (MemoryAddress) gsk_gl_shader_node_get_shader.invokeExact(handle());
        } catch (Throwable ERR) {
            throw new AssertionError("Unexpected exception occured: ", ERR);
        }
        return new GLShader(Refcounted.get(RESULT, false));
    }
    
}
