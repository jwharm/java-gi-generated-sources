// Generated by jextract

package io.github.jwharm.javagi.interop.jextract;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
class constants$1514 {

    static final FunctionDescriptor _mm_castps_si128$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle _mm_castps_si128$MH = RuntimeHelper.downcallHandle(
        "_mm_castps_si128",
        constants$1514._mm_castps_si128$FUNC
    );
    static final FunctionDescriptor _mm_castsi128_ps$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle _mm_castsi128_ps$MH = RuntimeHelper.downcallHandle(
        "_mm_castsi128_ps",
        constants$1514._mm_castsi128_ps$FUNC
    );
    static final FunctionDescriptor _mm_castsi128_pd$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle _mm_castsi128_pd$MH = RuntimeHelper.downcallHandle(
        "_mm_castsi128_pd",
        constants$1514._mm_castsi128_pd$FUNC
    );
    static final FunctionDescriptor _mm_pause$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _mm_pause$MH = RuntimeHelper.downcallHandle(
        "_mm_pause",
        constants$1514._mm_pause$FUNC
    );
    static final FunctionDescriptor __fpclassify$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT
    );
    static final MethodHandle __fpclassify$MH = RuntimeHelper.downcallHandle(
        "__fpclassify",
        constants$1514.__fpclassify$FUNC
    );
    static final FunctionDescriptor __signbit$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT
    );
    static final MethodHandle __signbit$MH = RuntimeHelper.downcallHandle(
        "__signbit",
        constants$1514.__signbit$FUNC
    );
}


