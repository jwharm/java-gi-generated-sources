// Generated by jextract

package io.github.jwharm.javagi.interop.jextract;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class in_pktinfo {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_INT$LAYOUT.withName("ipi_ifindex"),
        MemoryLayout.structLayout(
            Constants$root.C_INT$LAYOUT.withName("s_addr")
        ).withName("ipi_spec_dst"),
        MemoryLayout.structLayout(
            Constants$root.C_INT$LAYOUT.withName("s_addr")
        ).withName("ipi_addr")
    ).withName("in_pktinfo");
    public static MemoryLayout $LAYOUT() {
        return in_pktinfo.$struct$LAYOUT;
    }
    static final VarHandle ipi_ifindex$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ipi_ifindex"));
    public static VarHandle ipi_ifindex$VH() {
        return in_pktinfo.ipi_ifindex$VH;
    }
    public static int ipi_ifindex$get(MemorySegment seg) {
        return (int)in_pktinfo.ipi_ifindex$VH.get(seg);
    }
    public static void ipi_ifindex$set( MemorySegment seg, int x) {
        in_pktinfo.ipi_ifindex$VH.set(seg, x);
    }
    public static int ipi_ifindex$get(MemorySegment seg, long index) {
        return (int)in_pktinfo.ipi_ifindex$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ipi_ifindex$set(MemorySegment seg, long index, int x) {
        in_pktinfo.ipi_ifindex$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment ipi_spec_dst$slice(MemorySegment seg) {
        return seg.asSlice(4, 4);
    }
    public static MemorySegment ipi_addr$slice(MemorySegment seg) {
        return seg.asSlice(8, 4);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


