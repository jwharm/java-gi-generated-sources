// Generated by jextract

package io.github.jwharm.javagi.interop.jextract;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _GtkWindowClass {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            MemoryLayout.structLayout(
                MemoryLayout.structLayout(
                    Constants$root.C_LONG_LONG$LAYOUT.withName("g_type")
                ).withName("g_type_class"),
                Constants$root.C_POINTER$LAYOUT.withName("construct_properties"),
                Constants$root.C_POINTER$LAYOUT.withName("constructor"),
                Constants$root.C_POINTER$LAYOUT.withName("set_property"),
                Constants$root.C_POINTER$LAYOUT.withName("get_property"),
                Constants$root.C_POINTER$LAYOUT.withName("dispose"),
                Constants$root.C_POINTER$LAYOUT.withName("finalize"),
                Constants$root.C_POINTER$LAYOUT.withName("dispatch_properties_changed"),
                Constants$root.C_POINTER$LAYOUT.withName("notify"),
                Constants$root.C_POINTER$LAYOUT.withName("constructed"),
                Constants$root.C_LONG_LONG$LAYOUT.withName("flags"),
                MemoryLayout.sequenceLayout(6, Constants$root.C_POINTER$LAYOUT).withName("pdummy")
            ).withName("parent_class"),
            Constants$root.C_POINTER$LAYOUT.withName("show"),
            Constants$root.C_POINTER$LAYOUT.withName("hide"),
            Constants$root.C_POINTER$LAYOUT.withName("map"),
            Constants$root.C_POINTER$LAYOUT.withName("unmap"),
            Constants$root.C_POINTER$LAYOUT.withName("realize"),
            Constants$root.C_POINTER$LAYOUT.withName("unrealize"),
            Constants$root.C_POINTER$LAYOUT.withName("root"),
            Constants$root.C_POINTER$LAYOUT.withName("unroot"),
            Constants$root.C_POINTER$LAYOUT.withName("size_allocate"),
            Constants$root.C_POINTER$LAYOUT.withName("state_flags_changed"),
            Constants$root.C_POINTER$LAYOUT.withName("direction_changed"),
            Constants$root.C_POINTER$LAYOUT.withName("get_request_mode"),
            Constants$root.C_POINTER$LAYOUT.withName("measure"),
            Constants$root.C_POINTER$LAYOUT.withName("mnemonic_activate"),
            Constants$root.C_POINTER$LAYOUT.withName("grab_focus"),
            Constants$root.C_POINTER$LAYOUT.withName("focus"),
            Constants$root.C_POINTER$LAYOUT.withName("set_focus_child"),
            Constants$root.C_POINTER$LAYOUT.withName("move_focus"),
            Constants$root.C_POINTER$LAYOUT.withName("keynav_failed"),
            Constants$root.C_POINTER$LAYOUT.withName("query_tooltip"),
            Constants$root.C_POINTER$LAYOUT.withName("compute_expand"),
            Constants$root.C_POINTER$LAYOUT.withName("css_changed"),
            Constants$root.C_POINTER$LAYOUT.withName("system_setting_changed"),
            Constants$root.C_POINTER$LAYOUT.withName("snapshot"),
            Constants$root.C_POINTER$LAYOUT.withName("contains"),
            Constants$root.C_POINTER$LAYOUT.withName("priv"),
            MemoryLayout.sequenceLayout(8, Constants$root.C_POINTER$LAYOUT).withName("padding")
        ).withName("parent_class"),
        Constants$root.C_POINTER$LAYOUT.withName("activate_focus"),
        Constants$root.C_POINTER$LAYOUT.withName("activate_default"),
        Constants$root.C_POINTER$LAYOUT.withName("keys_changed"),
        Constants$root.C_POINTER$LAYOUT.withName("enable_debugging"),
        Constants$root.C_POINTER$LAYOUT.withName("close_request"),
        MemoryLayout.sequenceLayout(8, Constants$root.C_POINTER$LAYOUT).withName("padding")
    ).withName("_GtkWindowClass");
    public static MemoryLayout $LAYOUT() {
        return _GtkWindowClass.$struct$LAYOUT;
    }
    public static MemorySegment parent_class$slice(MemorySegment seg) {
        return seg.asSlice(0, 408);
    }
    static final FunctionDescriptor activate_focus$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle activate_focus$MH = RuntimeHelper.downcallHandle(
        _GtkWindowClass.activate_focus$FUNC
    );
    public interface activate_focus {

        void apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(activate_focus fi, MemorySession session) {
            return RuntimeHelper.upcallStub(activate_focus.class, fi, _GtkWindowClass.activate_focus$FUNC, session);
        }
        static activate_focus ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    _GtkWindowClass.activate_focus$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle activate_focus$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("activate_focus"));
    public static VarHandle activate_focus$VH() {
        return _GtkWindowClass.activate_focus$VH;
    }
    public static MemoryAddress activate_focus$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkWindowClass.activate_focus$VH.get(seg);
    }
    public static void activate_focus$set( MemorySegment seg, MemoryAddress x) {
        _GtkWindowClass.activate_focus$VH.set(seg, x);
    }
    public static MemoryAddress activate_focus$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkWindowClass.activate_focus$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void activate_focus$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkWindowClass.activate_focus$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static activate_focus activate_focus (MemorySegment segment, MemorySession session) {
        return activate_focus.ofAddress(activate_focus$get(segment), session);
    }
    static final FunctionDescriptor activate_default$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle activate_default$MH = RuntimeHelper.downcallHandle(
        _GtkWindowClass.activate_default$FUNC
    );
    public interface activate_default {

        void apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(activate_default fi, MemorySession session) {
            return RuntimeHelper.upcallStub(activate_default.class, fi, _GtkWindowClass.activate_default$FUNC, session);
        }
        static activate_default ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    _GtkWindowClass.activate_default$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle activate_default$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("activate_default"));
    public static VarHandle activate_default$VH() {
        return _GtkWindowClass.activate_default$VH;
    }
    public static MemoryAddress activate_default$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkWindowClass.activate_default$VH.get(seg);
    }
    public static void activate_default$set( MemorySegment seg, MemoryAddress x) {
        _GtkWindowClass.activate_default$VH.set(seg, x);
    }
    public static MemoryAddress activate_default$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkWindowClass.activate_default$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void activate_default$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkWindowClass.activate_default$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static activate_default activate_default (MemorySegment segment, MemorySession session) {
        return activate_default.ofAddress(activate_default$get(segment), session);
    }
    static final FunctionDescriptor keys_changed$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle keys_changed$MH = RuntimeHelper.downcallHandle(
        _GtkWindowClass.keys_changed$FUNC
    );
    public interface keys_changed {

        void apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(keys_changed fi, MemorySession session) {
            return RuntimeHelper.upcallStub(keys_changed.class, fi, _GtkWindowClass.keys_changed$FUNC, session);
        }
        static keys_changed ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    _GtkWindowClass.keys_changed$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle keys_changed$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("keys_changed"));
    public static VarHandle keys_changed$VH() {
        return _GtkWindowClass.keys_changed$VH;
    }
    public static MemoryAddress keys_changed$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkWindowClass.keys_changed$VH.get(seg);
    }
    public static void keys_changed$set( MemorySegment seg, MemoryAddress x) {
        _GtkWindowClass.keys_changed$VH.set(seg, x);
    }
    public static MemoryAddress keys_changed$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkWindowClass.keys_changed$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void keys_changed$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkWindowClass.keys_changed$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static keys_changed keys_changed (MemorySegment segment, MemorySession session) {
        return keys_changed.ofAddress(keys_changed$get(segment), session);
    }
    static final FunctionDescriptor enable_debugging$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle enable_debugging$MH = RuntimeHelper.downcallHandle(
        _GtkWindowClass.enable_debugging$FUNC
    );
    public interface enable_debugging {

        int apply(java.lang.foreign.MemoryAddress _x0, int _x1);
        static MemorySegment allocate(enable_debugging fi, MemorySession session) {
            return RuntimeHelper.upcallStub(enable_debugging.class, fi, _GtkWindowClass.enable_debugging$FUNC, session);
        }
        static enable_debugging ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1) -> {
                try {
                    return (int)_GtkWindowClass.enable_debugging$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle enable_debugging$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("enable_debugging"));
    public static VarHandle enable_debugging$VH() {
        return _GtkWindowClass.enable_debugging$VH;
    }
    public static MemoryAddress enable_debugging$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkWindowClass.enable_debugging$VH.get(seg);
    }
    public static void enable_debugging$set( MemorySegment seg, MemoryAddress x) {
        _GtkWindowClass.enable_debugging$VH.set(seg, x);
    }
    public static MemoryAddress enable_debugging$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkWindowClass.enable_debugging$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void enable_debugging$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkWindowClass.enable_debugging$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static enable_debugging enable_debugging (MemorySegment segment, MemorySession session) {
        return enable_debugging.ofAddress(enable_debugging$get(segment), session);
    }
    static final FunctionDescriptor close_request$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle close_request$MH = RuntimeHelper.downcallHandle(
        _GtkWindowClass.close_request$FUNC
    );
    public interface close_request {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(close_request fi, MemorySession session) {
            return RuntimeHelper.upcallStub(close_request.class, fi, _GtkWindowClass.close_request$FUNC, session);
        }
        static close_request ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)_GtkWindowClass.close_request$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle close_request$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("close_request"));
    public static VarHandle close_request$VH() {
        return _GtkWindowClass.close_request$VH;
    }
    public static MemoryAddress close_request$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkWindowClass.close_request$VH.get(seg);
    }
    public static void close_request$set( MemorySegment seg, MemoryAddress x) {
        _GtkWindowClass.close_request$VH.set(seg, x);
    }
    public static MemoryAddress close_request$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkWindowClass.close_request$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void close_request$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkWindowClass.close_request$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static close_request close_request (MemorySegment segment, MemorySession session) {
        return close_request.ofAddress(close_request$get(segment), session);
    }
    public static MemorySegment padding$slice(MemorySegment seg) {
        return seg.asSlice(448, 64);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


