// Generated by jextract

package io.github.jwharm.javagi.interop.jextract;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class ifconf {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_INT$LAYOUT.withName("ifc_len"),
        MemoryLayout.paddingLayout(32),
        MemoryLayout.unionLayout(
            Constants$root.C_POINTER$LAYOUT.withName("ifcu_buf"),
            Constants$root.C_POINTER$LAYOUT.withName("ifcu_req")
        ).withName("ifc_ifcu")
    ).withName("ifconf");
    public static MemoryLayout $LAYOUT() {
        return ifconf.$struct$LAYOUT;
    }
    static final VarHandle ifc_len$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ifc_len"));
    public static VarHandle ifc_len$VH() {
        return ifconf.ifc_len$VH;
    }
    public static int ifc_len$get(MemorySegment seg) {
        return (int)ifconf.ifc_len$VH.get(seg);
    }
    public static void ifc_len$set( MemorySegment seg, int x) {
        ifconf.ifc_len$VH.set(seg, x);
    }
    public static int ifc_len$get(MemorySegment seg, long index) {
        return (int)ifconf.ifc_len$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ifc_len$set(MemorySegment seg, long index, int x) {
        ifconf.ifc_len$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static class ifc_ifcu {

        static final  GroupLayout ifc_ifcu$union$LAYOUT = MemoryLayout.unionLayout(
            Constants$root.C_POINTER$LAYOUT.withName("ifcu_buf"),
            Constants$root.C_POINTER$LAYOUT.withName("ifcu_req")
        );
        public static MemoryLayout $LAYOUT() {
            return ifc_ifcu.ifc_ifcu$union$LAYOUT;
        }
        static final VarHandle ifcu_buf$VH = ifc_ifcu$union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ifcu_buf"));
        public static VarHandle ifcu_buf$VH() {
            return ifc_ifcu.ifcu_buf$VH;
        }
        public static MemoryAddress ifcu_buf$get(MemorySegment seg) {
            return (java.lang.foreign.MemoryAddress)ifc_ifcu.ifcu_buf$VH.get(seg);
        }
        public static void ifcu_buf$set( MemorySegment seg, MemoryAddress x) {
            ifc_ifcu.ifcu_buf$VH.set(seg, x);
        }
        public static MemoryAddress ifcu_buf$get(MemorySegment seg, long index) {
            return (java.lang.foreign.MemoryAddress)ifc_ifcu.ifcu_buf$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void ifcu_buf$set(MemorySegment seg, long index, MemoryAddress x) {
            ifc_ifcu.ifcu_buf$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle ifcu_req$VH = ifc_ifcu$union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ifcu_req"));
        public static VarHandle ifcu_req$VH() {
            return ifc_ifcu.ifcu_req$VH;
        }
        public static MemoryAddress ifcu_req$get(MemorySegment seg) {
            return (java.lang.foreign.MemoryAddress)ifc_ifcu.ifcu_req$VH.get(seg);
        }
        public static void ifcu_req$set( MemorySegment seg, MemoryAddress x) {
            ifc_ifcu.ifcu_req$VH.set(seg, x);
        }
        public static MemoryAddress ifcu_req$get(MemorySegment seg, long index) {
            return (java.lang.foreign.MemoryAddress)ifc_ifcu.ifcu_req$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void ifcu_req$set(MemorySegment seg, long index, MemoryAddress x) {
            ifc_ifcu.ifcu_req$VH.set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
    }

    public static MemorySegment ifc_ifcu$slice(MemorySegment seg) {
        return seg.asSlice(8, 8);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


