// Generated by jextract

package io.github.jwharm.javagi.interop.jextract;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class FT_CharMapRec_ {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("face"),
        Constants$root.C_INT$LAYOUT.withName("encoding"),
        Constants$root.C_SHORT$LAYOUT.withName("platform_id"),
        Constants$root.C_SHORT$LAYOUT.withName("encoding_id")
    ).withName("FT_CharMapRec_");
    public static MemoryLayout $LAYOUT() {
        return FT_CharMapRec_.$struct$LAYOUT;
    }
    static final VarHandle face$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("face"));
    public static VarHandle face$VH() {
        return FT_CharMapRec_.face$VH;
    }
    public static MemoryAddress face$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)FT_CharMapRec_.face$VH.get(seg);
    }
    public static void face$set( MemorySegment seg, MemoryAddress x) {
        FT_CharMapRec_.face$VH.set(seg, x);
    }
    public static MemoryAddress face$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)FT_CharMapRec_.face$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void face$set(MemorySegment seg, long index, MemoryAddress x) {
        FT_CharMapRec_.face$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle encoding$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("encoding"));
    public static VarHandle encoding$VH() {
        return FT_CharMapRec_.encoding$VH;
    }
    public static int encoding$get(MemorySegment seg) {
        return (int)FT_CharMapRec_.encoding$VH.get(seg);
    }
    public static void encoding$set( MemorySegment seg, int x) {
        FT_CharMapRec_.encoding$VH.set(seg, x);
    }
    public static int encoding$get(MemorySegment seg, long index) {
        return (int)FT_CharMapRec_.encoding$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void encoding$set(MemorySegment seg, long index, int x) {
        FT_CharMapRec_.encoding$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle platform_id$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("platform_id"));
    public static VarHandle platform_id$VH() {
        return FT_CharMapRec_.platform_id$VH;
    }
    public static short platform_id$get(MemorySegment seg) {
        return (short)FT_CharMapRec_.platform_id$VH.get(seg);
    }
    public static void platform_id$set( MemorySegment seg, short x) {
        FT_CharMapRec_.platform_id$VH.set(seg, x);
    }
    public static short platform_id$get(MemorySegment seg, long index) {
        return (short)FT_CharMapRec_.platform_id$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void platform_id$set(MemorySegment seg, long index, short x) {
        FT_CharMapRec_.platform_id$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle encoding_id$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("encoding_id"));
    public static VarHandle encoding_id$VH() {
        return FT_CharMapRec_.encoding_id$VH;
    }
    public static short encoding_id$get(MemorySegment seg) {
        return (short)FT_CharMapRec_.encoding_id$VH.get(seg);
    }
    public static void encoding_id$set( MemorySegment seg, short x) {
        FT_CharMapRec_.encoding_id$VH.set(seg, x);
    }
    public static short encoding_id$get(MemorySegment seg, long index) {
        return (short)FT_CharMapRec_.encoding_id$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void encoding_id$set(MemorySegment seg, long index, short x) {
        FT_CharMapRec_.encoding_id$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


