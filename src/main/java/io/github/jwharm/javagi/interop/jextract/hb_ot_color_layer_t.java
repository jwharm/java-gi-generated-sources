// Generated by jextract

package io.github.jwharm.javagi.interop.jextract;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class hb_ot_color_layer_t {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_INT$LAYOUT.withName("glyph"),
        Constants$root.C_INT$LAYOUT.withName("color_index")
    ).withName("hb_ot_color_layer_t");
    public static MemoryLayout $LAYOUT() {
        return hb_ot_color_layer_t.$struct$LAYOUT;
    }
    static final VarHandle glyph$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("glyph"));
    public static VarHandle glyph$VH() {
        return hb_ot_color_layer_t.glyph$VH;
    }
    public static int glyph$get(MemorySegment seg) {
        return (int)hb_ot_color_layer_t.glyph$VH.get(seg);
    }
    public static void glyph$set( MemorySegment seg, int x) {
        hb_ot_color_layer_t.glyph$VH.set(seg, x);
    }
    public static int glyph$get(MemorySegment seg, long index) {
        return (int)hb_ot_color_layer_t.glyph$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void glyph$set(MemorySegment seg, long index, int x) {
        hb_ot_color_layer_t.glyph$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle color_index$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("color_index"));
    public static VarHandle color_index$VH() {
        return hb_ot_color_layer_t.color_index$VH;
    }
    public static int color_index$get(MemorySegment seg) {
        return (int)hb_ot_color_layer_t.color_index$VH.get(seg);
    }
    public static void color_index$set( MemorySegment seg, int x) {
        hb_ot_color_layer_t.color_index$VH.set(seg, x);
    }
    public static int color_index$get(MemorySegment seg, long index) {
        return (int)hb_ot_color_layer_t.color_index$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void color_index$set(MemorySegment seg, long index, int x) {
        hb_ot_color_layer_t.color_index$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


