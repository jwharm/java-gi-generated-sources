// Generated by jextract

package io.github.jwharm.javagi.interop.jextract;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class __ns_msg {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("_msg"),
        Constants$root.C_POINTER$LAYOUT.withName("_eom"),
        Constants$root.C_SHORT$LAYOUT.withName("_id"),
        Constants$root.C_SHORT$LAYOUT.withName("_flags"),
        MemoryLayout.sequenceLayout(4, Constants$root.C_SHORT$LAYOUT).withName("_counts"),
        MemoryLayout.paddingLayout(32),
        MemoryLayout.sequenceLayout(4, Constants$root.C_POINTER$LAYOUT).withName("_sections"),
        Constants$root.C_INT$LAYOUT.withName("_sect"),
        Constants$root.C_INT$LAYOUT.withName("_rrnum"),
        Constants$root.C_POINTER$LAYOUT.withName("_msg_ptr")
    ).withName("__ns_msg");
    public static MemoryLayout $LAYOUT() {
        return __ns_msg.$struct$LAYOUT;
    }
    static final VarHandle _msg$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_msg"));
    public static VarHandle _msg$VH() {
        return __ns_msg._msg$VH;
    }
    public static MemoryAddress _msg$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)__ns_msg._msg$VH.get(seg);
    }
    public static void _msg$set( MemorySegment seg, MemoryAddress x) {
        __ns_msg._msg$VH.set(seg, x);
    }
    public static MemoryAddress _msg$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)__ns_msg._msg$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _msg$set(MemorySegment seg, long index, MemoryAddress x) {
        __ns_msg._msg$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle _eom$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_eom"));
    public static VarHandle _eom$VH() {
        return __ns_msg._eom$VH;
    }
    public static MemoryAddress _eom$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)__ns_msg._eom$VH.get(seg);
    }
    public static void _eom$set( MemorySegment seg, MemoryAddress x) {
        __ns_msg._eom$VH.set(seg, x);
    }
    public static MemoryAddress _eom$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)__ns_msg._eom$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _eom$set(MemorySegment seg, long index, MemoryAddress x) {
        __ns_msg._eom$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle _id$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_id"));
    public static VarHandle _id$VH() {
        return __ns_msg._id$VH;
    }
    public static short _id$get(MemorySegment seg) {
        return (short)__ns_msg._id$VH.get(seg);
    }
    public static void _id$set( MemorySegment seg, short x) {
        __ns_msg._id$VH.set(seg, x);
    }
    public static short _id$get(MemorySegment seg, long index) {
        return (short)__ns_msg._id$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _id$set(MemorySegment seg, long index, short x) {
        __ns_msg._id$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle _flags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_flags"));
    public static VarHandle _flags$VH() {
        return __ns_msg._flags$VH;
    }
    public static short _flags$get(MemorySegment seg) {
        return (short)__ns_msg._flags$VH.get(seg);
    }
    public static void _flags$set( MemorySegment seg, short x) {
        __ns_msg._flags$VH.set(seg, x);
    }
    public static short _flags$get(MemorySegment seg, long index) {
        return (short)__ns_msg._flags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _flags$set(MemorySegment seg, long index, short x) {
        __ns_msg._flags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment _counts$slice(MemorySegment seg) {
        return seg.asSlice(20, 8);
    }
    public static MemorySegment _sections$slice(MemorySegment seg) {
        return seg.asSlice(32, 32);
    }
    static final VarHandle _sect$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_sect"));
    public static VarHandle _sect$VH() {
        return __ns_msg._sect$VH;
    }
    public static int _sect$get(MemorySegment seg) {
        return (int)__ns_msg._sect$VH.get(seg);
    }
    public static void _sect$set( MemorySegment seg, int x) {
        __ns_msg._sect$VH.set(seg, x);
    }
    public static int _sect$get(MemorySegment seg, long index) {
        return (int)__ns_msg._sect$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _sect$set(MemorySegment seg, long index, int x) {
        __ns_msg._sect$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle _rrnum$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_rrnum"));
    public static VarHandle _rrnum$VH() {
        return __ns_msg._rrnum$VH;
    }
    public static int _rrnum$get(MemorySegment seg) {
        return (int)__ns_msg._rrnum$VH.get(seg);
    }
    public static void _rrnum$set( MemorySegment seg, int x) {
        __ns_msg._rrnum$VH.set(seg, x);
    }
    public static int _rrnum$get(MemorySegment seg, long index) {
        return (int)__ns_msg._rrnum$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _rrnum$set(MemorySegment seg, long index, int x) {
        __ns_msg._rrnum$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle _msg_ptr$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_msg_ptr"));
    public static VarHandle _msg_ptr$VH() {
        return __ns_msg._msg_ptr$VH;
    }
    public static MemoryAddress _msg_ptr$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)__ns_msg._msg_ptr$VH.get(seg);
    }
    public static void _msg_ptr$set( MemorySegment seg, MemoryAddress x) {
        __ns_msg._msg_ptr$VH.set(seg, x);
    }
    public static MemoryAddress _msg_ptr$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)__ns_msg._msg_ptr$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _msg_ptr$set(MemorySegment seg, long index, MemoryAddress x) {
        __ns_msg._msg_ptr$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


