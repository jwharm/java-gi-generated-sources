// Generated by jextract

package io.github.jwharm.javagi.interop.jextract;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class FT_Size_Metrics_ {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_SHORT$LAYOUT.withName("x_ppem"),
        Constants$root.C_SHORT$LAYOUT.withName("y_ppem"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_LONG_LONG$LAYOUT.withName("x_scale"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("y_scale"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("ascender"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("descender"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("height"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("max_advance")
    ).withName("FT_Size_Metrics_");
    public static MemoryLayout $LAYOUT() {
        return FT_Size_Metrics_.$struct$LAYOUT;
    }
    static final VarHandle x_ppem$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("x_ppem"));
    public static VarHandle x_ppem$VH() {
        return FT_Size_Metrics_.x_ppem$VH;
    }
    public static short x_ppem$get(MemorySegment seg) {
        return (short)FT_Size_Metrics_.x_ppem$VH.get(seg);
    }
    public static void x_ppem$set( MemorySegment seg, short x) {
        FT_Size_Metrics_.x_ppem$VH.set(seg, x);
    }
    public static short x_ppem$get(MemorySegment seg, long index) {
        return (short)FT_Size_Metrics_.x_ppem$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void x_ppem$set(MemorySegment seg, long index, short x) {
        FT_Size_Metrics_.x_ppem$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle y_ppem$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("y_ppem"));
    public static VarHandle y_ppem$VH() {
        return FT_Size_Metrics_.y_ppem$VH;
    }
    public static short y_ppem$get(MemorySegment seg) {
        return (short)FT_Size_Metrics_.y_ppem$VH.get(seg);
    }
    public static void y_ppem$set( MemorySegment seg, short x) {
        FT_Size_Metrics_.y_ppem$VH.set(seg, x);
    }
    public static short y_ppem$get(MemorySegment seg, long index) {
        return (short)FT_Size_Metrics_.y_ppem$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void y_ppem$set(MemorySegment seg, long index, short x) {
        FT_Size_Metrics_.y_ppem$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle x_scale$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("x_scale"));
    public static VarHandle x_scale$VH() {
        return FT_Size_Metrics_.x_scale$VH;
    }
    public static long x_scale$get(MemorySegment seg) {
        return (long)FT_Size_Metrics_.x_scale$VH.get(seg);
    }
    public static void x_scale$set( MemorySegment seg, long x) {
        FT_Size_Metrics_.x_scale$VH.set(seg, x);
    }
    public static long x_scale$get(MemorySegment seg, long index) {
        return (long)FT_Size_Metrics_.x_scale$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void x_scale$set(MemorySegment seg, long index, long x) {
        FT_Size_Metrics_.x_scale$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle y_scale$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("y_scale"));
    public static VarHandle y_scale$VH() {
        return FT_Size_Metrics_.y_scale$VH;
    }
    public static long y_scale$get(MemorySegment seg) {
        return (long)FT_Size_Metrics_.y_scale$VH.get(seg);
    }
    public static void y_scale$set( MemorySegment seg, long x) {
        FT_Size_Metrics_.y_scale$VH.set(seg, x);
    }
    public static long y_scale$get(MemorySegment seg, long index) {
        return (long)FT_Size_Metrics_.y_scale$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void y_scale$set(MemorySegment seg, long index, long x) {
        FT_Size_Metrics_.y_scale$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ascender$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ascender"));
    public static VarHandle ascender$VH() {
        return FT_Size_Metrics_.ascender$VH;
    }
    public static long ascender$get(MemorySegment seg) {
        return (long)FT_Size_Metrics_.ascender$VH.get(seg);
    }
    public static void ascender$set( MemorySegment seg, long x) {
        FT_Size_Metrics_.ascender$VH.set(seg, x);
    }
    public static long ascender$get(MemorySegment seg, long index) {
        return (long)FT_Size_Metrics_.ascender$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ascender$set(MemorySegment seg, long index, long x) {
        FT_Size_Metrics_.ascender$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle descender$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("descender"));
    public static VarHandle descender$VH() {
        return FT_Size_Metrics_.descender$VH;
    }
    public static long descender$get(MemorySegment seg) {
        return (long)FT_Size_Metrics_.descender$VH.get(seg);
    }
    public static void descender$set( MemorySegment seg, long x) {
        FT_Size_Metrics_.descender$VH.set(seg, x);
    }
    public static long descender$get(MemorySegment seg, long index) {
        return (long)FT_Size_Metrics_.descender$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void descender$set(MemorySegment seg, long index, long x) {
        FT_Size_Metrics_.descender$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle height$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("height"));
    public static VarHandle height$VH() {
        return FT_Size_Metrics_.height$VH;
    }
    public static long height$get(MemorySegment seg) {
        return (long)FT_Size_Metrics_.height$VH.get(seg);
    }
    public static void height$set( MemorySegment seg, long x) {
        FT_Size_Metrics_.height$VH.set(seg, x);
    }
    public static long height$get(MemorySegment seg, long index) {
        return (long)FT_Size_Metrics_.height$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void height$set(MemorySegment seg, long index, long x) {
        FT_Size_Metrics_.height$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle max_advance$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("max_advance"));
    public static VarHandle max_advance$VH() {
        return FT_Size_Metrics_.max_advance$VH;
    }
    public static long max_advance$get(MemorySegment seg) {
        return (long)FT_Size_Metrics_.max_advance$VH.get(seg);
    }
    public static void max_advance$set( MemorySegment seg, long x) {
        FT_Size_Metrics_.max_advance$VH.set(seg, x);
    }
    public static long max_advance$get(MemorySegment seg, long index) {
        return (long)FT_Size_Metrics_.max_advance$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void max_advance$set(MemorySegment seg, long index, long x) {
        FT_Size_Metrics_.max_advance$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


