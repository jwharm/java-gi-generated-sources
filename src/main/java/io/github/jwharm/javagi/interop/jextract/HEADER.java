// Generated by jextract

package io.github.jwharm.javagi.interop.jextract;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class HEADER {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            MemoryLayout.paddingLayout(16).withName("id"),
            MemoryLayout.paddingLayout(1).withName("rd"),
            MemoryLayout.paddingLayout(1).withName("tc"),
            MemoryLayout.paddingLayout(1).withName("aa"),
            MemoryLayout.paddingLayout(4).withName("opcode"),
            MemoryLayout.paddingLayout(1).withName("qr"),
            MemoryLayout.paddingLayout(4).withName("rcode"),
            MemoryLayout.paddingLayout(1).withName("cd"),
            MemoryLayout.paddingLayout(1).withName("ad"),
            MemoryLayout.paddingLayout(1).withName("unused"),
            MemoryLayout.paddingLayout(1).withName("ra"),
            MemoryLayout.paddingLayout(16).withName("qdcount"),
            MemoryLayout.paddingLayout(16).withName("ancount"),
            MemoryLayout.paddingLayout(16).withName("nscount"),
            MemoryLayout.paddingLayout(16).withName("arcount")
        )
    );
    public static MemoryLayout $LAYOUT() {
        return HEADER.$struct$LAYOUT;
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


