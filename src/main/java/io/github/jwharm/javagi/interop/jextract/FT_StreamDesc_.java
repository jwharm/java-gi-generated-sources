// Generated by jextract

package io.github.jwharm.javagi.interop.jextract;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class FT_StreamDesc_ {

    static final  GroupLayout $union$LAYOUT = MemoryLayout.unionLayout(
        Constants$root.C_LONG_LONG$LAYOUT.withName("value"),
        Constants$root.C_POINTER$LAYOUT.withName("pointer")
    ).withName("FT_StreamDesc_");
    public static MemoryLayout $LAYOUT() {
        return FT_StreamDesc_.$union$LAYOUT;
    }
    static final VarHandle value$VH = $union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("value"));
    public static VarHandle value$VH() {
        return FT_StreamDesc_.value$VH;
    }
    public static long value$get(MemorySegment seg) {
        return (long)FT_StreamDesc_.value$VH.get(seg);
    }
    public static void value$set( MemorySegment seg, long x) {
        FT_StreamDesc_.value$VH.set(seg, x);
    }
    public static long value$get(MemorySegment seg, long index) {
        return (long)FT_StreamDesc_.value$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void value$set(MemorySegment seg, long index, long x) {
        FT_StreamDesc_.value$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pointer$VH = $union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pointer"));
    public static VarHandle pointer$VH() {
        return FT_StreamDesc_.pointer$VH;
    }
    public static MemoryAddress pointer$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)FT_StreamDesc_.pointer$VH.get(seg);
    }
    public static void pointer$set( MemorySegment seg, MemoryAddress x) {
        FT_StreamDesc_.pointer$VH.set(seg, x);
    }
    public static MemoryAddress pointer$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)FT_StreamDesc_.pointer$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pointer$set(MemorySegment seg, long index, MemoryAddress x) {
        FT_StreamDesc_.pointer$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


