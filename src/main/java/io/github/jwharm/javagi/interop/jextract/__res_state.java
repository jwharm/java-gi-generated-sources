// Generated by jextract

package io.github.jwharm.javagi.interop.jextract;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class __res_state {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_INT$LAYOUT.withName("retrans"),
        Constants$root.C_INT$LAYOUT.withName("retry"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("options"),
        Constants$root.C_INT$LAYOUT.withName("nscount"),
        MemoryLayout.sequenceLayout(3, MemoryLayout.structLayout(
            Constants$root.C_SHORT$LAYOUT.withName("sin_family"),
            Constants$root.C_SHORT$LAYOUT.withName("sin_port"),
            MemoryLayout.structLayout(
                Constants$root.C_INT$LAYOUT.withName("s_addr")
            ).withName("sin_addr"),
            MemoryLayout.sequenceLayout(8, Constants$root.C_CHAR$LAYOUT).withName("sin_zero")
        ).withName("sockaddr_in")).withName("nsaddr_list"),
        Constants$root.C_SHORT$LAYOUT.withName("id"),
        MemoryLayout.paddingLayout(16),
        MemoryLayout.sequenceLayout(7, Constants$root.C_POINTER$LAYOUT).withName("dnsrch"),
        MemoryLayout.sequenceLayout(256, Constants$root.C_CHAR$LAYOUT).withName("defdname"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("pfcode"),
        MemoryLayout.structLayout(
            MemoryLayout.paddingLayout(4).withName("ndots"),
            MemoryLayout.paddingLayout(4).withName("nsort"),
            MemoryLayout.paddingLayout(1).withName("ipv6_unavail"),
            MemoryLayout.paddingLayout(23).withName("unused")
        ),
        MemoryLayout.sequenceLayout(10, MemoryLayout.structLayout(
            MemoryLayout.structLayout(
                Constants$root.C_INT$LAYOUT.withName("s_addr")
            ).withName("addr"),
            Constants$root.C_INT$LAYOUT.withName("mask")
        )).withName("sort_list"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("__glibc_unused_qhook"),
        Constants$root.C_POINTER$LAYOUT.withName("__glibc_unused_rhook"),
        Constants$root.C_INT$LAYOUT.withName("res_h_errno"),
        Constants$root.C_INT$LAYOUT.withName("_vcsock"),
        Constants$root.C_INT$LAYOUT.withName("_flags"),
        MemoryLayout.paddingLayout(32),
        MemoryLayout.unionLayout(
            MemoryLayout.sequenceLayout(52, Constants$root.C_CHAR$LAYOUT).withName("pad"),
            MemoryLayout.structLayout(
                Constants$root.C_SHORT$LAYOUT.withName("nscount"),
                MemoryLayout.sequenceLayout(3, Constants$root.C_SHORT$LAYOUT).withName("nsmap"),
                MemoryLayout.sequenceLayout(3, Constants$root.C_INT$LAYOUT).withName("nssocks"),
                Constants$root.C_SHORT$LAYOUT.withName("nscount6"),
                Constants$root.C_SHORT$LAYOUT.withName("nsinit"),
                MemoryLayout.sequenceLayout(3, Constants$root.C_POINTER$LAYOUT).withName("nsaddrs"),
                MemoryLayout.sequenceLayout(2, Constants$root.C_INT$LAYOUT).withName("__glibc_reserved")
            ).withName("_ext")
        ).withName("_u")
    ).withName("__res_state");
    public static MemoryLayout $LAYOUT() {
        return __res_state.$struct$LAYOUT;
    }
    static final VarHandle retrans$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("retrans"));
    public static VarHandle retrans$VH() {
        return __res_state.retrans$VH;
    }
    public static int retrans$get(MemorySegment seg) {
        return (int)__res_state.retrans$VH.get(seg);
    }
    public static void retrans$set( MemorySegment seg, int x) {
        __res_state.retrans$VH.set(seg, x);
    }
    public static int retrans$get(MemorySegment seg, long index) {
        return (int)__res_state.retrans$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void retrans$set(MemorySegment seg, long index, int x) {
        __res_state.retrans$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle retry$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("retry"));
    public static VarHandle retry$VH() {
        return __res_state.retry$VH;
    }
    public static int retry$get(MemorySegment seg) {
        return (int)__res_state.retry$VH.get(seg);
    }
    public static void retry$set( MemorySegment seg, int x) {
        __res_state.retry$VH.set(seg, x);
    }
    public static int retry$get(MemorySegment seg, long index) {
        return (int)__res_state.retry$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void retry$set(MemorySegment seg, long index, int x) {
        __res_state.retry$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle options$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("options"));
    public static VarHandle options$VH() {
        return __res_state.options$VH;
    }
    public static long options$get(MemorySegment seg) {
        return (long)__res_state.options$VH.get(seg);
    }
    public static void options$set( MemorySegment seg, long x) {
        __res_state.options$VH.set(seg, x);
    }
    public static long options$get(MemorySegment seg, long index) {
        return (long)__res_state.options$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void options$set(MemorySegment seg, long index, long x) {
        __res_state.options$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle nscount$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("nscount"));
    public static VarHandle nscount$VH() {
        return __res_state.nscount$VH;
    }
    public static int nscount$get(MemorySegment seg) {
        return (int)__res_state.nscount$VH.get(seg);
    }
    public static void nscount$set( MemorySegment seg, int x) {
        __res_state.nscount$VH.set(seg, x);
    }
    public static int nscount$get(MemorySegment seg, long index) {
        return (int)__res_state.nscount$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void nscount$set(MemorySegment seg, long index, int x) {
        __res_state.nscount$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment nsaddr_list$slice(MemorySegment seg) {
        return seg.asSlice(20, 48);
    }
    static final VarHandle id$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("id"));
    public static VarHandle id$VH() {
        return __res_state.id$VH;
    }
    public static short id$get(MemorySegment seg) {
        return (short)__res_state.id$VH.get(seg);
    }
    public static void id$set( MemorySegment seg, short x) {
        __res_state.id$VH.set(seg, x);
    }
    public static short id$get(MemorySegment seg, long index) {
        return (short)__res_state.id$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void id$set(MemorySegment seg, long index, short x) {
        __res_state.id$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment dnsrch$slice(MemorySegment seg) {
        return seg.asSlice(72, 56);
    }
    public static MemorySegment defdname$slice(MemorySegment seg) {
        return seg.asSlice(128, 256);
    }
    static final VarHandle pfcode$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pfcode"));
    public static VarHandle pfcode$VH() {
        return __res_state.pfcode$VH;
    }
    public static long pfcode$get(MemorySegment seg) {
        return (long)__res_state.pfcode$VH.get(seg);
    }
    public static void pfcode$set( MemorySegment seg, long x) {
        __res_state.pfcode$VH.set(seg, x);
    }
    public static long pfcode$get(MemorySegment seg, long index) {
        return (long)__res_state.pfcode$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pfcode$set(MemorySegment seg, long index, long x) {
        __res_state.pfcode$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment sort_list$slice(MemorySegment seg) {
        return seg.asSlice(396, 80);
    }
    static final VarHandle __glibc_unused_qhook$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("__glibc_unused_qhook"));
    public static VarHandle __glibc_unused_qhook$VH() {
        return __res_state.__glibc_unused_qhook$VH;
    }
    public static MemoryAddress __glibc_unused_qhook$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)__res_state.__glibc_unused_qhook$VH.get(seg);
    }
    public static void __glibc_unused_qhook$set( MemorySegment seg, MemoryAddress x) {
        __res_state.__glibc_unused_qhook$VH.set(seg, x);
    }
    public static MemoryAddress __glibc_unused_qhook$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)__res_state.__glibc_unused_qhook$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void __glibc_unused_qhook$set(MemorySegment seg, long index, MemoryAddress x) {
        __res_state.__glibc_unused_qhook$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle __glibc_unused_rhook$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("__glibc_unused_rhook"));
    public static VarHandle __glibc_unused_rhook$VH() {
        return __res_state.__glibc_unused_rhook$VH;
    }
    public static MemoryAddress __glibc_unused_rhook$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)__res_state.__glibc_unused_rhook$VH.get(seg);
    }
    public static void __glibc_unused_rhook$set( MemorySegment seg, MemoryAddress x) {
        __res_state.__glibc_unused_rhook$VH.set(seg, x);
    }
    public static MemoryAddress __glibc_unused_rhook$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)__res_state.__glibc_unused_rhook$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void __glibc_unused_rhook$set(MemorySegment seg, long index, MemoryAddress x) {
        __res_state.__glibc_unused_rhook$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle res_h_errno$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("res_h_errno"));
    public static VarHandle res_h_errno$VH() {
        return __res_state.res_h_errno$VH;
    }
    public static int res_h_errno$get(MemorySegment seg) {
        return (int)__res_state.res_h_errno$VH.get(seg);
    }
    public static void res_h_errno$set( MemorySegment seg, int x) {
        __res_state.res_h_errno$VH.set(seg, x);
    }
    public static int res_h_errno$get(MemorySegment seg, long index) {
        return (int)__res_state.res_h_errno$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void res_h_errno$set(MemorySegment seg, long index, int x) {
        __res_state.res_h_errno$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle _vcsock$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_vcsock"));
    public static VarHandle _vcsock$VH() {
        return __res_state._vcsock$VH;
    }
    public static int _vcsock$get(MemorySegment seg) {
        return (int)__res_state._vcsock$VH.get(seg);
    }
    public static void _vcsock$set( MemorySegment seg, int x) {
        __res_state._vcsock$VH.set(seg, x);
    }
    public static int _vcsock$get(MemorySegment seg, long index) {
        return (int)__res_state._vcsock$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _vcsock$set(MemorySegment seg, long index, int x) {
        __res_state._vcsock$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle _flags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_flags"));
    public static VarHandle _flags$VH() {
        return __res_state._flags$VH;
    }
    public static int _flags$get(MemorySegment seg) {
        return (int)__res_state._flags$VH.get(seg);
    }
    public static void _flags$set( MemorySegment seg, int x) {
        __res_state._flags$VH.set(seg, x);
    }
    public static int _flags$get(MemorySegment seg, long index) {
        return (int)__res_state._flags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _flags$set(MemorySegment seg, long index, int x) {
        __res_state._flags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static class _u {

        static final  GroupLayout _u$union$LAYOUT = MemoryLayout.unionLayout(
            MemoryLayout.sequenceLayout(52, Constants$root.C_CHAR$LAYOUT).withName("pad"),
            MemoryLayout.structLayout(
                Constants$root.C_SHORT$LAYOUT.withName("nscount"),
                MemoryLayout.sequenceLayout(3, Constants$root.C_SHORT$LAYOUT).withName("nsmap"),
                MemoryLayout.sequenceLayout(3, Constants$root.C_INT$LAYOUT).withName("nssocks"),
                Constants$root.C_SHORT$LAYOUT.withName("nscount6"),
                Constants$root.C_SHORT$LAYOUT.withName("nsinit"),
                MemoryLayout.sequenceLayout(3, Constants$root.C_POINTER$LAYOUT).withName("nsaddrs"),
                MemoryLayout.sequenceLayout(2, Constants$root.C_INT$LAYOUT).withName("__glibc_reserved")
            ).withName("_ext")
        );
        public static MemoryLayout $LAYOUT() {
            return _u._u$union$LAYOUT;
        }
        public static MemorySegment pad$slice(MemorySegment seg) {
            return seg.asSlice(0, 52);
        }
        public static class _ext {

            static final  GroupLayout _u$_ext$struct$LAYOUT = MemoryLayout.structLayout(
                Constants$root.C_SHORT$LAYOUT.withName("nscount"),
                MemoryLayout.sequenceLayout(3, Constants$root.C_SHORT$LAYOUT).withName("nsmap"),
                MemoryLayout.sequenceLayout(3, Constants$root.C_INT$LAYOUT).withName("nssocks"),
                Constants$root.C_SHORT$LAYOUT.withName("nscount6"),
                Constants$root.C_SHORT$LAYOUT.withName("nsinit"),
                MemoryLayout.sequenceLayout(3, Constants$root.C_POINTER$LAYOUT).withName("nsaddrs"),
                MemoryLayout.sequenceLayout(2, Constants$root.C_INT$LAYOUT).withName("__glibc_reserved")
            );
            public static MemoryLayout $LAYOUT() {
                return _ext._u$_ext$struct$LAYOUT;
            }
            static final VarHandle nscount$VH = _u$_ext$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("nscount"));
            public static VarHandle nscount$VH() {
                return _ext.nscount$VH;
            }
            public static short nscount$get(MemorySegment seg) {
                return (short)_ext.nscount$VH.get(seg);
            }
            public static void nscount$set( MemorySegment seg, short x) {
                _ext.nscount$VH.set(seg, x);
            }
            public static short nscount$get(MemorySegment seg, long index) {
                return (short)_ext.nscount$VH.get(seg.asSlice(index*sizeof()));
            }
            public static void nscount$set(MemorySegment seg, long index, short x) {
                _ext.nscount$VH.set(seg.asSlice(index*sizeof()), x);
            }
            public static MemorySegment nsmap$slice(MemorySegment seg) {
                return seg.asSlice(2, 6);
            }
            public static MemorySegment nssocks$slice(MemorySegment seg) {
                return seg.asSlice(8, 12);
            }
            static final VarHandle nscount6$VH = _u$_ext$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("nscount6"));
            public static VarHandle nscount6$VH() {
                return _ext.nscount6$VH;
            }
            public static short nscount6$get(MemorySegment seg) {
                return (short)_ext.nscount6$VH.get(seg);
            }
            public static void nscount6$set( MemorySegment seg, short x) {
                _ext.nscount6$VH.set(seg, x);
            }
            public static short nscount6$get(MemorySegment seg, long index) {
                return (short)_ext.nscount6$VH.get(seg.asSlice(index*sizeof()));
            }
            public static void nscount6$set(MemorySegment seg, long index, short x) {
                _ext.nscount6$VH.set(seg.asSlice(index*sizeof()), x);
            }
            static final VarHandle nsinit$VH = _u$_ext$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("nsinit"));
            public static VarHandle nsinit$VH() {
                return _ext.nsinit$VH;
            }
            public static short nsinit$get(MemorySegment seg) {
                return (short)_ext.nsinit$VH.get(seg);
            }
            public static void nsinit$set( MemorySegment seg, short x) {
                _ext.nsinit$VH.set(seg, x);
            }
            public static short nsinit$get(MemorySegment seg, long index) {
                return (short)_ext.nsinit$VH.get(seg.asSlice(index*sizeof()));
            }
            public static void nsinit$set(MemorySegment seg, long index, short x) {
                _ext.nsinit$VH.set(seg.asSlice(index*sizeof()), x);
            }
            public static MemorySegment nsaddrs$slice(MemorySegment seg) {
                return seg.asSlice(24, 24);
            }
            public static MemorySegment __glibc_reserved$slice(MemorySegment seg) {
                return seg.asSlice(48, 8);
            }
            public static long sizeof() { return $LAYOUT().byteSize(); }
            public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
            public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
                return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
            }
            public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
        }

        public static MemorySegment _ext$slice(MemorySegment seg) {
            return seg.asSlice(0, 56);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
    }

    public static MemorySegment _u$slice(MemorySegment seg) {
        return seg.asSlice(512, 56);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


