// Generated by jextract

package io.github.jwharm.javagi.interop.jextract;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class hb_ot_name_entry_t {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_INT$LAYOUT.withName("name_id"),
        MemoryLayout.unionLayout(
            Constants$root.C_INT$LAYOUT.withName("u32"),
            Constants$root.C_INT$LAYOUT.withName("i32"),
            MemoryLayout.sequenceLayout(2, Constants$root.C_SHORT$LAYOUT).withName("u16"),
            MemoryLayout.sequenceLayout(2, Constants$root.C_SHORT$LAYOUT).withName("i16"),
            MemoryLayout.sequenceLayout(4, Constants$root.C_CHAR$LAYOUT).withName("u8"),
            MemoryLayout.sequenceLayout(4, Constants$root.C_CHAR$LAYOUT).withName("i8")
        ).withName("var"),
        Constants$root.C_POINTER$LAYOUT.withName("language")
    ).withName("hb_ot_name_entry_t");
    public static MemoryLayout $LAYOUT() {
        return hb_ot_name_entry_t.$struct$LAYOUT;
    }
    static final VarHandle name_id$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("name_id"));
    public static VarHandle name_id$VH() {
        return hb_ot_name_entry_t.name_id$VH;
    }
    public static int name_id$get(MemorySegment seg) {
        return (int)hb_ot_name_entry_t.name_id$VH.get(seg);
    }
    public static void name_id$set( MemorySegment seg, int x) {
        hb_ot_name_entry_t.name_id$VH.set(seg, x);
    }
    public static int name_id$get(MemorySegment seg, long index) {
        return (int)hb_ot_name_entry_t.name_id$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void name_id$set(MemorySegment seg, long index, int x) {
        hb_ot_name_entry_t.name_id$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment var_$slice(MemorySegment seg) {
        return seg.asSlice(4, 4);
    }
    static final VarHandle language$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("language"));
    public static VarHandle language$VH() {
        return hb_ot_name_entry_t.language$VH;
    }
    public static MemoryAddress language$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)hb_ot_name_entry_t.language$VH.get(seg);
    }
    public static void language$set( MemorySegment seg, MemoryAddress x) {
        hb_ot_name_entry_t.language$VH.set(seg, x);
    }
    public static MemoryAddress language$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)hb_ot_name_entry_t.language$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void language$set(MemorySegment seg, long index, MemoryAddress x) {
        hb_ot_name_entry_t.language$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


