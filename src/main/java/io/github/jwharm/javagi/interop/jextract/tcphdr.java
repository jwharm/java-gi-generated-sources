// Generated by jextract

package io.github.jwharm.javagi.interop.jextract;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class tcphdr {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_SHORT$LAYOUT.withName("th_sport"),
                Constants$root.C_SHORT$LAYOUT.withName("th_dport"),
                Constants$root.C_INT$LAYOUT.withName("th_seq"),
                Constants$root.C_INT$LAYOUT.withName("th_ack"),
                MemoryLayout.structLayout(
                    MemoryLayout.paddingLayout(4).withName("th_x2"),
                    MemoryLayout.paddingLayout(4).withName("th_off")
                ),
                Constants$root.C_CHAR$LAYOUT.withName("th_flags"),
                Constants$root.C_SHORT$LAYOUT.withName("th_win"),
                Constants$root.C_SHORT$LAYOUT.withName("th_sum"),
                Constants$root.C_SHORT$LAYOUT.withName("th_urp")
            ).withName("$anon$0"),
            MemoryLayout.structLayout(
                Constants$root.C_SHORT$LAYOUT.withName("source"),
                Constants$root.C_SHORT$LAYOUT.withName("dest"),
                Constants$root.C_INT$LAYOUT.withName("seq"),
                Constants$root.C_INT$LAYOUT.withName("ack_seq"),
                MemoryLayout.structLayout(
                    MemoryLayout.paddingLayout(4).withName("res1"),
                    MemoryLayout.paddingLayout(4).withName("doff"),
                    MemoryLayout.paddingLayout(1).withName("fin"),
                    MemoryLayout.paddingLayout(1).withName("syn"),
                    MemoryLayout.paddingLayout(1).withName("rst"),
                    MemoryLayout.paddingLayout(1).withName("psh"),
                    MemoryLayout.paddingLayout(1).withName("ack"),
                    MemoryLayout.paddingLayout(1).withName("urg"),
                    MemoryLayout.paddingLayout(2).withName("res2")
                ),
                Constants$root.C_SHORT$LAYOUT.withName("window"),
                Constants$root.C_SHORT$LAYOUT.withName("check"),
                Constants$root.C_SHORT$LAYOUT.withName("urg_ptr")
            ).withName("$anon$1")
        ).withName("$anon$0")
    ).withName("tcphdr");
    public static MemoryLayout $LAYOUT() {
        return tcphdr.$struct$LAYOUT;
    }
    static final VarHandle th_sport$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("$anon$0"), MemoryLayout.PathElement.groupElement("$anon$0"), MemoryLayout.PathElement.groupElement("th_sport"));
    public static VarHandle th_sport$VH() {
        return tcphdr.th_sport$VH;
    }
    public static short th_sport$get(MemorySegment seg) {
        return (short)tcphdr.th_sport$VH.get(seg);
    }
    public static void th_sport$set( MemorySegment seg, short x) {
        tcphdr.th_sport$VH.set(seg, x);
    }
    public static short th_sport$get(MemorySegment seg, long index) {
        return (short)tcphdr.th_sport$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void th_sport$set(MemorySegment seg, long index, short x) {
        tcphdr.th_sport$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle th_dport$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("$anon$0"), MemoryLayout.PathElement.groupElement("$anon$0"), MemoryLayout.PathElement.groupElement("th_dport"));
    public static VarHandle th_dport$VH() {
        return tcphdr.th_dport$VH;
    }
    public static short th_dport$get(MemorySegment seg) {
        return (short)tcphdr.th_dport$VH.get(seg);
    }
    public static void th_dport$set( MemorySegment seg, short x) {
        tcphdr.th_dport$VH.set(seg, x);
    }
    public static short th_dport$get(MemorySegment seg, long index) {
        return (short)tcphdr.th_dport$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void th_dport$set(MemorySegment seg, long index, short x) {
        tcphdr.th_dport$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle th_seq$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("$anon$0"), MemoryLayout.PathElement.groupElement("$anon$0"), MemoryLayout.PathElement.groupElement("th_seq"));
    public static VarHandle th_seq$VH() {
        return tcphdr.th_seq$VH;
    }
    public static int th_seq$get(MemorySegment seg) {
        return (int)tcphdr.th_seq$VH.get(seg);
    }
    public static void th_seq$set( MemorySegment seg, int x) {
        tcphdr.th_seq$VH.set(seg, x);
    }
    public static int th_seq$get(MemorySegment seg, long index) {
        return (int)tcphdr.th_seq$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void th_seq$set(MemorySegment seg, long index, int x) {
        tcphdr.th_seq$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle th_ack$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("$anon$0"), MemoryLayout.PathElement.groupElement("$anon$0"), MemoryLayout.PathElement.groupElement("th_ack"));
    public static VarHandle th_ack$VH() {
        return tcphdr.th_ack$VH;
    }
    public static int th_ack$get(MemorySegment seg) {
        return (int)tcphdr.th_ack$VH.get(seg);
    }
    public static void th_ack$set( MemorySegment seg, int x) {
        tcphdr.th_ack$VH.set(seg, x);
    }
    public static int th_ack$get(MemorySegment seg, long index) {
        return (int)tcphdr.th_ack$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void th_ack$set(MemorySegment seg, long index, int x) {
        tcphdr.th_ack$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle th_flags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("$anon$0"), MemoryLayout.PathElement.groupElement("$anon$0"), MemoryLayout.PathElement.groupElement("th_flags"));
    public static VarHandle th_flags$VH() {
        return tcphdr.th_flags$VH;
    }
    public static byte th_flags$get(MemorySegment seg) {
        return (byte)tcphdr.th_flags$VH.get(seg);
    }
    public static void th_flags$set( MemorySegment seg, byte x) {
        tcphdr.th_flags$VH.set(seg, x);
    }
    public static byte th_flags$get(MemorySegment seg, long index) {
        return (byte)tcphdr.th_flags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void th_flags$set(MemorySegment seg, long index, byte x) {
        tcphdr.th_flags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle th_win$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("$anon$0"), MemoryLayout.PathElement.groupElement("$anon$0"), MemoryLayout.PathElement.groupElement("th_win"));
    public static VarHandle th_win$VH() {
        return tcphdr.th_win$VH;
    }
    public static short th_win$get(MemorySegment seg) {
        return (short)tcphdr.th_win$VH.get(seg);
    }
    public static void th_win$set( MemorySegment seg, short x) {
        tcphdr.th_win$VH.set(seg, x);
    }
    public static short th_win$get(MemorySegment seg, long index) {
        return (short)tcphdr.th_win$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void th_win$set(MemorySegment seg, long index, short x) {
        tcphdr.th_win$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle th_sum$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("$anon$0"), MemoryLayout.PathElement.groupElement("$anon$0"), MemoryLayout.PathElement.groupElement("th_sum"));
    public static VarHandle th_sum$VH() {
        return tcphdr.th_sum$VH;
    }
    public static short th_sum$get(MemorySegment seg) {
        return (short)tcphdr.th_sum$VH.get(seg);
    }
    public static void th_sum$set( MemorySegment seg, short x) {
        tcphdr.th_sum$VH.set(seg, x);
    }
    public static short th_sum$get(MemorySegment seg, long index) {
        return (short)tcphdr.th_sum$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void th_sum$set(MemorySegment seg, long index, short x) {
        tcphdr.th_sum$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle th_urp$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("$anon$0"), MemoryLayout.PathElement.groupElement("$anon$0"), MemoryLayout.PathElement.groupElement("th_urp"));
    public static VarHandle th_urp$VH() {
        return tcphdr.th_urp$VH;
    }
    public static short th_urp$get(MemorySegment seg) {
        return (short)tcphdr.th_urp$VH.get(seg);
    }
    public static void th_urp$set( MemorySegment seg, short x) {
        tcphdr.th_urp$VH.set(seg, x);
    }
    public static short th_urp$get(MemorySegment seg, long index) {
        return (short)tcphdr.th_urp$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void th_urp$set(MemorySegment seg, long index, short x) {
        tcphdr.th_urp$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle source$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("$anon$0"), MemoryLayout.PathElement.groupElement("$anon$1"), MemoryLayout.PathElement.groupElement("source"));
    public static VarHandle source$VH() {
        return tcphdr.source$VH;
    }
    public static short source$get(MemorySegment seg) {
        return (short)tcphdr.source$VH.get(seg);
    }
    public static void source$set( MemorySegment seg, short x) {
        tcphdr.source$VH.set(seg, x);
    }
    public static short source$get(MemorySegment seg, long index) {
        return (short)tcphdr.source$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void source$set(MemorySegment seg, long index, short x) {
        tcphdr.source$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dest$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("$anon$0"), MemoryLayout.PathElement.groupElement("$anon$1"), MemoryLayout.PathElement.groupElement("dest"));
    public static VarHandle dest$VH() {
        return tcphdr.dest$VH;
    }
    public static short dest$get(MemorySegment seg) {
        return (short)tcphdr.dest$VH.get(seg);
    }
    public static void dest$set( MemorySegment seg, short x) {
        tcphdr.dest$VH.set(seg, x);
    }
    public static short dest$get(MemorySegment seg, long index) {
        return (short)tcphdr.dest$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dest$set(MemorySegment seg, long index, short x) {
        tcphdr.dest$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle seq$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("$anon$0"), MemoryLayout.PathElement.groupElement("$anon$1"), MemoryLayout.PathElement.groupElement("seq"));
    public static VarHandle seq$VH() {
        return tcphdr.seq$VH;
    }
    public static int seq$get(MemorySegment seg) {
        return (int)tcphdr.seq$VH.get(seg);
    }
    public static void seq$set( MemorySegment seg, int x) {
        tcphdr.seq$VH.set(seg, x);
    }
    public static int seq$get(MemorySegment seg, long index) {
        return (int)tcphdr.seq$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void seq$set(MemorySegment seg, long index, int x) {
        tcphdr.seq$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ack_seq$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("$anon$0"), MemoryLayout.PathElement.groupElement("$anon$1"), MemoryLayout.PathElement.groupElement("ack_seq"));
    public static VarHandle ack_seq$VH() {
        return tcphdr.ack_seq$VH;
    }
    public static int ack_seq$get(MemorySegment seg) {
        return (int)tcphdr.ack_seq$VH.get(seg);
    }
    public static void ack_seq$set( MemorySegment seg, int x) {
        tcphdr.ack_seq$VH.set(seg, x);
    }
    public static int ack_seq$get(MemorySegment seg, long index) {
        return (int)tcphdr.ack_seq$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ack_seq$set(MemorySegment seg, long index, int x) {
        tcphdr.ack_seq$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle window$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("$anon$0"), MemoryLayout.PathElement.groupElement("$anon$1"), MemoryLayout.PathElement.groupElement("window"));
    public static VarHandle window$VH() {
        return tcphdr.window$VH;
    }
    public static short window$get(MemorySegment seg) {
        return (short)tcphdr.window$VH.get(seg);
    }
    public static void window$set( MemorySegment seg, short x) {
        tcphdr.window$VH.set(seg, x);
    }
    public static short window$get(MemorySegment seg, long index) {
        return (short)tcphdr.window$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void window$set(MemorySegment seg, long index, short x) {
        tcphdr.window$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle check$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("$anon$0"), MemoryLayout.PathElement.groupElement("$anon$1"), MemoryLayout.PathElement.groupElement("check"));
    public static VarHandle check$VH() {
        return tcphdr.check$VH;
    }
    public static short check$get(MemorySegment seg) {
        return (short)tcphdr.check$VH.get(seg);
    }
    public static void check$set( MemorySegment seg, short x) {
        tcphdr.check$VH.set(seg, x);
    }
    public static short check$get(MemorySegment seg, long index) {
        return (short)tcphdr.check$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void check$set(MemorySegment seg, long index, short x) {
        tcphdr.check$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle urg_ptr$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("$anon$0"), MemoryLayout.PathElement.groupElement("$anon$1"), MemoryLayout.PathElement.groupElement("urg_ptr"));
    public static VarHandle urg_ptr$VH() {
        return tcphdr.urg_ptr$VH;
    }
    public static short urg_ptr$get(MemorySegment seg) {
        return (short)tcphdr.urg_ptr$VH.get(seg);
    }
    public static void urg_ptr$set( MemorySegment seg, short x) {
        tcphdr.urg_ptr$VH.set(seg, x);
    }
    public static short urg_ptr$get(MemorySegment seg, long index) {
        return (short)tcphdr.urg_ptr$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void urg_ptr$set(MemorySegment seg, long index, short x) {
        tcphdr.urg_ptr$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


