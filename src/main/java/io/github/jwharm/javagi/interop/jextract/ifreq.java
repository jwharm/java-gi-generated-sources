// Generated by jextract

package io.github.jwharm.javagi.interop.jextract;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class ifreq {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.unionLayout(
            MemoryLayout.sequenceLayout(16, Constants$root.C_CHAR$LAYOUT).withName("ifrn_name")
        ).withName("ifr_ifrn"),
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_SHORT$LAYOUT.withName("sa_family"),
                MemoryLayout.sequenceLayout(14, Constants$root.C_CHAR$LAYOUT).withName("sa_data")
            ).withName("ifru_addr"),
            MemoryLayout.structLayout(
                Constants$root.C_SHORT$LAYOUT.withName("sa_family"),
                MemoryLayout.sequenceLayout(14, Constants$root.C_CHAR$LAYOUT).withName("sa_data")
            ).withName("ifru_dstaddr"),
            MemoryLayout.structLayout(
                Constants$root.C_SHORT$LAYOUT.withName("sa_family"),
                MemoryLayout.sequenceLayout(14, Constants$root.C_CHAR$LAYOUT).withName("sa_data")
            ).withName("ifru_broadaddr"),
            MemoryLayout.structLayout(
                Constants$root.C_SHORT$LAYOUT.withName("sa_family"),
                MemoryLayout.sequenceLayout(14, Constants$root.C_CHAR$LAYOUT).withName("sa_data")
            ).withName("ifru_netmask"),
            MemoryLayout.structLayout(
                Constants$root.C_SHORT$LAYOUT.withName("sa_family"),
                MemoryLayout.sequenceLayout(14, Constants$root.C_CHAR$LAYOUT).withName("sa_data")
            ).withName("ifru_hwaddr"),
            Constants$root.C_SHORT$LAYOUT.withName("ifru_flags"),
            Constants$root.C_INT$LAYOUT.withName("ifru_ivalue"),
            Constants$root.C_INT$LAYOUT.withName("ifru_mtu"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG_LONG$LAYOUT.withName("mem_start"),
                Constants$root.C_LONG_LONG$LAYOUT.withName("mem_end"),
                Constants$root.C_SHORT$LAYOUT.withName("base_addr"),
                Constants$root.C_CHAR$LAYOUT.withName("irq"),
                Constants$root.C_CHAR$LAYOUT.withName("dma"),
                Constants$root.C_CHAR$LAYOUT.withName("port"),
                MemoryLayout.paddingLayout(24)
            ).withName("ifru_map"),
            MemoryLayout.sequenceLayout(16, Constants$root.C_CHAR$LAYOUT).withName("ifru_slave"),
            MemoryLayout.sequenceLayout(16, Constants$root.C_CHAR$LAYOUT).withName("ifru_newname"),
            Constants$root.C_POINTER$LAYOUT.withName("ifru_data")
        ).withName("ifr_ifru")
    ).withName("ifreq");
    public static MemoryLayout $LAYOUT() {
        return ifreq.$struct$LAYOUT;
    }
    public static class ifr_ifrn {

        static final  GroupLayout ifr_ifrn$union$LAYOUT = MemoryLayout.unionLayout(
            MemoryLayout.sequenceLayout(16, Constants$root.C_CHAR$LAYOUT).withName("ifrn_name")
        );
        public static MemoryLayout $LAYOUT() {
            return ifr_ifrn.ifr_ifrn$union$LAYOUT;
        }
        public static MemorySegment ifrn_name$slice(MemorySegment seg) {
            return seg.asSlice(0, 16);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
    }

    public static MemorySegment ifr_ifrn$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    public static class ifr_ifru {

        static final  GroupLayout ifr_ifru$union$LAYOUT = MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_SHORT$LAYOUT.withName("sa_family"),
                MemoryLayout.sequenceLayout(14, Constants$root.C_CHAR$LAYOUT).withName("sa_data")
            ).withName("ifru_addr"),
            MemoryLayout.structLayout(
                Constants$root.C_SHORT$LAYOUT.withName("sa_family"),
                MemoryLayout.sequenceLayout(14, Constants$root.C_CHAR$LAYOUT).withName("sa_data")
            ).withName("ifru_dstaddr"),
            MemoryLayout.structLayout(
                Constants$root.C_SHORT$LAYOUT.withName("sa_family"),
                MemoryLayout.sequenceLayout(14, Constants$root.C_CHAR$LAYOUT).withName("sa_data")
            ).withName("ifru_broadaddr"),
            MemoryLayout.structLayout(
                Constants$root.C_SHORT$LAYOUT.withName("sa_family"),
                MemoryLayout.sequenceLayout(14, Constants$root.C_CHAR$LAYOUT).withName("sa_data")
            ).withName("ifru_netmask"),
            MemoryLayout.structLayout(
                Constants$root.C_SHORT$LAYOUT.withName("sa_family"),
                MemoryLayout.sequenceLayout(14, Constants$root.C_CHAR$LAYOUT).withName("sa_data")
            ).withName("ifru_hwaddr"),
            Constants$root.C_SHORT$LAYOUT.withName("ifru_flags"),
            Constants$root.C_INT$LAYOUT.withName("ifru_ivalue"),
            Constants$root.C_INT$LAYOUT.withName("ifru_mtu"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG_LONG$LAYOUT.withName("mem_start"),
                Constants$root.C_LONG_LONG$LAYOUT.withName("mem_end"),
                Constants$root.C_SHORT$LAYOUT.withName("base_addr"),
                Constants$root.C_CHAR$LAYOUT.withName("irq"),
                Constants$root.C_CHAR$LAYOUT.withName("dma"),
                Constants$root.C_CHAR$LAYOUT.withName("port"),
                MemoryLayout.paddingLayout(24)
            ).withName("ifru_map"),
            MemoryLayout.sequenceLayout(16, Constants$root.C_CHAR$LAYOUT).withName("ifru_slave"),
            MemoryLayout.sequenceLayout(16, Constants$root.C_CHAR$LAYOUT).withName("ifru_newname"),
            Constants$root.C_POINTER$LAYOUT.withName("ifru_data")
        );
        public static MemoryLayout $LAYOUT() {
            return ifr_ifru.ifr_ifru$union$LAYOUT;
        }
        public static MemorySegment ifru_addr$slice(MemorySegment seg) {
            return seg.asSlice(0, 16);
        }
        public static MemorySegment ifru_dstaddr$slice(MemorySegment seg) {
            return seg.asSlice(0, 16);
        }
        public static MemorySegment ifru_broadaddr$slice(MemorySegment seg) {
            return seg.asSlice(0, 16);
        }
        public static MemorySegment ifru_netmask$slice(MemorySegment seg) {
            return seg.asSlice(0, 16);
        }
        public static MemorySegment ifru_hwaddr$slice(MemorySegment seg) {
            return seg.asSlice(0, 16);
        }
        static final VarHandle ifru_flags$VH = ifr_ifru$union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ifru_flags"));
        public static VarHandle ifru_flags$VH() {
            return ifr_ifru.ifru_flags$VH;
        }
        public static short ifru_flags$get(MemorySegment seg) {
            return (short)ifr_ifru.ifru_flags$VH.get(seg);
        }
        public static void ifru_flags$set( MemorySegment seg, short x) {
            ifr_ifru.ifru_flags$VH.set(seg, x);
        }
        public static short ifru_flags$get(MemorySegment seg, long index) {
            return (short)ifr_ifru.ifru_flags$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void ifru_flags$set(MemorySegment seg, long index, short x) {
            ifr_ifru.ifru_flags$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle ifru_ivalue$VH = ifr_ifru$union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ifru_ivalue"));
        public static VarHandle ifru_ivalue$VH() {
            return ifr_ifru.ifru_ivalue$VH;
        }
        public static int ifru_ivalue$get(MemorySegment seg) {
            return (int)ifr_ifru.ifru_ivalue$VH.get(seg);
        }
        public static void ifru_ivalue$set( MemorySegment seg, int x) {
            ifr_ifru.ifru_ivalue$VH.set(seg, x);
        }
        public static int ifru_ivalue$get(MemorySegment seg, long index) {
            return (int)ifr_ifru.ifru_ivalue$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void ifru_ivalue$set(MemorySegment seg, long index, int x) {
            ifr_ifru.ifru_ivalue$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle ifru_mtu$VH = ifr_ifru$union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ifru_mtu"));
        public static VarHandle ifru_mtu$VH() {
            return ifr_ifru.ifru_mtu$VH;
        }
        public static int ifru_mtu$get(MemorySegment seg) {
            return (int)ifr_ifru.ifru_mtu$VH.get(seg);
        }
        public static void ifru_mtu$set( MemorySegment seg, int x) {
            ifr_ifru.ifru_mtu$VH.set(seg, x);
        }
        public static int ifru_mtu$get(MemorySegment seg, long index) {
            return (int)ifr_ifru.ifru_mtu$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void ifru_mtu$set(MemorySegment seg, long index, int x) {
            ifr_ifru.ifru_mtu$VH.set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment ifru_map$slice(MemorySegment seg) {
            return seg.asSlice(0, 24);
        }
        public static MemorySegment ifru_slave$slice(MemorySegment seg) {
            return seg.asSlice(0, 16);
        }
        public static MemorySegment ifru_newname$slice(MemorySegment seg) {
            return seg.asSlice(0, 16);
        }
        static final VarHandle ifru_data$VH = ifr_ifru$union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ifru_data"));
        public static VarHandle ifru_data$VH() {
            return ifr_ifru.ifru_data$VH;
        }
        public static MemoryAddress ifru_data$get(MemorySegment seg) {
            return (java.lang.foreign.MemoryAddress)ifr_ifru.ifru_data$VH.get(seg);
        }
        public static void ifru_data$set( MemorySegment seg, MemoryAddress x) {
            ifr_ifru.ifru_data$VH.set(seg, x);
        }
        public static MemoryAddress ifru_data$get(MemorySegment seg, long index) {
            return (java.lang.foreign.MemoryAddress)ifr_ifru.ifru_data$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void ifru_data$set(MemorySegment seg, long index, MemoryAddress x) {
            ifr_ifru.ifru_data$VH.set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
    }

    public static MemorySegment ifr_ifru$slice(MemorySegment seg) {
        return seg.asSlice(16, 24);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


