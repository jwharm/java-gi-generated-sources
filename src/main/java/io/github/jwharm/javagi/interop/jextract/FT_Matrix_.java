// Generated by jextract

package io.github.jwharm.javagi.interop.jextract;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class FT_Matrix_ {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG_LONG$LAYOUT.withName("xx"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("xy"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("yx"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("yy")
    ).withName("FT_Matrix_");
    public static MemoryLayout $LAYOUT() {
        return FT_Matrix_.$struct$LAYOUT;
    }
    static final VarHandle xx$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("xx"));
    public static VarHandle xx$VH() {
        return FT_Matrix_.xx$VH;
    }
    public static long xx$get(MemorySegment seg) {
        return (long)FT_Matrix_.xx$VH.get(seg);
    }
    public static void xx$set( MemorySegment seg, long x) {
        FT_Matrix_.xx$VH.set(seg, x);
    }
    public static long xx$get(MemorySegment seg, long index) {
        return (long)FT_Matrix_.xx$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void xx$set(MemorySegment seg, long index, long x) {
        FT_Matrix_.xx$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle xy$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("xy"));
    public static VarHandle xy$VH() {
        return FT_Matrix_.xy$VH;
    }
    public static long xy$get(MemorySegment seg) {
        return (long)FT_Matrix_.xy$VH.get(seg);
    }
    public static void xy$set( MemorySegment seg, long x) {
        FT_Matrix_.xy$VH.set(seg, x);
    }
    public static long xy$get(MemorySegment seg, long index) {
        return (long)FT_Matrix_.xy$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void xy$set(MemorySegment seg, long index, long x) {
        FT_Matrix_.xy$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle yx$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("yx"));
    public static VarHandle yx$VH() {
        return FT_Matrix_.yx$VH;
    }
    public static long yx$get(MemorySegment seg) {
        return (long)FT_Matrix_.yx$VH.get(seg);
    }
    public static void yx$set( MemorySegment seg, long x) {
        FT_Matrix_.yx$VH.set(seg, x);
    }
    public static long yx$get(MemorySegment seg, long index) {
        return (long)FT_Matrix_.yx$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void yx$set(MemorySegment seg, long index, long x) {
        FT_Matrix_.yx$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle yy$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("yy"));
    public static VarHandle yy$VH() {
        return FT_Matrix_.yy$VH;
    }
    public static long yy$get(MemorySegment seg) {
        return (long)FT_Matrix_.yy$VH.get(seg);
    }
    public static void yy$set( MemorySegment seg, long x) {
        FT_Matrix_.yy$VH.set(seg, x);
    }
    public static long yy$get(MemorySegment seg, long index) {
        return (long)FT_Matrix_.yy$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void yy$set(MemorySegment seg, long index, long x) {
        FT_Matrix_.yy$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


