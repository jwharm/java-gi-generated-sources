// Generated by jextract

package io.github.jwharm.javagi.interop.jextract;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _GtkCellRendererTextClass {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            MemoryLayout.structLayout(
                MemoryLayout.structLayout(
                    Constants$root.C_LONG_LONG$LAYOUT.withName("g_type")
                ).withName("g_type_class"),
                Constants$root.C_POINTER$LAYOUT.withName("construct_properties"),
                Constants$root.C_POINTER$LAYOUT.withName("constructor"),
                Constants$root.C_POINTER$LAYOUT.withName("set_property"),
                Constants$root.C_POINTER$LAYOUT.withName("get_property"),
                Constants$root.C_POINTER$LAYOUT.withName("dispose"),
                Constants$root.C_POINTER$LAYOUT.withName("finalize"),
                Constants$root.C_POINTER$LAYOUT.withName("dispatch_properties_changed"),
                Constants$root.C_POINTER$LAYOUT.withName("notify"),
                Constants$root.C_POINTER$LAYOUT.withName("constructed"),
                Constants$root.C_LONG_LONG$LAYOUT.withName("flags"),
                MemoryLayout.sequenceLayout(6, Constants$root.C_POINTER$LAYOUT).withName("pdummy")
            ).withName("parent_class"),
            Constants$root.C_POINTER$LAYOUT.withName("get_request_mode"),
            Constants$root.C_POINTER$LAYOUT.withName("get_preferred_width"),
            Constants$root.C_POINTER$LAYOUT.withName("get_preferred_height_for_width"),
            Constants$root.C_POINTER$LAYOUT.withName("get_preferred_height"),
            Constants$root.C_POINTER$LAYOUT.withName("get_preferred_width_for_height"),
            Constants$root.C_POINTER$LAYOUT.withName("get_aligned_area"),
            Constants$root.C_POINTER$LAYOUT.withName("snapshot"),
            Constants$root.C_POINTER$LAYOUT.withName("activate"),
            Constants$root.C_POINTER$LAYOUT.withName("start_editing"),
            Constants$root.C_POINTER$LAYOUT.withName("editing_canceled"),
            Constants$root.C_POINTER$LAYOUT.withName("editing_started"),
            MemoryLayout.sequenceLayout(8, Constants$root.C_POINTER$LAYOUT).withName("padding")
        ).withName("parent_class"),
        Constants$root.C_POINTER$LAYOUT.withName("edited"),
        MemoryLayout.sequenceLayout(8, Constants$root.C_POINTER$LAYOUT).withName("padding")
    ).withName("_GtkCellRendererTextClass");
    public static MemoryLayout $LAYOUT() {
        return _GtkCellRendererTextClass.$struct$LAYOUT;
    }
    public static MemorySegment parent_class$slice(MemorySegment seg) {
        return seg.asSlice(0, 288);
    }
    static final FunctionDescriptor edited$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle edited$MH = RuntimeHelper.downcallHandle(
        _GtkCellRendererTextClass.edited$FUNC
    );
    public interface edited {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(edited fi, MemorySession session) {
            return RuntimeHelper.upcallStub(edited.class, fi, _GtkCellRendererTextClass.edited$FUNC, session);
        }
        static edited ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    _GtkCellRendererTextClass.edited$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle edited$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("edited"));
    public static VarHandle edited$VH() {
        return _GtkCellRendererTextClass.edited$VH;
    }
    public static MemoryAddress edited$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkCellRendererTextClass.edited$VH.get(seg);
    }
    public static void edited$set( MemorySegment seg, MemoryAddress x) {
        _GtkCellRendererTextClass.edited$VH.set(seg, x);
    }
    public static MemoryAddress edited$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkCellRendererTextClass.edited$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void edited$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkCellRendererTextClass.edited$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static edited edited (MemorySegment segment, MemorySession session) {
        return edited.ofAddress(edited$get(segment), session);
    }
    public static MemorySegment padding$slice(MemorySegment seg) {
        return seg.asSlice(296, 64);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


