// Generated by jextract

package io.github.jwharm.javagi.interop.jextract;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class FT_Span_ {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_SHORT$LAYOUT.withName("x"),
        Constants$root.C_SHORT$LAYOUT.withName("len"),
        Constants$root.C_CHAR$LAYOUT.withName("coverage"),
        MemoryLayout.paddingLayout(8)
    ).withName("FT_Span_");
    public static MemoryLayout $LAYOUT() {
        return FT_Span_.$struct$LAYOUT;
    }
    static final VarHandle x$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("x"));
    public static VarHandle x$VH() {
        return FT_Span_.x$VH;
    }
    public static short x$get(MemorySegment seg) {
        return (short)FT_Span_.x$VH.get(seg);
    }
    public static void x$set( MemorySegment seg, short x) {
        FT_Span_.x$VH.set(seg, x);
    }
    public static short x$get(MemorySegment seg, long index) {
        return (short)FT_Span_.x$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void x$set(MemorySegment seg, long index, short x) {
        FT_Span_.x$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle len$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("len"));
    public static VarHandle len$VH() {
        return FT_Span_.len$VH;
    }
    public static short len$get(MemorySegment seg) {
        return (short)FT_Span_.len$VH.get(seg);
    }
    public static void len$set( MemorySegment seg, short x) {
        FT_Span_.len$VH.set(seg, x);
    }
    public static short len$get(MemorySegment seg, long index) {
        return (short)FT_Span_.len$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void len$set(MemorySegment seg, long index, short x) {
        FT_Span_.len$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle coverage$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("coverage"));
    public static VarHandle coverage$VH() {
        return FT_Span_.coverage$VH;
    }
    public static byte coverage$get(MemorySegment seg) {
        return (byte)FT_Span_.coverage$VH.get(seg);
    }
    public static void coverage$set( MemorySegment seg, byte x) {
        FT_Span_.coverage$VH.set(seg, x);
    }
    public static byte coverage$get(MemorySegment seg, long index) {
        return (byte)FT_Span_.coverage$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void coverage$set(MemorySegment seg, long index, byte x) {
        FT_Span_.coverage$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


