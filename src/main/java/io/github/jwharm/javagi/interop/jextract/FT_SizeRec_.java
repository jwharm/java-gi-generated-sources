// Generated by jextract

package io.github.jwharm.javagi.interop.jextract;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class FT_SizeRec_ {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("face"),
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("data"),
            Constants$root.C_POINTER$LAYOUT.withName("finalizer")
        ).withName("generic"),
        MemoryLayout.structLayout(
            Constants$root.C_SHORT$LAYOUT.withName("x_ppem"),
            Constants$root.C_SHORT$LAYOUT.withName("y_ppem"),
            MemoryLayout.paddingLayout(32),
            Constants$root.C_LONG_LONG$LAYOUT.withName("x_scale"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("y_scale"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("ascender"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("descender"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("height"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("max_advance")
        ).withName("metrics"),
        Constants$root.C_POINTER$LAYOUT.withName("internal")
    ).withName("FT_SizeRec_");
    public static MemoryLayout $LAYOUT() {
        return FT_SizeRec_.$struct$LAYOUT;
    }
    static final VarHandle face$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("face"));
    public static VarHandle face$VH() {
        return FT_SizeRec_.face$VH;
    }
    public static MemoryAddress face$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)FT_SizeRec_.face$VH.get(seg);
    }
    public static void face$set( MemorySegment seg, MemoryAddress x) {
        FT_SizeRec_.face$VH.set(seg, x);
    }
    public static MemoryAddress face$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)FT_SizeRec_.face$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void face$set(MemorySegment seg, long index, MemoryAddress x) {
        FT_SizeRec_.face$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment generic$slice(MemorySegment seg) {
        return seg.asSlice(8, 16);
    }
    public static MemorySegment metrics$slice(MemorySegment seg) {
        return seg.asSlice(24, 56);
    }
    static final VarHandle internal$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("internal"));
    public static VarHandle internal$VH() {
        return FT_SizeRec_.internal$VH;
    }
    public static MemoryAddress internal$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)FT_SizeRec_.internal$VH.get(seg);
    }
    public static void internal$set( MemorySegment seg, MemoryAddress x) {
        FT_SizeRec_.internal$VH.set(seg, x);
    }
    public static MemoryAddress internal$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)FT_SizeRec_.internal$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void internal$set(MemorySegment seg, long index, MemoryAddress x) {
        FT_SizeRec_.internal$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


