// Generated by jextract

package io.github.jwharm.javagi.interop.jextract;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class tcp_info {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_CHAR$LAYOUT.withName("tcpi_state"),
        Constants$root.C_CHAR$LAYOUT.withName("tcpi_ca_state"),
        Constants$root.C_CHAR$LAYOUT.withName("tcpi_retransmits"),
        Constants$root.C_CHAR$LAYOUT.withName("tcpi_probes"),
        Constants$root.C_CHAR$LAYOUT.withName("tcpi_backoff"),
        Constants$root.C_CHAR$LAYOUT.withName("tcpi_options"),
        MemoryLayout.structLayout(
            MemoryLayout.paddingLayout(4).withName("tcpi_snd_wscale"),
            MemoryLayout.paddingLayout(4).withName("tcpi_rcv_wscale"),
            MemoryLayout.paddingLayout(8)
        ),
        Constants$root.C_INT$LAYOUT.withName("tcpi_rto"),
        Constants$root.C_INT$LAYOUT.withName("tcpi_ato"),
        Constants$root.C_INT$LAYOUT.withName("tcpi_snd_mss"),
        Constants$root.C_INT$LAYOUT.withName("tcpi_rcv_mss"),
        Constants$root.C_INT$LAYOUT.withName("tcpi_unacked"),
        Constants$root.C_INT$LAYOUT.withName("tcpi_sacked"),
        Constants$root.C_INT$LAYOUT.withName("tcpi_lost"),
        Constants$root.C_INT$LAYOUT.withName("tcpi_retrans"),
        Constants$root.C_INT$LAYOUT.withName("tcpi_fackets"),
        Constants$root.C_INT$LAYOUT.withName("tcpi_last_data_sent"),
        Constants$root.C_INT$LAYOUT.withName("tcpi_last_ack_sent"),
        Constants$root.C_INT$LAYOUT.withName("tcpi_last_data_recv"),
        Constants$root.C_INT$LAYOUT.withName("tcpi_last_ack_recv"),
        Constants$root.C_INT$LAYOUT.withName("tcpi_pmtu"),
        Constants$root.C_INT$LAYOUT.withName("tcpi_rcv_ssthresh"),
        Constants$root.C_INT$LAYOUT.withName("tcpi_rtt"),
        Constants$root.C_INT$LAYOUT.withName("tcpi_rttvar"),
        Constants$root.C_INT$LAYOUT.withName("tcpi_snd_ssthresh"),
        Constants$root.C_INT$LAYOUT.withName("tcpi_snd_cwnd"),
        Constants$root.C_INT$LAYOUT.withName("tcpi_advmss"),
        Constants$root.C_INT$LAYOUT.withName("tcpi_reordering"),
        Constants$root.C_INT$LAYOUT.withName("tcpi_rcv_rtt"),
        Constants$root.C_INT$LAYOUT.withName("tcpi_rcv_space"),
        Constants$root.C_INT$LAYOUT.withName("tcpi_total_retrans")
    ).withName("tcp_info");
    public static MemoryLayout $LAYOUT() {
        return tcp_info.$struct$LAYOUT;
    }
    static final VarHandle tcpi_state$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("tcpi_state"));
    public static VarHandle tcpi_state$VH() {
        return tcp_info.tcpi_state$VH;
    }
    public static byte tcpi_state$get(MemorySegment seg) {
        return (byte)tcp_info.tcpi_state$VH.get(seg);
    }
    public static void tcpi_state$set( MemorySegment seg, byte x) {
        tcp_info.tcpi_state$VH.set(seg, x);
    }
    public static byte tcpi_state$get(MemorySegment seg, long index) {
        return (byte)tcp_info.tcpi_state$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void tcpi_state$set(MemorySegment seg, long index, byte x) {
        tcp_info.tcpi_state$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle tcpi_ca_state$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("tcpi_ca_state"));
    public static VarHandle tcpi_ca_state$VH() {
        return tcp_info.tcpi_ca_state$VH;
    }
    public static byte tcpi_ca_state$get(MemorySegment seg) {
        return (byte)tcp_info.tcpi_ca_state$VH.get(seg);
    }
    public static void tcpi_ca_state$set( MemorySegment seg, byte x) {
        tcp_info.tcpi_ca_state$VH.set(seg, x);
    }
    public static byte tcpi_ca_state$get(MemorySegment seg, long index) {
        return (byte)tcp_info.tcpi_ca_state$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void tcpi_ca_state$set(MemorySegment seg, long index, byte x) {
        tcp_info.tcpi_ca_state$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle tcpi_retransmits$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("tcpi_retransmits"));
    public static VarHandle tcpi_retransmits$VH() {
        return tcp_info.tcpi_retransmits$VH;
    }
    public static byte tcpi_retransmits$get(MemorySegment seg) {
        return (byte)tcp_info.tcpi_retransmits$VH.get(seg);
    }
    public static void tcpi_retransmits$set( MemorySegment seg, byte x) {
        tcp_info.tcpi_retransmits$VH.set(seg, x);
    }
    public static byte tcpi_retransmits$get(MemorySegment seg, long index) {
        return (byte)tcp_info.tcpi_retransmits$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void tcpi_retransmits$set(MemorySegment seg, long index, byte x) {
        tcp_info.tcpi_retransmits$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle tcpi_probes$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("tcpi_probes"));
    public static VarHandle tcpi_probes$VH() {
        return tcp_info.tcpi_probes$VH;
    }
    public static byte tcpi_probes$get(MemorySegment seg) {
        return (byte)tcp_info.tcpi_probes$VH.get(seg);
    }
    public static void tcpi_probes$set( MemorySegment seg, byte x) {
        tcp_info.tcpi_probes$VH.set(seg, x);
    }
    public static byte tcpi_probes$get(MemorySegment seg, long index) {
        return (byte)tcp_info.tcpi_probes$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void tcpi_probes$set(MemorySegment seg, long index, byte x) {
        tcp_info.tcpi_probes$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle tcpi_backoff$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("tcpi_backoff"));
    public static VarHandle tcpi_backoff$VH() {
        return tcp_info.tcpi_backoff$VH;
    }
    public static byte tcpi_backoff$get(MemorySegment seg) {
        return (byte)tcp_info.tcpi_backoff$VH.get(seg);
    }
    public static void tcpi_backoff$set( MemorySegment seg, byte x) {
        tcp_info.tcpi_backoff$VH.set(seg, x);
    }
    public static byte tcpi_backoff$get(MemorySegment seg, long index) {
        return (byte)tcp_info.tcpi_backoff$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void tcpi_backoff$set(MemorySegment seg, long index, byte x) {
        tcp_info.tcpi_backoff$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle tcpi_options$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("tcpi_options"));
    public static VarHandle tcpi_options$VH() {
        return tcp_info.tcpi_options$VH;
    }
    public static byte tcpi_options$get(MemorySegment seg) {
        return (byte)tcp_info.tcpi_options$VH.get(seg);
    }
    public static void tcpi_options$set( MemorySegment seg, byte x) {
        tcp_info.tcpi_options$VH.set(seg, x);
    }
    public static byte tcpi_options$get(MemorySegment seg, long index) {
        return (byte)tcp_info.tcpi_options$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void tcpi_options$set(MemorySegment seg, long index, byte x) {
        tcp_info.tcpi_options$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle tcpi_rto$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("tcpi_rto"));
    public static VarHandle tcpi_rto$VH() {
        return tcp_info.tcpi_rto$VH;
    }
    public static int tcpi_rto$get(MemorySegment seg) {
        return (int)tcp_info.tcpi_rto$VH.get(seg);
    }
    public static void tcpi_rto$set( MemorySegment seg, int x) {
        tcp_info.tcpi_rto$VH.set(seg, x);
    }
    public static int tcpi_rto$get(MemorySegment seg, long index) {
        return (int)tcp_info.tcpi_rto$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void tcpi_rto$set(MemorySegment seg, long index, int x) {
        tcp_info.tcpi_rto$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle tcpi_ato$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("tcpi_ato"));
    public static VarHandle tcpi_ato$VH() {
        return tcp_info.tcpi_ato$VH;
    }
    public static int tcpi_ato$get(MemorySegment seg) {
        return (int)tcp_info.tcpi_ato$VH.get(seg);
    }
    public static void tcpi_ato$set( MemorySegment seg, int x) {
        tcp_info.tcpi_ato$VH.set(seg, x);
    }
    public static int tcpi_ato$get(MemorySegment seg, long index) {
        return (int)tcp_info.tcpi_ato$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void tcpi_ato$set(MemorySegment seg, long index, int x) {
        tcp_info.tcpi_ato$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle tcpi_snd_mss$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("tcpi_snd_mss"));
    public static VarHandle tcpi_snd_mss$VH() {
        return tcp_info.tcpi_snd_mss$VH;
    }
    public static int tcpi_snd_mss$get(MemorySegment seg) {
        return (int)tcp_info.tcpi_snd_mss$VH.get(seg);
    }
    public static void tcpi_snd_mss$set( MemorySegment seg, int x) {
        tcp_info.tcpi_snd_mss$VH.set(seg, x);
    }
    public static int tcpi_snd_mss$get(MemorySegment seg, long index) {
        return (int)tcp_info.tcpi_snd_mss$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void tcpi_snd_mss$set(MemorySegment seg, long index, int x) {
        tcp_info.tcpi_snd_mss$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle tcpi_rcv_mss$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("tcpi_rcv_mss"));
    public static VarHandle tcpi_rcv_mss$VH() {
        return tcp_info.tcpi_rcv_mss$VH;
    }
    public static int tcpi_rcv_mss$get(MemorySegment seg) {
        return (int)tcp_info.tcpi_rcv_mss$VH.get(seg);
    }
    public static void tcpi_rcv_mss$set( MemorySegment seg, int x) {
        tcp_info.tcpi_rcv_mss$VH.set(seg, x);
    }
    public static int tcpi_rcv_mss$get(MemorySegment seg, long index) {
        return (int)tcp_info.tcpi_rcv_mss$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void tcpi_rcv_mss$set(MemorySegment seg, long index, int x) {
        tcp_info.tcpi_rcv_mss$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle tcpi_unacked$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("tcpi_unacked"));
    public static VarHandle tcpi_unacked$VH() {
        return tcp_info.tcpi_unacked$VH;
    }
    public static int tcpi_unacked$get(MemorySegment seg) {
        return (int)tcp_info.tcpi_unacked$VH.get(seg);
    }
    public static void tcpi_unacked$set( MemorySegment seg, int x) {
        tcp_info.tcpi_unacked$VH.set(seg, x);
    }
    public static int tcpi_unacked$get(MemorySegment seg, long index) {
        return (int)tcp_info.tcpi_unacked$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void tcpi_unacked$set(MemorySegment seg, long index, int x) {
        tcp_info.tcpi_unacked$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle tcpi_sacked$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("tcpi_sacked"));
    public static VarHandle tcpi_sacked$VH() {
        return tcp_info.tcpi_sacked$VH;
    }
    public static int tcpi_sacked$get(MemorySegment seg) {
        return (int)tcp_info.tcpi_sacked$VH.get(seg);
    }
    public static void tcpi_sacked$set( MemorySegment seg, int x) {
        tcp_info.tcpi_sacked$VH.set(seg, x);
    }
    public static int tcpi_sacked$get(MemorySegment seg, long index) {
        return (int)tcp_info.tcpi_sacked$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void tcpi_sacked$set(MemorySegment seg, long index, int x) {
        tcp_info.tcpi_sacked$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle tcpi_lost$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("tcpi_lost"));
    public static VarHandle tcpi_lost$VH() {
        return tcp_info.tcpi_lost$VH;
    }
    public static int tcpi_lost$get(MemorySegment seg) {
        return (int)tcp_info.tcpi_lost$VH.get(seg);
    }
    public static void tcpi_lost$set( MemorySegment seg, int x) {
        tcp_info.tcpi_lost$VH.set(seg, x);
    }
    public static int tcpi_lost$get(MemorySegment seg, long index) {
        return (int)tcp_info.tcpi_lost$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void tcpi_lost$set(MemorySegment seg, long index, int x) {
        tcp_info.tcpi_lost$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle tcpi_retrans$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("tcpi_retrans"));
    public static VarHandle tcpi_retrans$VH() {
        return tcp_info.tcpi_retrans$VH;
    }
    public static int tcpi_retrans$get(MemorySegment seg) {
        return (int)tcp_info.tcpi_retrans$VH.get(seg);
    }
    public static void tcpi_retrans$set( MemorySegment seg, int x) {
        tcp_info.tcpi_retrans$VH.set(seg, x);
    }
    public static int tcpi_retrans$get(MemorySegment seg, long index) {
        return (int)tcp_info.tcpi_retrans$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void tcpi_retrans$set(MemorySegment seg, long index, int x) {
        tcp_info.tcpi_retrans$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle tcpi_fackets$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("tcpi_fackets"));
    public static VarHandle tcpi_fackets$VH() {
        return tcp_info.tcpi_fackets$VH;
    }
    public static int tcpi_fackets$get(MemorySegment seg) {
        return (int)tcp_info.tcpi_fackets$VH.get(seg);
    }
    public static void tcpi_fackets$set( MemorySegment seg, int x) {
        tcp_info.tcpi_fackets$VH.set(seg, x);
    }
    public static int tcpi_fackets$get(MemorySegment seg, long index) {
        return (int)tcp_info.tcpi_fackets$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void tcpi_fackets$set(MemorySegment seg, long index, int x) {
        tcp_info.tcpi_fackets$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle tcpi_last_data_sent$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("tcpi_last_data_sent"));
    public static VarHandle tcpi_last_data_sent$VH() {
        return tcp_info.tcpi_last_data_sent$VH;
    }
    public static int tcpi_last_data_sent$get(MemorySegment seg) {
        return (int)tcp_info.tcpi_last_data_sent$VH.get(seg);
    }
    public static void tcpi_last_data_sent$set( MemorySegment seg, int x) {
        tcp_info.tcpi_last_data_sent$VH.set(seg, x);
    }
    public static int tcpi_last_data_sent$get(MemorySegment seg, long index) {
        return (int)tcp_info.tcpi_last_data_sent$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void tcpi_last_data_sent$set(MemorySegment seg, long index, int x) {
        tcp_info.tcpi_last_data_sent$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle tcpi_last_ack_sent$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("tcpi_last_ack_sent"));
    public static VarHandle tcpi_last_ack_sent$VH() {
        return tcp_info.tcpi_last_ack_sent$VH;
    }
    public static int tcpi_last_ack_sent$get(MemorySegment seg) {
        return (int)tcp_info.tcpi_last_ack_sent$VH.get(seg);
    }
    public static void tcpi_last_ack_sent$set( MemorySegment seg, int x) {
        tcp_info.tcpi_last_ack_sent$VH.set(seg, x);
    }
    public static int tcpi_last_ack_sent$get(MemorySegment seg, long index) {
        return (int)tcp_info.tcpi_last_ack_sent$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void tcpi_last_ack_sent$set(MemorySegment seg, long index, int x) {
        tcp_info.tcpi_last_ack_sent$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle tcpi_last_data_recv$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("tcpi_last_data_recv"));
    public static VarHandle tcpi_last_data_recv$VH() {
        return tcp_info.tcpi_last_data_recv$VH;
    }
    public static int tcpi_last_data_recv$get(MemorySegment seg) {
        return (int)tcp_info.tcpi_last_data_recv$VH.get(seg);
    }
    public static void tcpi_last_data_recv$set( MemorySegment seg, int x) {
        tcp_info.tcpi_last_data_recv$VH.set(seg, x);
    }
    public static int tcpi_last_data_recv$get(MemorySegment seg, long index) {
        return (int)tcp_info.tcpi_last_data_recv$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void tcpi_last_data_recv$set(MemorySegment seg, long index, int x) {
        tcp_info.tcpi_last_data_recv$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle tcpi_last_ack_recv$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("tcpi_last_ack_recv"));
    public static VarHandle tcpi_last_ack_recv$VH() {
        return tcp_info.tcpi_last_ack_recv$VH;
    }
    public static int tcpi_last_ack_recv$get(MemorySegment seg) {
        return (int)tcp_info.tcpi_last_ack_recv$VH.get(seg);
    }
    public static void tcpi_last_ack_recv$set( MemorySegment seg, int x) {
        tcp_info.tcpi_last_ack_recv$VH.set(seg, x);
    }
    public static int tcpi_last_ack_recv$get(MemorySegment seg, long index) {
        return (int)tcp_info.tcpi_last_ack_recv$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void tcpi_last_ack_recv$set(MemorySegment seg, long index, int x) {
        tcp_info.tcpi_last_ack_recv$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle tcpi_pmtu$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("tcpi_pmtu"));
    public static VarHandle tcpi_pmtu$VH() {
        return tcp_info.tcpi_pmtu$VH;
    }
    public static int tcpi_pmtu$get(MemorySegment seg) {
        return (int)tcp_info.tcpi_pmtu$VH.get(seg);
    }
    public static void tcpi_pmtu$set( MemorySegment seg, int x) {
        tcp_info.tcpi_pmtu$VH.set(seg, x);
    }
    public static int tcpi_pmtu$get(MemorySegment seg, long index) {
        return (int)tcp_info.tcpi_pmtu$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void tcpi_pmtu$set(MemorySegment seg, long index, int x) {
        tcp_info.tcpi_pmtu$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle tcpi_rcv_ssthresh$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("tcpi_rcv_ssthresh"));
    public static VarHandle tcpi_rcv_ssthresh$VH() {
        return tcp_info.tcpi_rcv_ssthresh$VH;
    }
    public static int tcpi_rcv_ssthresh$get(MemorySegment seg) {
        return (int)tcp_info.tcpi_rcv_ssthresh$VH.get(seg);
    }
    public static void tcpi_rcv_ssthresh$set( MemorySegment seg, int x) {
        tcp_info.tcpi_rcv_ssthresh$VH.set(seg, x);
    }
    public static int tcpi_rcv_ssthresh$get(MemorySegment seg, long index) {
        return (int)tcp_info.tcpi_rcv_ssthresh$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void tcpi_rcv_ssthresh$set(MemorySegment seg, long index, int x) {
        tcp_info.tcpi_rcv_ssthresh$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle tcpi_rtt$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("tcpi_rtt"));
    public static VarHandle tcpi_rtt$VH() {
        return tcp_info.tcpi_rtt$VH;
    }
    public static int tcpi_rtt$get(MemorySegment seg) {
        return (int)tcp_info.tcpi_rtt$VH.get(seg);
    }
    public static void tcpi_rtt$set( MemorySegment seg, int x) {
        tcp_info.tcpi_rtt$VH.set(seg, x);
    }
    public static int tcpi_rtt$get(MemorySegment seg, long index) {
        return (int)tcp_info.tcpi_rtt$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void tcpi_rtt$set(MemorySegment seg, long index, int x) {
        tcp_info.tcpi_rtt$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle tcpi_rttvar$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("tcpi_rttvar"));
    public static VarHandle tcpi_rttvar$VH() {
        return tcp_info.tcpi_rttvar$VH;
    }
    public static int tcpi_rttvar$get(MemorySegment seg) {
        return (int)tcp_info.tcpi_rttvar$VH.get(seg);
    }
    public static void tcpi_rttvar$set( MemorySegment seg, int x) {
        tcp_info.tcpi_rttvar$VH.set(seg, x);
    }
    public static int tcpi_rttvar$get(MemorySegment seg, long index) {
        return (int)tcp_info.tcpi_rttvar$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void tcpi_rttvar$set(MemorySegment seg, long index, int x) {
        tcp_info.tcpi_rttvar$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle tcpi_snd_ssthresh$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("tcpi_snd_ssthresh"));
    public static VarHandle tcpi_snd_ssthresh$VH() {
        return tcp_info.tcpi_snd_ssthresh$VH;
    }
    public static int tcpi_snd_ssthresh$get(MemorySegment seg) {
        return (int)tcp_info.tcpi_snd_ssthresh$VH.get(seg);
    }
    public static void tcpi_snd_ssthresh$set( MemorySegment seg, int x) {
        tcp_info.tcpi_snd_ssthresh$VH.set(seg, x);
    }
    public static int tcpi_snd_ssthresh$get(MemorySegment seg, long index) {
        return (int)tcp_info.tcpi_snd_ssthresh$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void tcpi_snd_ssthresh$set(MemorySegment seg, long index, int x) {
        tcp_info.tcpi_snd_ssthresh$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle tcpi_snd_cwnd$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("tcpi_snd_cwnd"));
    public static VarHandle tcpi_snd_cwnd$VH() {
        return tcp_info.tcpi_snd_cwnd$VH;
    }
    public static int tcpi_snd_cwnd$get(MemorySegment seg) {
        return (int)tcp_info.tcpi_snd_cwnd$VH.get(seg);
    }
    public static void tcpi_snd_cwnd$set( MemorySegment seg, int x) {
        tcp_info.tcpi_snd_cwnd$VH.set(seg, x);
    }
    public static int tcpi_snd_cwnd$get(MemorySegment seg, long index) {
        return (int)tcp_info.tcpi_snd_cwnd$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void tcpi_snd_cwnd$set(MemorySegment seg, long index, int x) {
        tcp_info.tcpi_snd_cwnd$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle tcpi_advmss$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("tcpi_advmss"));
    public static VarHandle tcpi_advmss$VH() {
        return tcp_info.tcpi_advmss$VH;
    }
    public static int tcpi_advmss$get(MemorySegment seg) {
        return (int)tcp_info.tcpi_advmss$VH.get(seg);
    }
    public static void tcpi_advmss$set( MemorySegment seg, int x) {
        tcp_info.tcpi_advmss$VH.set(seg, x);
    }
    public static int tcpi_advmss$get(MemorySegment seg, long index) {
        return (int)tcp_info.tcpi_advmss$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void tcpi_advmss$set(MemorySegment seg, long index, int x) {
        tcp_info.tcpi_advmss$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle tcpi_reordering$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("tcpi_reordering"));
    public static VarHandle tcpi_reordering$VH() {
        return tcp_info.tcpi_reordering$VH;
    }
    public static int tcpi_reordering$get(MemorySegment seg) {
        return (int)tcp_info.tcpi_reordering$VH.get(seg);
    }
    public static void tcpi_reordering$set( MemorySegment seg, int x) {
        tcp_info.tcpi_reordering$VH.set(seg, x);
    }
    public static int tcpi_reordering$get(MemorySegment seg, long index) {
        return (int)tcp_info.tcpi_reordering$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void tcpi_reordering$set(MemorySegment seg, long index, int x) {
        tcp_info.tcpi_reordering$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle tcpi_rcv_rtt$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("tcpi_rcv_rtt"));
    public static VarHandle tcpi_rcv_rtt$VH() {
        return tcp_info.tcpi_rcv_rtt$VH;
    }
    public static int tcpi_rcv_rtt$get(MemorySegment seg) {
        return (int)tcp_info.tcpi_rcv_rtt$VH.get(seg);
    }
    public static void tcpi_rcv_rtt$set( MemorySegment seg, int x) {
        tcp_info.tcpi_rcv_rtt$VH.set(seg, x);
    }
    public static int tcpi_rcv_rtt$get(MemorySegment seg, long index) {
        return (int)tcp_info.tcpi_rcv_rtt$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void tcpi_rcv_rtt$set(MemorySegment seg, long index, int x) {
        tcp_info.tcpi_rcv_rtt$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle tcpi_rcv_space$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("tcpi_rcv_space"));
    public static VarHandle tcpi_rcv_space$VH() {
        return tcp_info.tcpi_rcv_space$VH;
    }
    public static int tcpi_rcv_space$get(MemorySegment seg) {
        return (int)tcp_info.tcpi_rcv_space$VH.get(seg);
    }
    public static void tcpi_rcv_space$set( MemorySegment seg, int x) {
        tcp_info.tcpi_rcv_space$VH.set(seg, x);
    }
    public static int tcpi_rcv_space$get(MemorySegment seg, long index) {
        return (int)tcp_info.tcpi_rcv_space$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void tcpi_rcv_space$set(MemorySegment seg, long index, int x) {
        tcp_info.tcpi_rcv_space$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle tcpi_total_retrans$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("tcpi_total_retrans"));
    public static VarHandle tcpi_total_retrans$VH() {
        return tcp_info.tcpi_total_retrans$VH;
    }
    public static int tcpi_total_retrans$get(MemorySegment seg) {
        return (int)tcp_info.tcpi_total_retrans$VH.get(seg);
    }
    public static void tcpi_total_retrans$set( MemorySegment seg, int x) {
        tcp_info.tcpi_total_retrans$VH.set(seg, x);
    }
    public static int tcpi_total_retrans$get(MemorySegment seg, long index) {
        return (int)tcp_info.tcpi_total_retrans$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void tcpi_total_retrans$set(MemorySegment seg, long index, int x) {
        tcp_info.tcpi_total_retrans$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


