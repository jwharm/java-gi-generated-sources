// Generated by jextract

package io.github.jwharm.javagi.interop.jextract;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _GdkPixbufAnimationIterClass {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG_LONG$LAYOUT.withName("g_type")
            ).withName("g_type_class"),
            Constants$root.C_POINTER$LAYOUT.withName("construct_properties"),
            Constants$root.C_POINTER$LAYOUT.withName("constructor"),
            Constants$root.C_POINTER$LAYOUT.withName("set_property"),
            Constants$root.C_POINTER$LAYOUT.withName("get_property"),
            Constants$root.C_POINTER$LAYOUT.withName("dispose"),
            Constants$root.C_POINTER$LAYOUT.withName("finalize"),
            Constants$root.C_POINTER$LAYOUT.withName("dispatch_properties_changed"),
            Constants$root.C_POINTER$LAYOUT.withName("notify"),
            Constants$root.C_POINTER$LAYOUT.withName("constructed"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("flags"),
            MemoryLayout.sequenceLayout(6, Constants$root.C_POINTER$LAYOUT).withName("pdummy")
        ).withName("parent_class"),
        Constants$root.C_POINTER$LAYOUT.withName("get_delay_time"),
        Constants$root.C_POINTER$LAYOUT.withName("get_pixbuf"),
        Constants$root.C_POINTER$LAYOUT.withName("on_currently_loading_frame"),
        Constants$root.C_POINTER$LAYOUT.withName("advance")
    ).withName("_GdkPixbufAnimationIterClass");
    public static MemoryLayout $LAYOUT() {
        return _GdkPixbufAnimationIterClass.$struct$LAYOUT;
    }
    public static MemorySegment parent_class$slice(MemorySegment seg) {
        return seg.asSlice(0, 136);
    }
    static final FunctionDescriptor get_delay_time$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_delay_time$MH = RuntimeHelper.downcallHandle(
        _GdkPixbufAnimationIterClass.get_delay_time$FUNC
    );
    public interface get_delay_time {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(get_delay_time fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_delay_time.class, fi, _GdkPixbufAnimationIterClass.get_delay_time$FUNC, session);
        }
        static get_delay_time ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)_GdkPixbufAnimationIterClass.get_delay_time$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_delay_time$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_delay_time"));
    public static VarHandle get_delay_time$VH() {
        return _GdkPixbufAnimationIterClass.get_delay_time$VH;
    }
    public static MemoryAddress get_delay_time$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GdkPixbufAnimationIterClass.get_delay_time$VH.get(seg);
    }
    public static void get_delay_time$set( MemorySegment seg, MemoryAddress x) {
        _GdkPixbufAnimationIterClass.get_delay_time$VH.set(seg, x);
    }
    public static MemoryAddress get_delay_time$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GdkPixbufAnimationIterClass.get_delay_time$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_delay_time$set(MemorySegment seg, long index, MemoryAddress x) {
        _GdkPixbufAnimationIterClass.get_delay_time$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_delay_time get_delay_time (MemorySegment segment, MemorySession session) {
        return get_delay_time.ofAddress(get_delay_time$get(segment), session);
    }
    static final FunctionDescriptor get_pixbuf$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_pixbuf$MH = RuntimeHelper.downcallHandle(
        _GdkPixbufAnimationIterClass.get_pixbuf$FUNC
    );
    public interface get_pixbuf {

        java.lang.foreign.Addressable apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(get_pixbuf fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_pixbuf.class, fi, _GdkPixbufAnimationIterClass.get_pixbuf$FUNC, session);
        }
        static get_pixbuf ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (java.lang.foreign.Addressable)(java.lang.foreign.MemoryAddress)_GdkPixbufAnimationIterClass.get_pixbuf$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_pixbuf$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_pixbuf"));
    public static VarHandle get_pixbuf$VH() {
        return _GdkPixbufAnimationIterClass.get_pixbuf$VH;
    }
    public static MemoryAddress get_pixbuf$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GdkPixbufAnimationIterClass.get_pixbuf$VH.get(seg);
    }
    public static void get_pixbuf$set( MemorySegment seg, MemoryAddress x) {
        _GdkPixbufAnimationIterClass.get_pixbuf$VH.set(seg, x);
    }
    public static MemoryAddress get_pixbuf$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GdkPixbufAnimationIterClass.get_pixbuf$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_pixbuf$set(MemorySegment seg, long index, MemoryAddress x) {
        _GdkPixbufAnimationIterClass.get_pixbuf$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_pixbuf get_pixbuf (MemorySegment segment, MemorySession session) {
        return get_pixbuf.ofAddress(get_pixbuf$get(segment), session);
    }
    static final FunctionDescriptor on_currently_loading_frame$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle on_currently_loading_frame$MH = RuntimeHelper.downcallHandle(
        _GdkPixbufAnimationIterClass.on_currently_loading_frame$FUNC
    );
    public interface on_currently_loading_frame {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(on_currently_loading_frame fi, MemorySession session) {
            return RuntimeHelper.upcallStub(on_currently_loading_frame.class, fi, _GdkPixbufAnimationIterClass.on_currently_loading_frame$FUNC, session);
        }
        static on_currently_loading_frame ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)_GdkPixbufAnimationIterClass.on_currently_loading_frame$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle on_currently_loading_frame$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("on_currently_loading_frame"));
    public static VarHandle on_currently_loading_frame$VH() {
        return _GdkPixbufAnimationIterClass.on_currently_loading_frame$VH;
    }
    public static MemoryAddress on_currently_loading_frame$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GdkPixbufAnimationIterClass.on_currently_loading_frame$VH.get(seg);
    }
    public static void on_currently_loading_frame$set( MemorySegment seg, MemoryAddress x) {
        _GdkPixbufAnimationIterClass.on_currently_loading_frame$VH.set(seg, x);
    }
    public static MemoryAddress on_currently_loading_frame$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GdkPixbufAnimationIterClass.on_currently_loading_frame$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void on_currently_loading_frame$set(MemorySegment seg, long index, MemoryAddress x) {
        _GdkPixbufAnimationIterClass.on_currently_loading_frame$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static on_currently_loading_frame on_currently_loading_frame (MemorySegment segment, MemorySession session) {
        return on_currently_loading_frame.ofAddress(on_currently_loading_frame$get(segment), session);
    }
    static final FunctionDescriptor advance$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle advance$MH = RuntimeHelper.downcallHandle(
        _GdkPixbufAnimationIterClass.advance$FUNC
    );
    public interface advance {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(advance fi, MemorySession session) {
            return RuntimeHelper.upcallStub(advance.class, fi, _GdkPixbufAnimationIterClass.advance$FUNC, session);
        }
        static advance ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)_GdkPixbufAnimationIterClass.advance$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle advance$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("advance"));
    public static VarHandle advance$VH() {
        return _GdkPixbufAnimationIterClass.advance$VH;
    }
    public static MemoryAddress advance$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GdkPixbufAnimationIterClass.advance$VH.get(seg);
    }
    public static void advance$set( MemorySegment seg, MemoryAddress x) {
        _GdkPixbufAnimationIterClass.advance$VH.set(seg, x);
    }
    public static MemoryAddress advance$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GdkPixbufAnimationIterClass.advance$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void advance$set(MemorySegment seg, long index, MemoryAddress x) {
        _GdkPixbufAnimationIterClass.advance$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static advance advance (MemorySegment segment, MemorySession session) {
        return advance.ofAddress(advance$get(segment), session);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


