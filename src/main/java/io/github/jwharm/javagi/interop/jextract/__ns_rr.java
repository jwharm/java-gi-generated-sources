// Generated by jextract

package io.github.jwharm.javagi.interop.jextract;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class __ns_rr {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.sequenceLayout(1025, Constants$root.C_CHAR$LAYOUT).withName("name"),
        MemoryLayout.paddingLayout(8),
        Constants$root.C_SHORT$LAYOUT.withName("type"),
        Constants$root.C_SHORT$LAYOUT.withName("rr_class"),
        MemoryLayout.paddingLayout(16),
        Constants$root.C_INT$LAYOUT.withName("ttl"),
        Constants$root.C_SHORT$LAYOUT.withName("rdlength"),
        MemoryLayout.paddingLayout(16),
        Constants$root.C_POINTER$LAYOUT.withName("rdata")
    ).withName("__ns_rr");
    public static MemoryLayout $LAYOUT() {
        return __ns_rr.$struct$LAYOUT;
    }
    public static MemorySegment name$slice(MemorySegment seg) {
        return seg.asSlice(0, 1025);
    }
    static final VarHandle type$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("type"));
    public static VarHandle type$VH() {
        return __ns_rr.type$VH;
    }
    public static short type$get(MemorySegment seg) {
        return (short)__ns_rr.type$VH.get(seg);
    }
    public static void type$set( MemorySegment seg, short x) {
        __ns_rr.type$VH.set(seg, x);
    }
    public static short type$get(MemorySegment seg, long index) {
        return (short)__ns_rr.type$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void type$set(MemorySegment seg, long index, short x) {
        __ns_rr.type$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle rr_class$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("rr_class"));
    public static VarHandle rr_class$VH() {
        return __ns_rr.rr_class$VH;
    }
    public static short rr_class$get(MemorySegment seg) {
        return (short)__ns_rr.rr_class$VH.get(seg);
    }
    public static void rr_class$set( MemorySegment seg, short x) {
        __ns_rr.rr_class$VH.set(seg, x);
    }
    public static short rr_class$get(MemorySegment seg, long index) {
        return (short)__ns_rr.rr_class$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void rr_class$set(MemorySegment seg, long index, short x) {
        __ns_rr.rr_class$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ttl$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ttl"));
    public static VarHandle ttl$VH() {
        return __ns_rr.ttl$VH;
    }
    public static int ttl$get(MemorySegment seg) {
        return (int)__ns_rr.ttl$VH.get(seg);
    }
    public static void ttl$set( MemorySegment seg, int x) {
        __ns_rr.ttl$VH.set(seg, x);
    }
    public static int ttl$get(MemorySegment seg, long index) {
        return (int)__ns_rr.ttl$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ttl$set(MemorySegment seg, long index, int x) {
        __ns_rr.ttl$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle rdlength$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("rdlength"));
    public static VarHandle rdlength$VH() {
        return __ns_rr.rdlength$VH;
    }
    public static short rdlength$get(MemorySegment seg) {
        return (short)__ns_rr.rdlength$VH.get(seg);
    }
    public static void rdlength$set( MemorySegment seg, short x) {
        __ns_rr.rdlength$VH.set(seg, x);
    }
    public static short rdlength$get(MemorySegment seg, long index) {
        return (short)__ns_rr.rdlength$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void rdlength$set(MemorySegment seg, long index, short x) {
        __ns_rr.rdlength$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle rdata$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("rdata"));
    public static VarHandle rdata$VH() {
        return __ns_rr.rdata$VH;
    }
    public static MemoryAddress rdata$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)__ns_rr.rdata$VH.get(seg);
    }
    public static void rdata$set( MemorySegment seg, MemoryAddress x) {
        __ns_rr.rdata$VH.set(seg, x);
    }
    public static MemoryAddress rdata$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)__ns_rr.rdata$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void rdata$set(MemorySegment seg, long index, MemoryAddress x) {
        __ns_rr.rdata$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


