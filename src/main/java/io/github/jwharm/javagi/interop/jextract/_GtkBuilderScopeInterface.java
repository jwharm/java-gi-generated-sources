// Generated by jextract

package io.github.jwharm.javagi.interop.jextract;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _GtkBuilderScopeInterface {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            Constants$root.C_LONG_LONG$LAYOUT.withName("g_type"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("g_instance_type")
        ).withName("g_iface"),
        Constants$root.C_POINTER$LAYOUT.withName("get_type_from_name"),
        Constants$root.C_POINTER$LAYOUT.withName("get_type_from_function"),
        Constants$root.C_POINTER$LAYOUT.withName("create_closure")
    ).withName("_GtkBuilderScopeInterface");
    public static MemoryLayout $LAYOUT() {
        return _GtkBuilderScopeInterface.$struct$LAYOUT;
    }
    public static MemorySegment g_iface$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    static final FunctionDescriptor get_type_from_name$FUNC = FunctionDescriptor.of(Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_type_from_name$MH = RuntimeHelper.downcallHandle(
        _GtkBuilderScopeInterface.get_type_from_name$FUNC
    );
    public interface get_type_from_name {

        long apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(get_type_from_name fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_type_from_name.class, fi, _GtkBuilderScopeInterface.get_type_from_name$FUNC, session);
        }
        static get_type_from_name ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    return (long)_GtkBuilderScopeInterface.get_type_from_name$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_type_from_name$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_type_from_name"));
    public static VarHandle get_type_from_name$VH() {
        return _GtkBuilderScopeInterface.get_type_from_name$VH;
    }
    public static MemoryAddress get_type_from_name$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkBuilderScopeInterface.get_type_from_name$VH.get(seg);
    }
    public static void get_type_from_name$set( MemorySegment seg, MemoryAddress x) {
        _GtkBuilderScopeInterface.get_type_from_name$VH.set(seg, x);
    }
    public static MemoryAddress get_type_from_name$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkBuilderScopeInterface.get_type_from_name$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_type_from_name$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkBuilderScopeInterface.get_type_from_name$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_type_from_name get_type_from_name (MemorySegment segment, MemorySession session) {
        return get_type_from_name.ofAddress(get_type_from_name$get(segment), session);
    }
    static final FunctionDescriptor get_type_from_function$FUNC = FunctionDescriptor.of(Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_type_from_function$MH = RuntimeHelper.downcallHandle(
        _GtkBuilderScopeInterface.get_type_from_function$FUNC
    );
    public interface get_type_from_function {

        long apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(get_type_from_function fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_type_from_function.class, fi, _GtkBuilderScopeInterface.get_type_from_function$FUNC, session);
        }
        static get_type_from_function ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    return (long)_GtkBuilderScopeInterface.get_type_from_function$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_type_from_function$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_type_from_function"));
    public static VarHandle get_type_from_function$VH() {
        return _GtkBuilderScopeInterface.get_type_from_function$VH;
    }
    public static MemoryAddress get_type_from_function$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkBuilderScopeInterface.get_type_from_function$VH.get(seg);
    }
    public static void get_type_from_function$set( MemorySegment seg, MemoryAddress x) {
        _GtkBuilderScopeInterface.get_type_from_function$VH.set(seg, x);
    }
    public static MemoryAddress get_type_from_function$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkBuilderScopeInterface.get_type_from_function$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_type_from_function$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkBuilderScopeInterface.get_type_from_function$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_type_from_function get_type_from_function (MemorySegment segment, MemorySession session) {
        return get_type_from_function.ofAddress(get_type_from_function$get(segment), session);
    }
    static final FunctionDescriptor create_closure$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle create_closure$MH = RuntimeHelper.downcallHandle(
        _GtkBuilderScopeInterface.create_closure$FUNC
    );
    public interface create_closure {

        java.lang.foreign.Addressable apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2, int _x3, java.lang.foreign.MemoryAddress _x4, java.lang.foreign.MemoryAddress _x5);
        static MemorySegment allocate(create_closure fi, MemorySession session) {
            return RuntimeHelper.upcallStub(create_closure.class, fi, _GtkBuilderScopeInterface.create_closure$FUNC, session);
        }
        static create_closure ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2, int __x3, java.lang.foreign.MemoryAddress __x4, java.lang.foreign.MemoryAddress __x5) -> {
                try {
                    return (java.lang.foreign.Addressable)(java.lang.foreign.MemoryAddress)_GtkBuilderScopeInterface.create_closure$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2, __x3, (java.lang.foreign.Addressable)__x4, (java.lang.foreign.Addressable)__x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle create_closure$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("create_closure"));
    public static VarHandle create_closure$VH() {
        return _GtkBuilderScopeInterface.create_closure$VH;
    }
    public static MemoryAddress create_closure$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkBuilderScopeInterface.create_closure$VH.get(seg);
    }
    public static void create_closure$set( MemorySegment seg, MemoryAddress x) {
        _GtkBuilderScopeInterface.create_closure$VH.set(seg, x);
    }
    public static MemoryAddress create_closure$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkBuilderScopeInterface.create_closure$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void create_closure$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkBuilderScopeInterface.create_closure$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static create_closure create_closure (MemorySegment segment, MemorySession session) {
        return create_closure.ofAddress(create_closure$get(segment), session);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


