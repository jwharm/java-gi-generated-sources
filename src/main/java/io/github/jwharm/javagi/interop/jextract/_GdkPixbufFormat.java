// Generated by jextract

package io.github.jwharm.javagi.interop.jextract;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _GdkPixbufFormat {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("name"),
        Constants$root.C_POINTER$LAYOUT.withName("signature"),
        Constants$root.C_POINTER$LAYOUT.withName("domain"),
        Constants$root.C_POINTER$LAYOUT.withName("description"),
        Constants$root.C_POINTER$LAYOUT.withName("mime_types"),
        Constants$root.C_POINTER$LAYOUT.withName("extensions"),
        Constants$root.C_INT$LAYOUT.withName("flags"),
        Constants$root.C_INT$LAYOUT.withName("disabled"),
        Constants$root.C_POINTER$LAYOUT.withName("license")
    ).withName("_GdkPixbufFormat");
    public static MemoryLayout $LAYOUT() {
        return _GdkPixbufFormat.$struct$LAYOUT;
    }
    static final VarHandle name$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("name"));
    public static VarHandle name$VH() {
        return _GdkPixbufFormat.name$VH;
    }
    public static MemoryAddress name$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GdkPixbufFormat.name$VH.get(seg);
    }
    public static void name$set( MemorySegment seg, MemoryAddress x) {
        _GdkPixbufFormat.name$VH.set(seg, x);
    }
    public static MemoryAddress name$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GdkPixbufFormat.name$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void name$set(MemorySegment seg, long index, MemoryAddress x) {
        _GdkPixbufFormat.name$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle signature$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("signature"));
    public static VarHandle signature$VH() {
        return _GdkPixbufFormat.signature$VH;
    }
    public static MemoryAddress signature$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GdkPixbufFormat.signature$VH.get(seg);
    }
    public static void signature$set( MemorySegment seg, MemoryAddress x) {
        _GdkPixbufFormat.signature$VH.set(seg, x);
    }
    public static MemoryAddress signature$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GdkPixbufFormat.signature$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void signature$set(MemorySegment seg, long index, MemoryAddress x) {
        _GdkPixbufFormat.signature$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle domain$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("domain"));
    public static VarHandle domain$VH() {
        return _GdkPixbufFormat.domain$VH;
    }
    public static MemoryAddress domain$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GdkPixbufFormat.domain$VH.get(seg);
    }
    public static void domain$set( MemorySegment seg, MemoryAddress x) {
        _GdkPixbufFormat.domain$VH.set(seg, x);
    }
    public static MemoryAddress domain$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GdkPixbufFormat.domain$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void domain$set(MemorySegment seg, long index, MemoryAddress x) {
        _GdkPixbufFormat.domain$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle description$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("description"));
    public static VarHandle description$VH() {
        return _GdkPixbufFormat.description$VH;
    }
    public static MemoryAddress description$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GdkPixbufFormat.description$VH.get(seg);
    }
    public static void description$set( MemorySegment seg, MemoryAddress x) {
        _GdkPixbufFormat.description$VH.set(seg, x);
    }
    public static MemoryAddress description$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GdkPixbufFormat.description$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void description$set(MemorySegment seg, long index, MemoryAddress x) {
        _GdkPixbufFormat.description$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle mime_types$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("mime_types"));
    public static VarHandle mime_types$VH() {
        return _GdkPixbufFormat.mime_types$VH;
    }
    public static MemoryAddress mime_types$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GdkPixbufFormat.mime_types$VH.get(seg);
    }
    public static void mime_types$set( MemorySegment seg, MemoryAddress x) {
        _GdkPixbufFormat.mime_types$VH.set(seg, x);
    }
    public static MemoryAddress mime_types$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GdkPixbufFormat.mime_types$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void mime_types$set(MemorySegment seg, long index, MemoryAddress x) {
        _GdkPixbufFormat.mime_types$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle extensions$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("extensions"));
    public static VarHandle extensions$VH() {
        return _GdkPixbufFormat.extensions$VH;
    }
    public static MemoryAddress extensions$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GdkPixbufFormat.extensions$VH.get(seg);
    }
    public static void extensions$set( MemorySegment seg, MemoryAddress x) {
        _GdkPixbufFormat.extensions$VH.set(seg, x);
    }
    public static MemoryAddress extensions$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GdkPixbufFormat.extensions$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void extensions$set(MemorySegment seg, long index, MemoryAddress x) {
        _GdkPixbufFormat.extensions$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle flags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("flags"));
    public static VarHandle flags$VH() {
        return _GdkPixbufFormat.flags$VH;
    }
    public static int flags$get(MemorySegment seg) {
        return (int)_GdkPixbufFormat.flags$VH.get(seg);
    }
    public static void flags$set( MemorySegment seg, int x) {
        _GdkPixbufFormat.flags$VH.set(seg, x);
    }
    public static int flags$get(MemorySegment seg, long index) {
        return (int)_GdkPixbufFormat.flags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void flags$set(MemorySegment seg, long index, int x) {
        _GdkPixbufFormat.flags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle disabled$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("disabled"));
    public static VarHandle disabled$VH() {
        return _GdkPixbufFormat.disabled$VH;
    }
    public static int disabled$get(MemorySegment seg) {
        return (int)_GdkPixbufFormat.disabled$VH.get(seg);
    }
    public static void disabled$set( MemorySegment seg, int x) {
        _GdkPixbufFormat.disabled$VH.set(seg, x);
    }
    public static int disabled$get(MemorySegment seg, long index) {
        return (int)_GdkPixbufFormat.disabled$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void disabled$set(MemorySegment seg, long index, int x) {
        _GdkPixbufFormat.disabled$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle license$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("license"));
    public static VarHandle license$VH() {
        return _GdkPixbufFormat.license$VH;
    }
    public static MemoryAddress license$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GdkPixbufFormat.license$VH.get(seg);
    }
    public static void license$set( MemorySegment seg, MemoryAddress x) {
        _GdkPixbufFormat.license$VH.set(seg, x);
    }
    public static MemoryAddress license$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GdkPixbufFormat.license$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void license$set(MemorySegment seg, long index, MemoryAddress x) {
        _GdkPixbufFormat.license$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


