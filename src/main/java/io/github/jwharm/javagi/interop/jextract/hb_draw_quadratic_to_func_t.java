// Generated by jextract

package io.github.jwharm.javagi.interop.jextract;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public interface hb_draw_quadratic_to_func_t {

    void apply(java.lang.foreign.MemoryAddress dfuncs, java.lang.foreign.MemoryAddress draw_data, java.lang.foreign.MemoryAddress st, float control_x, float control_y, float to_x, float to_y, java.lang.foreign.MemoryAddress user_data);
    static MemorySegment allocate(hb_draw_quadratic_to_func_t fi, MemorySession session) {
        return RuntimeHelper.upcallStub(hb_draw_quadratic_to_func_t.class, fi, constants$1159.hb_draw_quadratic_to_func_t$FUNC, session);
    }
    static hb_draw_quadratic_to_func_t ofAddress(MemoryAddress addr, MemorySession session) {
        MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
        return (java.lang.foreign.MemoryAddress _dfuncs, java.lang.foreign.MemoryAddress _draw_data, java.lang.foreign.MemoryAddress _st, float _control_x, float _control_y, float _to_x, float _to_y, java.lang.foreign.MemoryAddress _user_data) -> {
            try {
                constants$1160.hb_draw_quadratic_to_func_t$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)_dfuncs, (java.lang.foreign.Addressable)_draw_data, (java.lang.foreign.Addressable)_st, _control_x, _control_y, _to_x, _to_y, (java.lang.foreign.Addressable)_user_data);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


