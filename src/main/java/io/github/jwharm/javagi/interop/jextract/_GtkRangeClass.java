// Generated by jextract

package io.github.jwharm.javagi.interop.jextract;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _GtkRangeClass {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            MemoryLayout.structLayout(
                MemoryLayout.structLayout(
                    Constants$root.C_LONG_LONG$LAYOUT.withName("g_type")
                ).withName("g_type_class"),
                Constants$root.C_POINTER$LAYOUT.withName("construct_properties"),
                Constants$root.C_POINTER$LAYOUT.withName("constructor"),
                Constants$root.C_POINTER$LAYOUT.withName("set_property"),
                Constants$root.C_POINTER$LAYOUT.withName("get_property"),
                Constants$root.C_POINTER$LAYOUT.withName("dispose"),
                Constants$root.C_POINTER$LAYOUT.withName("finalize"),
                Constants$root.C_POINTER$LAYOUT.withName("dispatch_properties_changed"),
                Constants$root.C_POINTER$LAYOUT.withName("notify"),
                Constants$root.C_POINTER$LAYOUT.withName("constructed"),
                Constants$root.C_LONG_LONG$LAYOUT.withName("flags"),
                MemoryLayout.sequenceLayout(6, Constants$root.C_POINTER$LAYOUT).withName("pdummy")
            ).withName("parent_class"),
            Constants$root.C_POINTER$LAYOUT.withName("show"),
            Constants$root.C_POINTER$LAYOUT.withName("hide"),
            Constants$root.C_POINTER$LAYOUT.withName("map"),
            Constants$root.C_POINTER$LAYOUT.withName("unmap"),
            Constants$root.C_POINTER$LAYOUT.withName("realize"),
            Constants$root.C_POINTER$LAYOUT.withName("unrealize"),
            Constants$root.C_POINTER$LAYOUT.withName("root"),
            Constants$root.C_POINTER$LAYOUT.withName("unroot"),
            Constants$root.C_POINTER$LAYOUT.withName("size_allocate"),
            Constants$root.C_POINTER$LAYOUT.withName("state_flags_changed"),
            Constants$root.C_POINTER$LAYOUT.withName("direction_changed"),
            Constants$root.C_POINTER$LAYOUT.withName("get_request_mode"),
            Constants$root.C_POINTER$LAYOUT.withName("measure"),
            Constants$root.C_POINTER$LAYOUT.withName("mnemonic_activate"),
            Constants$root.C_POINTER$LAYOUT.withName("grab_focus"),
            Constants$root.C_POINTER$LAYOUT.withName("focus"),
            Constants$root.C_POINTER$LAYOUT.withName("set_focus_child"),
            Constants$root.C_POINTER$LAYOUT.withName("move_focus"),
            Constants$root.C_POINTER$LAYOUT.withName("keynav_failed"),
            Constants$root.C_POINTER$LAYOUT.withName("query_tooltip"),
            Constants$root.C_POINTER$LAYOUT.withName("compute_expand"),
            Constants$root.C_POINTER$LAYOUT.withName("css_changed"),
            Constants$root.C_POINTER$LAYOUT.withName("system_setting_changed"),
            Constants$root.C_POINTER$LAYOUT.withName("snapshot"),
            Constants$root.C_POINTER$LAYOUT.withName("contains"),
            Constants$root.C_POINTER$LAYOUT.withName("priv"),
            MemoryLayout.sequenceLayout(8, Constants$root.C_POINTER$LAYOUT).withName("padding")
        ).withName("parent_class"),
        Constants$root.C_POINTER$LAYOUT.withName("value_changed"),
        Constants$root.C_POINTER$LAYOUT.withName("adjust_bounds"),
        Constants$root.C_POINTER$LAYOUT.withName("move_slider"),
        Constants$root.C_POINTER$LAYOUT.withName("get_range_border"),
        Constants$root.C_POINTER$LAYOUT.withName("change_value"),
        MemoryLayout.sequenceLayout(8, Constants$root.C_POINTER$LAYOUT).withName("padding")
    ).withName("_GtkRangeClass");
    public static MemoryLayout $LAYOUT() {
        return _GtkRangeClass.$struct$LAYOUT;
    }
    public static MemorySegment parent_class$slice(MemorySegment seg) {
        return seg.asSlice(0, 408);
    }
    static final FunctionDescriptor value_changed$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle value_changed$MH = RuntimeHelper.downcallHandle(
        _GtkRangeClass.value_changed$FUNC
    );
    public interface value_changed {

        void apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(value_changed fi, MemorySession session) {
            return RuntimeHelper.upcallStub(value_changed.class, fi, _GtkRangeClass.value_changed$FUNC, session);
        }
        static value_changed ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    _GtkRangeClass.value_changed$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle value_changed$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("value_changed"));
    public static VarHandle value_changed$VH() {
        return _GtkRangeClass.value_changed$VH;
    }
    public static MemoryAddress value_changed$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkRangeClass.value_changed$VH.get(seg);
    }
    public static void value_changed$set( MemorySegment seg, MemoryAddress x) {
        _GtkRangeClass.value_changed$VH.set(seg, x);
    }
    public static MemoryAddress value_changed$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkRangeClass.value_changed$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void value_changed$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkRangeClass.value_changed$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static value_changed value_changed (MemorySegment segment, MemorySession session) {
        return value_changed.ofAddress(value_changed$get(segment), session);
    }
    static final FunctionDescriptor adjust_bounds$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT
    );
    static final MethodHandle adjust_bounds$MH = RuntimeHelper.downcallHandle(
        _GtkRangeClass.adjust_bounds$FUNC
    );
    public interface adjust_bounds {

        void apply(java.lang.foreign.MemoryAddress _x0, double _x1);
        static MemorySegment allocate(adjust_bounds fi, MemorySession session) {
            return RuntimeHelper.upcallStub(adjust_bounds.class, fi, _GtkRangeClass.adjust_bounds$FUNC, session);
        }
        static adjust_bounds ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, double __x1) -> {
                try {
                    _GtkRangeClass.adjust_bounds$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle adjust_bounds$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("adjust_bounds"));
    public static VarHandle adjust_bounds$VH() {
        return _GtkRangeClass.adjust_bounds$VH;
    }
    public static MemoryAddress adjust_bounds$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkRangeClass.adjust_bounds$VH.get(seg);
    }
    public static void adjust_bounds$set( MemorySegment seg, MemoryAddress x) {
        _GtkRangeClass.adjust_bounds$VH.set(seg, x);
    }
    public static MemoryAddress adjust_bounds$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkRangeClass.adjust_bounds$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void adjust_bounds$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkRangeClass.adjust_bounds$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static adjust_bounds adjust_bounds (MemorySegment segment, MemorySession session) {
        return adjust_bounds.ofAddress(adjust_bounds$get(segment), session);
    }
    static final FunctionDescriptor move_slider$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle move_slider$MH = RuntimeHelper.downcallHandle(
        _GtkRangeClass.move_slider$FUNC
    );
    public interface move_slider {

        void apply(java.lang.foreign.MemoryAddress _x0, int _x1);
        static MemorySegment allocate(move_slider fi, MemorySession session) {
            return RuntimeHelper.upcallStub(move_slider.class, fi, _GtkRangeClass.move_slider$FUNC, session);
        }
        static move_slider ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1) -> {
                try {
                    _GtkRangeClass.move_slider$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle move_slider$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("move_slider"));
    public static VarHandle move_slider$VH() {
        return _GtkRangeClass.move_slider$VH;
    }
    public static MemoryAddress move_slider$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkRangeClass.move_slider$VH.get(seg);
    }
    public static void move_slider$set( MemorySegment seg, MemoryAddress x) {
        _GtkRangeClass.move_slider$VH.set(seg, x);
    }
    public static MemoryAddress move_slider$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkRangeClass.move_slider$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void move_slider$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkRangeClass.move_slider$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static move_slider move_slider (MemorySegment segment, MemorySession session) {
        return move_slider.ofAddress(move_slider$get(segment), session);
    }
    static final FunctionDescriptor get_range_border$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_range_border$MH = RuntimeHelper.downcallHandle(
        _GtkRangeClass.get_range_border$FUNC
    );
    public interface get_range_border {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(get_range_border fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_range_border.class, fi, _GtkRangeClass.get_range_border$FUNC, session);
        }
        static get_range_border ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    _GtkRangeClass.get_range_border$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_range_border$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_range_border"));
    public static VarHandle get_range_border$VH() {
        return _GtkRangeClass.get_range_border$VH;
    }
    public static MemoryAddress get_range_border$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkRangeClass.get_range_border$VH.get(seg);
    }
    public static void get_range_border$set( MemorySegment seg, MemoryAddress x) {
        _GtkRangeClass.get_range_border$VH.set(seg, x);
    }
    public static MemoryAddress get_range_border$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkRangeClass.get_range_border$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_range_border$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkRangeClass.get_range_border$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_range_border get_range_border (MemorySegment segment, MemorySession session) {
        return get_range_border.ofAddress(get_range_border$get(segment), session);
    }
    static final FunctionDescriptor change_value$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT
    );
    static final MethodHandle change_value$MH = RuntimeHelper.downcallHandle(
        _GtkRangeClass.change_value$FUNC
    );
    public interface change_value {

        int apply(java.lang.foreign.MemoryAddress _x0, int _x1, double _x2);
        static MemorySegment allocate(change_value fi, MemorySession session) {
            return RuntimeHelper.upcallStub(change_value.class, fi, _GtkRangeClass.change_value$FUNC, session);
        }
        static change_value ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1, double __x2) -> {
                try {
                    return (int)_GtkRangeClass.change_value$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle change_value$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("change_value"));
    public static VarHandle change_value$VH() {
        return _GtkRangeClass.change_value$VH;
    }
    public static MemoryAddress change_value$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkRangeClass.change_value$VH.get(seg);
    }
    public static void change_value$set( MemorySegment seg, MemoryAddress x) {
        _GtkRangeClass.change_value$VH.set(seg, x);
    }
    public static MemoryAddress change_value$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkRangeClass.change_value$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void change_value$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkRangeClass.change_value$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static change_value change_value (MemorySegment segment, MemorySession session) {
        return change_value.ofAddress(change_value$get(segment), session);
    }
    public static MemorySegment padding$slice(MemorySegment seg) {
        return seg.asSlice(448, 64);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


