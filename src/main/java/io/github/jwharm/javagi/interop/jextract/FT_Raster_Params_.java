// Generated by jextract

package io.github.jwharm.javagi.interop.jextract;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class FT_Raster_Params_ {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("target"),
        Constants$root.C_POINTER$LAYOUT.withName("source"),
        Constants$root.C_INT$LAYOUT.withName("flags"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("gray_spans"),
        Constants$root.C_POINTER$LAYOUT.withName("black_spans"),
        Constants$root.C_POINTER$LAYOUT.withName("bit_test"),
        Constants$root.C_POINTER$LAYOUT.withName("bit_set"),
        Constants$root.C_POINTER$LAYOUT.withName("user"),
        MemoryLayout.structLayout(
            Constants$root.C_LONG_LONG$LAYOUT.withName("xMin"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("yMin"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("xMax"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("yMax")
        ).withName("clip_box")
    ).withName("FT_Raster_Params_");
    public static MemoryLayout $LAYOUT() {
        return FT_Raster_Params_.$struct$LAYOUT;
    }
    static final VarHandle target$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("target"));
    public static VarHandle target$VH() {
        return FT_Raster_Params_.target$VH;
    }
    public static MemoryAddress target$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)FT_Raster_Params_.target$VH.get(seg);
    }
    public static void target$set( MemorySegment seg, MemoryAddress x) {
        FT_Raster_Params_.target$VH.set(seg, x);
    }
    public static MemoryAddress target$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)FT_Raster_Params_.target$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void target$set(MemorySegment seg, long index, MemoryAddress x) {
        FT_Raster_Params_.target$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle source$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("source"));
    public static VarHandle source$VH() {
        return FT_Raster_Params_.source$VH;
    }
    public static MemoryAddress source$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)FT_Raster_Params_.source$VH.get(seg);
    }
    public static void source$set( MemorySegment seg, MemoryAddress x) {
        FT_Raster_Params_.source$VH.set(seg, x);
    }
    public static MemoryAddress source$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)FT_Raster_Params_.source$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void source$set(MemorySegment seg, long index, MemoryAddress x) {
        FT_Raster_Params_.source$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle flags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("flags"));
    public static VarHandle flags$VH() {
        return FT_Raster_Params_.flags$VH;
    }
    public static int flags$get(MemorySegment seg) {
        return (int)FT_Raster_Params_.flags$VH.get(seg);
    }
    public static void flags$set( MemorySegment seg, int x) {
        FT_Raster_Params_.flags$VH.set(seg, x);
    }
    public static int flags$get(MemorySegment seg, long index) {
        return (int)FT_Raster_Params_.flags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void flags$set(MemorySegment seg, long index, int x) {
        FT_Raster_Params_.flags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle gray_spans$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("gray_spans"));
    public static VarHandle gray_spans$VH() {
        return FT_Raster_Params_.gray_spans$VH;
    }
    public static MemoryAddress gray_spans$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)FT_Raster_Params_.gray_spans$VH.get(seg);
    }
    public static void gray_spans$set( MemorySegment seg, MemoryAddress x) {
        FT_Raster_Params_.gray_spans$VH.set(seg, x);
    }
    public static MemoryAddress gray_spans$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)FT_Raster_Params_.gray_spans$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void gray_spans$set(MemorySegment seg, long index, MemoryAddress x) {
        FT_Raster_Params_.gray_spans$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static FT_SpanFunc gray_spans (MemorySegment segment, MemorySession session) {
        return FT_SpanFunc.ofAddress(gray_spans$get(segment), session);
    }
    static final VarHandle black_spans$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("black_spans"));
    public static VarHandle black_spans$VH() {
        return FT_Raster_Params_.black_spans$VH;
    }
    public static MemoryAddress black_spans$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)FT_Raster_Params_.black_spans$VH.get(seg);
    }
    public static void black_spans$set( MemorySegment seg, MemoryAddress x) {
        FT_Raster_Params_.black_spans$VH.set(seg, x);
    }
    public static MemoryAddress black_spans$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)FT_Raster_Params_.black_spans$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void black_spans$set(MemorySegment seg, long index, MemoryAddress x) {
        FT_Raster_Params_.black_spans$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static FT_SpanFunc black_spans (MemorySegment segment, MemorySession session) {
        return FT_SpanFunc.ofAddress(black_spans$get(segment), session);
    }
    static final VarHandle bit_test$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("bit_test"));
    public static VarHandle bit_test$VH() {
        return FT_Raster_Params_.bit_test$VH;
    }
    public static MemoryAddress bit_test$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)FT_Raster_Params_.bit_test$VH.get(seg);
    }
    public static void bit_test$set( MemorySegment seg, MemoryAddress x) {
        FT_Raster_Params_.bit_test$VH.set(seg, x);
    }
    public static MemoryAddress bit_test$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)FT_Raster_Params_.bit_test$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void bit_test$set(MemorySegment seg, long index, MemoryAddress x) {
        FT_Raster_Params_.bit_test$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static FT_Raster_BitTest_Func bit_test (MemorySegment segment, MemorySession session) {
        return FT_Raster_BitTest_Func.ofAddress(bit_test$get(segment), session);
    }
    static final VarHandle bit_set$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("bit_set"));
    public static VarHandle bit_set$VH() {
        return FT_Raster_Params_.bit_set$VH;
    }
    public static MemoryAddress bit_set$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)FT_Raster_Params_.bit_set$VH.get(seg);
    }
    public static void bit_set$set( MemorySegment seg, MemoryAddress x) {
        FT_Raster_Params_.bit_set$VH.set(seg, x);
    }
    public static MemoryAddress bit_set$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)FT_Raster_Params_.bit_set$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void bit_set$set(MemorySegment seg, long index, MemoryAddress x) {
        FT_Raster_Params_.bit_set$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static FT_Raster_BitSet_Func bit_set (MemorySegment segment, MemorySession session) {
        return FT_Raster_BitSet_Func.ofAddress(bit_set$get(segment), session);
    }
    static final VarHandle user$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("user"));
    public static VarHandle user$VH() {
        return FT_Raster_Params_.user$VH;
    }
    public static MemoryAddress user$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)FT_Raster_Params_.user$VH.get(seg);
    }
    public static void user$set( MemorySegment seg, MemoryAddress x) {
        FT_Raster_Params_.user$VH.set(seg, x);
    }
    public static MemoryAddress user$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)FT_Raster_Params_.user$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void user$set(MemorySegment seg, long index, MemoryAddress x) {
        FT_Raster_Params_.user$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment clip_box$slice(MemorySegment seg) {
        return seg.asSlice(64, 32);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


