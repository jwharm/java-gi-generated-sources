// Generated by jextract

package io.github.jwharm.javagi.interop.jextract;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public interface GdkPixbufModuleBeginLoadFunc {

    java.lang.foreign.Addressable apply(java.lang.foreign.MemoryAddress size_func, java.lang.foreign.MemoryAddress prepared_func, java.lang.foreign.MemoryAddress updated_func, java.lang.foreign.MemoryAddress user_data, java.lang.foreign.MemoryAddress error);
    static MemorySegment allocate(GdkPixbufModuleBeginLoadFunc fi, MemorySession session) {
        return RuntimeHelper.upcallStub(GdkPixbufModuleBeginLoadFunc.class, fi, constants$1319.GdkPixbufModuleBeginLoadFunc$FUNC, session);
    }
    static GdkPixbufModuleBeginLoadFunc ofAddress(MemoryAddress addr, MemorySession session) {
        MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
        return (java.lang.foreign.MemoryAddress _size_func, java.lang.foreign.MemoryAddress _prepared_func, java.lang.foreign.MemoryAddress _updated_func, java.lang.foreign.MemoryAddress _user_data, java.lang.foreign.MemoryAddress _error) -> {
            try {
                return (java.lang.foreign.Addressable)(java.lang.foreign.MemoryAddress)constants$1319.GdkPixbufModuleBeginLoadFunc$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)_size_func, (java.lang.foreign.Addressable)_prepared_func, (java.lang.foreign.Addressable)_updated_func, (java.lang.foreign.Addressable)_user_data, (java.lang.foreign.Addressable)_error);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


