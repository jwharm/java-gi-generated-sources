// Generated by jextract

package io.github.jwharm.javagi.interop.jextract;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _GdkPixbufModulePattern {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("prefix"),
        Constants$root.C_POINTER$LAYOUT.withName("mask"),
        Constants$root.C_INT$LAYOUT.withName("relevance"),
        MemoryLayout.paddingLayout(32)
    ).withName("_GdkPixbufModulePattern");
    public static MemoryLayout $LAYOUT() {
        return _GdkPixbufModulePattern.$struct$LAYOUT;
    }
    static final VarHandle prefix$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("prefix"));
    public static VarHandle prefix$VH() {
        return _GdkPixbufModulePattern.prefix$VH;
    }
    public static MemoryAddress prefix$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GdkPixbufModulePattern.prefix$VH.get(seg);
    }
    public static void prefix$set( MemorySegment seg, MemoryAddress x) {
        _GdkPixbufModulePattern.prefix$VH.set(seg, x);
    }
    public static MemoryAddress prefix$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GdkPixbufModulePattern.prefix$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void prefix$set(MemorySegment seg, long index, MemoryAddress x) {
        _GdkPixbufModulePattern.prefix$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle mask$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("mask"));
    public static VarHandle mask$VH() {
        return _GdkPixbufModulePattern.mask$VH;
    }
    public static MemoryAddress mask$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GdkPixbufModulePattern.mask$VH.get(seg);
    }
    public static void mask$set( MemorySegment seg, MemoryAddress x) {
        _GdkPixbufModulePattern.mask$VH.set(seg, x);
    }
    public static MemoryAddress mask$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GdkPixbufModulePattern.mask$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void mask$set(MemorySegment seg, long index, MemoryAddress x) {
        _GdkPixbufModulePattern.mask$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle relevance$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("relevance"));
    public static VarHandle relevance$VH() {
        return _GdkPixbufModulePattern.relevance$VH;
    }
    public static int relevance$get(MemorySegment seg) {
        return (int)_GdkPixbufModulePattern.relevance$VH.get(seg);
    }
    public static void relevance$set( MemorySegment seg, int x) {
        _GdkPixbufModulePattern.relevance$VH.set(seg, x);
    }
    public static int relevance$get(MemorySegment seg, long index) {
        return (int)_GdkPixbufModulePattern.relevance$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void relevance$set(MemorySegment seg, long index, int x) {
        _GdkPixbufModulePattern.relevance$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


