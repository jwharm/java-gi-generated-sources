// Generated by jextract

package io.github.jwharm.javagi.interop.jextract;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public interface GtkCustomMeasureFunc {

    void apply(java.lang.foreign.MemoryAddress widget, int orientation, int for_size, java.lang.foreign.MemoryAddress minimum, java.lang.foreign.MemoryAddress natural, java.lang.foreign.MemoryAddress minimum_baseline, java.lang.foreign.MemoryAddress natural_baseline);
    static MemorySegment allocate(GtkCustomMeasureFunc fi, MemorySession session) {
        return RuntimeHelper.upcallStub(GtkCustomMeasureFunc.class, fi, constants$2024.GtkCustomMeasureFunc$FUNC, session);
    }
    static GtkCustomMeasureFunc ofAddress(MemoryAddress addr, MemorySession session) {
        MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
        return (java.lang.foreign.MemoryAddress _widget, int _orientation, int _for_size, java.lang.foreign.MemoryAddress _minimum, java.lang.foreign.MemoryAddress _natural, java.lang.foreign.MemoryAddress _minimum_baseline, java.lang.foreign.MemoryAddress _natural_baseline) -> {
            try {
                constants$2025.GtkCustomMeasureFunc$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)_widget, _orientation, _for_size, (java.lang.foreign.Addressable)_minimum, (java.lang.foreign.Addressable)_natural, (java.lang.foreign.Addressable)_minimum_baseline, (java.lang.foreign.Addressable)_natural_baseline);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


