// Generated by jextract

package io.github.jwharm.javagi.interop.jextract;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class FT_MemoryRec_ {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("user"),
        Constants$root.C_POINTER$LAYOUT.withName("alloc"),
        Constants$root.C_POINTER$LAYOUT.withName("free"),
        Constants$root.C_POINTER$LAYOUT.withName("realloc")
    ).withName("FT_MemoryRec_");
    public static MemoryLayout $LAYOUT() {
        return FT_MemoryRec_.$struct$LAYOUT;
    }
    static final VarHandle user$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("user"));
    public static VarHandle user$VH() {
        return FT_MemoryRec_.user$VH;
    }
    public static MemoryAddress user$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)FT_MemoryRec_.user$VH.get(seg);
    }
    public static void user$set( MemorySegment seg, MemoryAddress x) {
        FT_MemoryRec_.user$VH.set(seg, x);
    }
    public static MemoryAddress user$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)FT_MemoryRec_.user$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void user$set(MemorySegment seg, long index, MemoryAddress x) {
        FT_MemoryRec_.user$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle alloc$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("alloc"));
    public static VarHandle alloc$VH() {
        return FT_MemoryRec_.alloc$VH;
    }
    public static MemoryAddress alloc$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)FT_MemoryRec_.alloc$VH.get(seg);
    }
    public static void alloc$set( MemorySegment seg, MemoryAddress x) {
        FT_MemoryRec_.alloc$VH.set(seg, x);
    }
    public static MemoryAddress alloc$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)FT_MemoryRec_.alloc$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void alloc$set(MemorySegment seg, long index, MemoryAddress x) {
        FT_MemoryRec_.alloc$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static FT_Alloc_Func alloc (MemorySegment segment, MemorySession session) {
        return FT_Alloc_Func.ofAddress(alloc$get(segment), session);
    }
    static final VarHandle free$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("free"));
    public static VarHandle free$VH() {
        return FT_MemoryRec_.free$VH;
    }
    public static MemoryAddress free$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)FT_MemoryRec_.free$VH.get(seg);
    }
    public static void free$set( MemorySegment seg, MemoryAddress x) {
        FT_MemoryRec_.free$VH.set(seg, x);
    }
    public static MemoryAddress free$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)FT_MemoryRec_.free$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void free$set(MemorySegment seg, long index, MemoryAddress x) {
        FT_MemoryRec_.free$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static FT_Free_Func free (MemorySegment segment, MemorySession session) {
        return FT_Free_Func.ofAddress(free$get(segment), session);
    }
    static final VarHandle realloc$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("realloc"));
    public static VarHandle realloc$VH() {
        return FT_MemoryRec_.realloc$VH;
    }
    public static MemoryAddress realloc$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)FT_MemoryRec_.realloc$VH.get(seg);
    }
    public static void realloc$set( MemorySegment seg, MemoryAddress x) {
        FT_MemoryRec_.realloc$VH.set(seg, x);
    }
    public static MemoryAddress realloc$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)FT_MemoryRec_.realloc$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void realloc$set(MemorySegment seg, long index, MemoryAddress x) {
        FT_MemoryRec_.realloc$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static FT_Realloc_Func realloc (MemorySegment segment, MemorySession session) {
        return FT_Realloc_Func.ofAddress(realloc$get(segment), session);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


