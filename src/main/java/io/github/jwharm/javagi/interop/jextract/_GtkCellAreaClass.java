// Generated by jextract

package io.github.jwharm.javagi.interop.jextract;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _GtkCellAreaClass {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG_LONG$LAYOUT.withName("g_type")
            ).withName("g_type_class"),
            Constants$root.C_POINTER$LAYOUT.withName("construct_properties"),
            Constants$root.C_POINTER$LAYOUT.withName("constructor"),
            Constants$root.C_POINTER$LAYOUT.withName("set_property"),
            Constants$root.C_POINTER$LAYOUT.withName("get_property"),
            Constants$root.C_POINTER$LAYOUT.withName("dispose"),
            Constants$root.C_POINTER$LAYOUT.withName("finalize"),
            Constants$root.C_POINTER$LAYOUT.withName("dispatch_properties_changed"),
            Constants$root.C_POINTER$LAYOUT.withName("notify"),
            Constants$root.C_POINTER$LAYOUT.withName("constructed"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("flags"),
            MemoryLayout.sequenceLayout(6, Constants$root.C_POINTER$LAYOUT).withName("pdummy")
        ).withName("parent_class"),
        Constants$root.C_POINTER$LAYOUT.withName("add"),
        Constants$root.C_POINTER$LAYOUT.withName("remove"),
        Constants$root.C_POINTER$LAYOUT.withName("foreach"),
        Constants$root.C_POINTER$LAYOUT.withName("foreach_alloc"),
        Constants$root.C_POINTER$LAYOUT.withName("event"),
        Constants$root.C_POINTER$LAYOUT.withName("snapshot"),
        Constants$root.C_POINTER$LAYOUT.withName("apply_attributes"),
        Constants$root.C_POINTER$LAYOUT.withName("create_context"),
        Constants$root.C_POINTER$LAYOUT.withName("copy_context"),
        Constants$root.C_POINTER$LAYOUT.withName("get_request_mode"),
        Constants$root.C_POINTER$LAYOUT.withName("get_preferred_width"),
        Constants$root.C_POINTER$LAYOUT.withName("get_preferred_height_for_width"),
        Constants$root.C_POINTER$LAYOUT.withName("get_preferred_height"),
        Constants$root.C_POINTER$LAYOUT.withName("get_preferred_width_for_height"),
        Constants$root.C_POINTER$LAYOUT.withName("set_cell_property"),
        Constants$root.C_POINTER$LAYOUT.withName("get_cell_property"),
        Constants$root.C_POINTER$LAYOUT.withName("focus"),
        Constants$root.C_POINTER$LAYOUT.withName("is_activatable"),
        Constants$root.C_POINTER$LAYOUT.withName("activate"),
        MemoryLayout.sequenceLayout(8, Constants$root.C_POINTER$LAYOUT).withName("padding")
    ).withName("_GtkCellAreaClass");
    public static MemoryLayout $LAYOUT() {
        return _GtkCellAreaClass.$struct$LAYOUT;
    }
    public static MemorySegment parent_class$slice(MemorySegment seg) {
        return seg.asSlice(0, 136);
    }
    static final FunctionDescriptor add$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle add$MH = RuntimeHelper.downcallHandle(
        _GtkCellAreaClass.add$FUNC
    );
    public interface add {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(add fi, MemorySession session) {
            return RuntimeHelper.upcallStub(add.class, fi, _GtkCellAreaClass.add$FUNC, session);
        }
        static add ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    _GtkCellAreaClass.add$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle add$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("add"));
    public static VarHandle add$VH() {
        return _GtkCellAreaClass.add$VH;
    }
    public static MemoryAddress add$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkCellAreaClass.add$VH.get(seg);
    }
    public static void add$set( MemorySegment seg, MemoryAddress x) {
        _GtkCellAreaClass.add$VH.set(seg, x);
    }
    public static MemoryAddress add$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkCellAreaClass.add$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void add$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkCellAreaClass.add$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static add add (MemorySegment segment, MemorySession session) {
        return add.ofAddress(add$get(segment), session);
    }
    static final FunctionDescriptor remove$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle remove$MH = RuntimeHelper.downcallHandle(
        _GtkCellAreaClass.remove$FUNC
    );
    public interface remove {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(remove fi, MemorySession session) {
            return RuntimeHelper.upcallStub(remove.class, fi, _GtkCellAreaClass.remove$FUNC, session);
        }
        static remove ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    _GtkCellAreaClass.remove$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle remove$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("remove"));
    public static VarHandle remove$VH() {
        return _GtkCellAreaClass.remove$VH;
    }
    public static MemoryAddress remove$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkCellAreaClass.remove$VH.get(seg);
    }
    public static void remove$set( MemorySegment seg, MemoryAddress x) {
        _GtkCellAreaClass.remove$VH.set(seg, x);
    }
    public static MemoryAddress remove$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkCellAreaClass.remove$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void remove$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkCellAreaClass.remove$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static remove remove (MemorySegment segment, MemorySession session) {
        return remove.ofAddress(remove$get(segment), session);
    }
    static final FunctionDescriptor foreach$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle foreach$MH = RuntimeHelper.downcallHandle(
        _GtkCellAreaClass.foreach$FUNC
    );
    public interface foreach {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(foreach fi, MemorySession session) {
            return RuntimeHelper.upcallStub(foreach.class, fi, _GtkCellAreaClass.foreach$FUNC, session);
        }
        static foreach ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    _GtkCellAreaClass.foreach$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle foreach$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("foreach"));
    public static VarHandle foreach$VH() {
        return _GtkCellAreaClass.foreach$VH;
    }
    public static MemoryAddress foreach$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkCellAreaClass.foreach$VH.get(seg);
    }
    public static void foreach$set( MemorySegment seg, MemoryAddress x) {
        _GtkCellAreaClass.foreach$VH.set(seg, x);
    }
    public static MemoryAddress foreach$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkCellAreaClass.foreach$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void foreach$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkCellAreaClass.foreach$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static foreach foreach (MemorySegment segment, MemorySession session) {
        return foreach.ofAddress(foreach$get(segment), session);
    }
    static final FunctionDescriptor foreach_alloc$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle foreach_alloc$MH = RuntimeHelper.downcallHandle(
        _GtkCellAreaClass.foreach_alloc$FUNC
    );
    public interface foreach_alloc {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2, java.lang.foreign.MemoryAddress _x3, java.lang.foreign.MemoryAddress _x4, java.lang.foreign.MemoryAddress _x5, java.lang.foreign.MemoryAddress _x6);
        static MemorySegment allocate(foreach_alloc fi, MemorySession session) {
            return RuntimeHelper.upcallStub(foreach_alloc.class, fi, _GtkCellAreaClass.foreach_alloc$FUNC, session);
        }
        static foreach_alloc ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2, java.lang.foreign.MemoryAddress __x3, java.lang.foreign.MemoryAddress __x4, java.lang.foreign.MemoryAddress __x5, java.lang.foreign.MemoryAddress __x6) -> {
                try {
                    _GtkCellAreaClass.foreach_alloc$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2, (java.lang.foreign.Addressable)__x3, (java.lang.foreign.Addressable)__x4, (java.lang.foreign.Addressable)__x5, (java.lang.foreign.Addressable)__x6);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle foreach_alloc$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("foreach_alloc"));
    public static VarHandle foreach_alloc$VH() {
        return _GtkCellAreaClass.foreach_alloc$VH;
    }
    public static MemoryAddress foreach_alloc$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkCellAreaClass.foreach_alloc$VH.get(seg);
    }
    public static void foreach_alloc$set( MemorySegment seg, MemoryAddress x) {
        _GtkCellAreaClass.foreach_alloc$VH.set(seg, x);
    }
    public static MemoryAddress foreach_alloc$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkCellAreaClass.foreach_alloc$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void foreach_alloc$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkCellAreaClass.foreach_alloc$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static foreach_alloc foreach_alloc (MemorySegment segment, MemorySession session) {
        return foreach_alloc.ofAddress(foreach_alloc$get(segment), session);
    }
    static final FunctionDescriptor event$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle event$MH = RuntimeHelper.downcallHandle(
        _GtkCellAreaClass.event$FUNC
    );
    public interface event {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2, java.lang.foreign.MemoryAddress _x3, java.lang.foreign.MemoryAddress _x4, int _x5);
        static MemorySegment allocate(event fi, MemorySession session) {
            return RuntimeHelper.upcallStub(event.class, fi, _GtkCellAreaClass.event$FUNC, session);
        }
        static event ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2, java.lang.foreign.MemoryAddress __x3, java.lang.foreign.MemoryAddress __x4, int __x5) -> {
                try {
                    return (int)_GtkCellAreaClass.event$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2, (java.lang.foreign.Addressable)__x3, (java.lang.foreign.Addressable)__x4, __x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle event$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("event"));
    public static VarHandle event$VH() {
        return _GtkCellAreaClass.event$VH;
    }
    public static MemoryAddress event$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkCellAreaClass.event$VH.get(seg);
    }
    public static void event$set( MemorySegment seg, MemoryAddress x) {
        _GtkCellAreaClass.event$VH.set(seg, x);
    }
    public static MemoryAddress event$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkCellAreaClass.event$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void event$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkCellAreaClass.event$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static event event (MemorySegment segment, MemorySession session) {
        return event.ofAddress(event$get(segment), session);
    }
    static final FunctionDescriptor snapshot$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle snapshot$MH = RuntimeHelper.downcallHandle(
        _GtkCellAreaClass.snapshot$FUNC
    );
    public interface snapshot {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2, java.lang.foreign.MemoryAddress _x3, java.lang.foreign.MemoryAddress _x4, java.lang.foreign.MemoryAddress _x5, int _x6, int _x7);
        static MemorySegment allocate(snapshot fi, MemorySession session) {
            return RuntimeHelper.upcallStub(snapshot.class, fi, _GtkCellAreaClass.snapshot$FUNC, session);
        }
        static snapshot ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2, java.lang.foreign.MemoryAddress __x3, java.lang.foreign.MemoryAddress __x4, java.lang.foreign.MemoryAddress __x5, int __x6, int __x7) -> {
                try {
                    _GtkCellAreaClass.snapshot$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2, (java.lang.foreign.Addressable)__x3, (java.lang.foreign.Addressable)__x4, (java.lang.foreign.Addressable)__x5, __x6, __x7);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle snapshot$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("snapshot"));
    public static VarHandle snapshot$VH() {
        return _GtkCellAreaClass.snapshot$VH;
    }
    public static MemoryAddress snapshot$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkCellAreaClass.snapshot$VH.get(seg);
    }
    public static void snapshot$set( MemorySegment seg, MemoryAddress x) {
        _GtkCellAreaClass.snapshot$VH.set(seg, x);
    }
    public static MemoryAddress snapshot$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkCellAreaClass.snapshot$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void snapshot$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkCellAreaClass.snapshot$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static snapshot snapshot (MemorySegment segment, MemorySession session) {
        return snapshot.ofAddress(snapshot$get(segment), session);
    }
    static final FunctionDescriptor apply_attributes$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle apply_attributes$MH = RuntimeHelper.downcallHandle(
        _GtkCellAreaClass.apply_attributes$FUNC
    );
    public interface apply_attributes {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2, int _x3, int _x4);
        static MemorySegment allocate(apply_attributes fi, MemorySession session) {
            return RuntimeHelper.upcallStub(apply_attributes.class, fi, _GtkCellAreaClass.apply_attributes$FUNC, session);
        }
        static apply_attributes ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2, int __x3, int __x4) -> {
                try {
                    _GtkCellAreaClass.apply_attributes$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle apply_attributes$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("apply_attributes"));
    public static VarHandle apply_attributes$VH() {
        return _GtkCellAreaClass.apply_attributes$VH;
    }
    public static MemoryAddress apply_attributes$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkCellAreaClass.apply_attributes$VH.get(seg);
    }
    public static void apply_attributes$set( MemorySegment seg, MemoryAddress x) {
        _GtkCellAreaClass.apply_attributes$VH.set(seg, x);
    }
    public static MemoryAddress apply_attributes$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkCellAreaClass.apply_attributes$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void apply_attributes$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkCellAreaClass.apply_attributes$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static apply_attributes apply_attributes (MemorySegment segment, MemorySession session) {
        return apply_attributes.ofAddress(apply_attributes$get(segment), session);
    }
    static final FunctionDescriptor create_context$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle create_context$MH = RuntimeHelper.downcallHandle(
        _GtkCellAreaClass.create_context$FUNC
    );
    public interface create_context {

        java.lang.foreign.Addressable apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(create_context fi, MemorySession session) {
            return RuntimeHelper.upcallStub(create_context.class, fi, _GtkCellAreaClass.create_context$FUNC, session);
        }
        static create_context ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (java.lang.foreign.Addressable)(java.lang.foreign.MemoryAddress)_GtkCellAreaClass.create_context$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle create_context$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("create_context"));
    public static VarHandle create_context$VH() {
        return _GtkCellAreaClass.create_context$VH;
    }
    public static MemoryAddress create_context$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkCellAreaClass.create_context$VH.get(seg);
    }
    public static void create_context$set( MemorySegment seg, MemoryAddress x) {
        _GtkCellAreaClass.create_context$VH.set(seg, x);
    }
    public static MemoryAddress create_context$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkCellAreaClass.create_context$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void create_context$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkCellAreaClass.create_context$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static create_context create_context (MemorySegment segment, MemorySession session) {
        return create_context.ofAddress(create_context$get(segment), session);
    }
    static final FunctionDescriptor copy_context$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle copy_context$MH = RuntimeHelper.downcallHandle(
        _GtkCellAreaClass.copy_context$FUNC
    );
    public interface copy_context {

        java.lang.foreign.Addressable apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(copy_context fi, MemorySession session) {
            return RuntimeHelper.upcallStub(copy_context.class, fi, _GtkCellAreaClass.copy_context$FUNC, session);
        }
        static copy_context ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (java.lang.foreign.Addressable)(java.lang.foreign.MemoryAddress)_GtkCellAreaClass.copy_context$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle copy_context$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("copy_context"));
    public static VarHandle copy_context$VH() {
        return _GtkCellAreaClass.copy_context$VH;
    }
    public static MemoryAddress copy_context$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkCellAreaClass.copy_context$VH.get(seg);
    }
    public static void copy_context$set( MemorySegment seg, MemoryAddress x) {
        _GtkCellAreaClass.copy_context$VH.set(seg, x);
    }
    public static MemoryAddress copy_context$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkCellAreaClass.copy_context$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void copy_context$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkCellAreaClass.copy_context$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static copy_context copy_context (MemorySegment segment, MemorySession session) {
        return copy_context.ofAddress(copy_context$get(segment), session);
    }
    static final FunctionDescriptor get_request_mode$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_request_mode$MH = RuntimeHelper.downcallHandle(
        _GtkCellAreaClass.get_request_mode$FUNC
    );
    public interface get_request_mode {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(get_request_mode fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_request_mode.class, fi, _GtkCellAreaClass.get_request_mode$FUNC, session);
        }
        static get_request_mode ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)_GtkCellAreaClass.get_request_mode$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_request_mode$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_request_mode"));
    public static VarHandle get_request_mode$VH() {
        return _GtkCellAreaClass.get_request_mode$VH;
    }
    public static MemoryAddress get_request_mode$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkCellAreaClass.get_request_mode$VH.get(seg);
    }
    public static void get_request_mode$set( MemorySegment seg, MemoryAddress x) {
        _GtkCellAreaClass.get_request_mode$VH.set(seg, x);
    }
    public static MemoryAddress get_request_mode$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkCellAreaClass.get_request_mode$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_request_mode$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkCellAreaClass.get_request_mode$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_request_mode get_request_mode (MemorySegment segment, MemorySession session) {
        return get_request_mode.ofAddress(get_request_mode$get(segment), session);
    }
    static final FunctionDescriptor get_preferred_width$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_preferred_width$MH = RuntimeHelper.downcallHandle(
        _GtkCellAreaClass.get_preferred_width$FUNC
    );
    public interface get_preferred_width {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2, java.lang.foreign.MemoryAddress _x3, java.lang.foreign.MemoryAddress _x4);
        static MemorySegment allocate(get_preferred_width fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_preferred_width.class, fi, _GtkCellAreaClass.get_preferred_width$FUNC, session);
        }
        static get_preferred_width ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2, java.lang.foreign.MemoryAddress __x3, java.lang.foreign.MemoryAddress __x4) -> {
                try {
                    _GtkCellAreaClass.get_preferred_width$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2, (java.lang.foreign.Addressable)__x3, (java.lang.foreign.Addressable)__x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_preferred_width$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_preferred_width"));
    public static VarHandle get_preferred_width$VH() {
        return _GtkCellAreaClass.get_preferred_width$VH;
    }
    public static MemoryAddress get_preferred_width$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkCellAreaClass.get_preferred_width$VH.get(seg);
    }
    public static void get_preferred_width$set( MemorySegment seg, MemoryAddress x) {
        _GtkCellAreaClass.get_preferred_width$VH.set(seg, x);
    }
    public static MemoryAddress get_preferred_width$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkCellAreaClass.get_preferred_width$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_preferred_width$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkCellAreaClass.get_preferred_width$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_preferred_width get_preferred_width (MemorySegment segment, MemorySession session) {
        return get_preferred_width.ofAddress(get_preferred_width$get(segment), session);
    }
    static final FunctionDescriptor get_preferred_height_for_width$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_preferred_height_for_width$MH = RuntimeHelper.downcallHandle(
        _GtkCellAreaClass.get_preferred_height_for_width$FUNC
    );
    public interface get_preferred_height_for_width {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2, int _x3, java.lang.foreign.MemoryAddress _x4, java.lang.foreign.MemoryAddress _x5);
        static MemorySegment allocate(get_preferred_height_for_width fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_preferred_height_for_width.class, fi, _GtkCellAreaClass.get_preferred_height_for_width$FUNC, session);
        }
        static get_preferred_height_for_width ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2, int __x3, java.lang.foreign.MemoryAddress __x4, java.lang.foreign.MemoryAddress __x5) -> {
                try {
                    _GtkCellAreaClass.get_preferred_height_for_width$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2, __x3, (java.lang.foreign.Addressable)__x4, (java.lang.foreign.Addressable)__x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_preferred_height_for_width$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_preferred_height_for_width"));
    public static VarHandle get_preferred_height_for_width$VH() {
        return _GtkCellAreaClass.get_preferred_height_for_width$VH;
    }
    public static MemoryAddress get_preferred_height_for_width$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkCellAreaClass.get_preferred_height_for_width$VH.get(seg);
    }
    public static void get_preferred_height_for_width$set( MemorySegment seg, MemoryAddress x) {
        _GtkCellAreaClass.get_preferred_height_for_width$VH.set(seg, x);
    }
    public static MemoryAddress get_preferred_height_for_width$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkCellAreaClass.get_preferred_height_for_width$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_preferred_height_for_width$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkCellAreaClass.get_preferred_height_for_width$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_preferred_height_for_width get_preferred_height_for_width (MemorySegment segment, MemorySession session) {
        return get_preferred_height_for_width.ofAddress(get_preferred_height_for_width$get(segment), session);
    }
    static final FunctionDescriptor get_preferred_height$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_preferred_height$MH = RuntimeHelper.downcallHandle(
        _GtkCellAreaClass.get_preferred_height$FUNC
    );
    public interface get_preferred_height {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2, java.lang.foreign.MemoryAddress _x3, java.lang.foreign.MemoryAddress _x4);
        static MemorySegment allocate(get_preferred_height fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_preferred_height.class, fi, _GtkCellAreaClass.get_preferred_height$FUNC, session);
        }
        static get_preferred_height ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2, java.lang.foreign.MemoryAddress __x3, java.lang.foreign.MemoryAddress __x4) -> {
                try {
                    _GtkCellAreaClass.get_preferred_height$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2, (java.lang.foreign.Addressable)__x3, (java.lang.foreign.Addressable)__x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_preferred_height$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_preferred_height"));
    public static VarHandle get_preferred_height$VH() {
        return _GtkCellAreaClass.get_preferred_height$VH;
    }
    public static MemoryAddress get_preferred_height$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkCellAreaClass.get_preferred_height$VH.get(seg);
    }
    public static void get_preferred_height$set( MemorySegment seg, MemoryAddress x) {
        _GtkCellAreaClass.get_preferred_height$VH.set(seg, x);
    }
    public static MemoryAddress get_preferred_height$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkCellAreaClass.get_preferred_height$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_preferred_height$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkCellAreaClass.get_preferred_height$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_preferred_height get_preferred_height (MemorySegment segment, MemorySession session) {
        return get_preferred_height.ofAddress(get_preferred_height$get(segment), session);
    }
    static final FunctionDescriptor get_preferred_width_for_height$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_preferred_width_for_height$MH = RuntimeHelper.downcallHandle(
        _GtkCellAreaClass.get_preferred_width_for_height$FUNC
    );
    public interface get_preferred_width_for_height {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2, int _x3, java.lang.foreign.MemoryAddress _x4, java.lang.foreign.MemoryAddress _x5);
        static MemorySegment allocate(get_preferred_width_for_height fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_preferred_width_for_height.class, fi, _GtkCellAreaClass.get_preferred_width_for_height$FUNC, session);
        }
        static get_preferred_width_for_height ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2, int __x3, java.lang.foreign.MemoryAddress __x4, java.lang.foreign.MemoryAddress __x5) -> {
                try {
                    _GtkCellAreaClass.get_preferred_width_for_height$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2, __x3, (java.lang.foreign.Addressable)__x4, (java.lang.foreign.Addressable)__x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_preferred_width_for_height$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_preferred_width_for_height"));
    public static VarHandle get_preferred_width_for_height$VH() {
        return _GtkCellAreaClass.get_preferred_width_for_height$VH;
    }
    public static MemoryAddress get_preferred_width_for_height$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkCellAreaClass.get_preferred_width_for_height$VH.get(seg);
    }
    public static void get_preferred_width_for_height$set( MemorySegment seg, MemoryAddress x) {
        _GtkCellAreaClass.get_preferred_width_for_height$VH.set(seg, x);
    }
    public static MemoryAddress get_preferred_width_for_height$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkCellAreaClass.get_preferred_width_for_height$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_preferred_width_for_height$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkCellAreaClass.get_preferred_width_for_height$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_preferred_width_for_height get_preferred_width_for_height (MemorySegment segment, MemorySession session) {
        return get_preferred_width_for_height.ofAddress(get_preferred_width_for_height$get(segment), session);
    }
    static final FunctionDescriptor set_cell_property$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle set_cell_property$MH = RuntimeHelper.downcallHandle(
        _GtkCellAreaClass.set_cell_property$FUNC
    );
    public interface set_cell_property {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, int _x2, java.lang.foreign.MemoryAddress _x3, java.lang.foreign.MemoryAddress _x4);
        static MemorySegment allocate(set_cell_property fi, MemorySession session) {
            return RuntimeHelper.upcallStub(set_cell_property.class, fi, _GtkCellAreaClass.set_cell_property$FUNC, session);
        }
        static set_cell_property ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, int __x2, java.lang.foreign.MemoryAddress __x3, java.lang.foreign.MemoryAddress __x4) -> {
                try {
                    _GtkCellAreaClass.set_cell_property$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, __x2, (java.lang.foreign.Addressable)__x3, (java.lang.foreign.Addressable)__x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle set_cell_property$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("set_cell_property"));
    public static VarHandle set_cell_property$VH() {
        return _GtkCellAreaClass.set_cell_property$VH;
    }
    public static MemoryAddress set_cell_property$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkCellAreaClass.set_cell_property$VH.get(seg);
    }
    public static void set_cell_property$set( MemorySegment seg, MemoryAddress x) {
        _GtkCellAreaClass.set_cell_property$VH.set(seg, x);
    }
    public static MemoryAddress set_cell_property$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkCellAreaClass.set_cell_property$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void set_cell_property$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkCellAreaClass.set_cell_property$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static set_cell_property set_cell_property (MemorySegment segment, MemorySession session) {
        return set_cell_property.ofAddress(set_cell_property$get(segment), session);
    }
    static final FunctionDescriptor get_cell_property$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_cell_property$MH = RuntimeHelper.downcallHandle(
        _GtkCellAreaClass.get_cell_property$FUNC
    );
    public interface get_cell_property {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, int _x2, java.lang.foreign.MemoryAddress _x3, java.lang.foreign.MemoryAddress _x4);
        static MemorySegment allocate(get_cell_property fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_cell_property.class, fi, _GtkCellAreaClass.get_cell_property$FUNC, session);
        }
        static get_cell_property ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, int __x2, java.lang.foreign.MemoryAddress __x3, java.lang.foreign.MemoryAddress __x4) -> {
                try {
                    _GtkCellAreaClass.get_cell_property$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, __x2, (java.lang.foreign.Addressable)__x3, (java.lang.foreign.Addressable)__x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_cell_property$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_cell_property"));
    public static VarHandle get_cell_property$VH() {
        return _GtkCellAreaClass.get_cell_property$VH;
    }
    public static MemoryAddress get_cell_property$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkCellAreaClass.get_cell_property$VH.get(seg);
    }
    public static void get_cell_property$set( MemorySegment seg, MemoryAddress x) {
        _GtkCellAreaClass.get_cell_property$VH.set(seg, x);
    }
    public static MemoryAddress get_cell_property$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkCellAreaClass.get_cell_property$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_cell_property$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkCellAreaClass.get_cell_property$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_cell_property get_cell_property (MemorySegment segment, MemorySession session) {
        return get_cell_property.ofAddress(get_cell_property$get(segment), session);
    }
    static final FunctionDescriptor focus$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle focus$MH = RuntimeHelper.downcallHandle(
        _GtkCellAreaClass.focus$FUNC
    );
    public interface focus {

        int apply(java.lang.foreign.MemoryAddress _x0, int _x1);
        static MemorySegment allocate(focus fi, MemorySession session) {
            return RuntimeHelper.upcallStub(focus.class, fi, _GtkCellAreaClass.focus$FUNC, session);
        }
        static focus ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1) -> {
                try {
                    return (int)_GtkCellAreaClass.focus$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle focus$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("focus"));
    public static VarHandle focus$VH() {
        return _GtkCellAreaClass.focus$VH;
    }
    public static MemoryAddress focus$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkCellAreaClass.focus$VH.get(seg);
    }
    public static void focus$set( MemorySegment seg, MemoryAddress x) {
        _GtkCellAreaClass.focus$VH.set(seg, x);
    }
    public static MemoryAddress focus$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkCellAreaClass.focus$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void focus$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkCellAreaClass.focus$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static focus focus (MemorySegment segment, MemorySession session) {
        return focus.ofAddress(focus$get(segment), session);
    }
    static final FunctionDescriptor is_activatable$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle is_activatable$MH = RuntimeHelper.downcallHandle(
        _GtkCellAreaClass.is_activatable$FUNC
    );
    public interface is_activatable {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(is_activatable fi, MemorySession session) {
            return RuntimeHelper.upcallStub(is_activatable.class, fi, _GtkCellAreaClass.is_activatable$FUNC, session);
        }
        static is_activatable ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)_GtkCellAreaClass.is_activatable$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle is_activatable$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("is_activatable"));
    public static VarHandle is_activatable$VH() {
        return _GtkCellAreaClass.is_activatable$VH;
    }
    public static MemoryAddress is_activatable$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkCellAreaClass.is_activatable$VH.get(seg);
    }
    public static void is_activatable$set( MemorySegment seg, MemoryAddress x) {
        _GtkCellAreaClass.is_activatable$VH.set(seg, x);
    }
    public static MemoryAddress is_activatable$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkCellAreaClass.is_activatable$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void is_activatable$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkCellAreaClass.is_activatable$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static is_activatable is_activatable (MemorySegment segment, MemorySession session) {
        return is_activatable.ofAddress(is_activatable$get(segment), session);
    }
    static final FunctionDescriptor activate$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle activate$MH = RuntimeHelper.downcallHandle(
        _GtkCellAreaClass.activate$FUNC
    );
    public interface activate {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2, java.lang.foreign.MemoryAddress _x3, int _x4, int _x5);
        static MemorySegment allocate(activate fi, MemorySession session) {
            return RuntimeHelper.upcallStub(activate.class, fi, _GtkCellAreaClass.activate$FUNC, session);
        }
        static activate ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2, java.lang.foreign.MemoryAddress __x3, int __x4, int __x5) -> {
                try {
                    return (int)_GtkCellAreaClass.activate$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2, (java.lang.foreign.Addressable)__x3, __x4, __x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle activate$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("activate"));
    public static VarHandle activate$VH() {
        return _GtkCellAreaClass.activate$VH;
    }
    public static MemoryAddress activate$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkCellAreaClass.activate$VH.get(seg);
    }
    public static void activate$set( MemorySegment seg, MemoryAddress x) {
        _GtkCellAreaClass.activate$VH.set(seg, x);
    }
    public static MemoryAddress activate$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkCellAreaClass.activate$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void activate$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkCellAreaClass.activate$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static activate activate (MemorySegment segment, MemorySession session) {
        return activate.ofAddress(activate$get(segment), session);
    }
    public static MemorySegment padding$slice(MemorySegment seg) {
        return seg.asSlice(288, 64);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


