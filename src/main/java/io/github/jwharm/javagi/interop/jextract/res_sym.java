// Generated by jextract

package io.github.jwharm.javagi.interop.jextract;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class res_sym {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_INT$LAYOUT.withName("number"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("name"),
        Constants$root.C_POINTER$LAYOUT.withName("humanname")
    ).withName("res_sym");
    public static MemoryLayout $LAYOUT() {
        return res_sym.$struct$LAYOUT;
    }
    static final VarHandle number$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("number"));
    public static VarHandle number$VH() {
        return res_sym.number$VH;
    }
    public static int number$get(MemorySegment seg) {
        return (int)res_sym.number$VH.get(seg);
    }
    public static void number$set( MemorySegment seg, int x) {
        res_sym.number$VH.set(seg, x);
    }
    public static int number$get(MemorySegment seg, long index) {
        return (int)res_sym.number$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void number$set(MemorySegment seg, long index, int x) {
        res_sym.number$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle name$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("name"));
    public static VarHandle name$VH() {
        return res_sym.name$VH;
    }
    public static MemoryAddress name$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)res_sym.name$VH.get(seg);
    }
    public static void name$set( MemorySegment seg, MemoryAddress x) {
        res_sym.name$VH.set(seg, x);
    }
    public static MemoryAddress name$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)res_sym.name$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void name$set(MemorySegment seg, long index, MemoryAddress x) {
        res_sym.name$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle humanname$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("humanname"));
    public static VarHandle humanname$VH() {
        return res_sym.humanname$VH;
    }
    public static MemoryAddress humanname$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)res_sym.humanname$VH.get(seg);
    }
    public static void humanname$set( MemorySegment seg, MemoryAddress x) {
        res_sym.humanname$VH.set(seg, x);
    }
    public static MemoryAddress humanname$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)res_sym.humanname$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void humanname$set(MemorySegment seg, long index, MemoryAddress x) {
        res_sym.humanname$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


