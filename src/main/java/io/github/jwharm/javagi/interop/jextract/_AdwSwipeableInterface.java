// Generated by jextract

package io.github.jwharm.javagi.interop.jextract;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _AdwSwipeableInterface {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            Constants$root.C_LONG_LONG$LAYOUT.withName("g_type"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("g_instance_type")
        ).withName("parent"),
        Constants$root.C_POINTER$LAYOUT.withName("get_distance"),
        Constants$root.C_POINTER$LAYOUT.withName("get_snap_points"),
        Constants$root.C_POINTER$LAYOUT.withName("get_progress"),
        Constants$root.C_POINTER$LAYOUT.withName("get_cancel_progress"),
        Constants$root.C_POINTER$LAYOUT.withName("get_swipe_area"),
        MemoryLayout.sequenceLayout(4, Constants$root.C_POINTER$LAYOUT).withName("padding")
    ).withName("_AdwSwipeableInterface");
    public static MemoryLayout $LAYOUT() {
        return _AdwSwipeableInterface.$struct$LAYOUT;
    }
    public static MemorySegment parent$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    static final FunctionDescriptor get_distance$FUNC = FunctionDescriptor.of(Constants$root.C_DOUBLE$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_distance$MH = RuntimeHelper.downcallHandle(
        _AdwSwipeableInterface.get_distance$FUNC
    );
    public interface get_distance {

        double apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(get_distance fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_distance.class, fi, _AdwSwipeableInterface.get_distance$FUNC, session);
        }
        static get_distance ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (double)_AdwSwipeableInterface.get_distance$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_distance$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_distance"));
    public static VarHandle get_distance$VH() {
        return _AdwSwipeableInterface.get_distance$VH;
    }
    public static MemoryAddress get_distance$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_AdwSwipeableInterface.get_distance$VH.get(seg);
    }
    public static void get_distance$set( MemorySegment seg, MemoryAddress x) {
        _AdwSwipeableInterface.get_distance$VH.set(seg, x);
    }
    public static MemoryAddress get_distance$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_AdwSwipeableInterface.get_distance$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_distance$set(MemorySegment seg, long index, MemoryAddress x) {
        _AdwSwipeableInterface.get_distance$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_distance get_distance (MemorySegment segment, MemorySession session) {
        return get_distance.ofAddress(get_distance$get(segment), session);
    }
    static final FunctionDescriptor get_snap_points$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_snap_points$MH = RuntimeHelper.downcallHandle(
        _AdwSwipeableInterface.get_snap_points$FUNC
    );
    public interface get_snap_points {

        java.lang.foreign.Addressable apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(get_snap_points fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_snap_points.class, fi, _AdwSwipeableInterface.get_snap_points$FUNC, session);
        }
        static get_snap_points ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (java.lang.foreign.Addressable)(java.lang.foreign.MemoryAddress)_AdwSwipeableInterface.get_snap_points$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_snap_points$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_snap_points"));
    public static VarHandle get_snap_points$VH() {
        return _AdwSwipeableInterface.get_snap_points$VH;
    }
    public static MemoryAddress get_snap_points$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_AdwSwipeableInterface.get_snap_points$VH.get(seg);
    }
    public static void get_snap_points$set( MemorySegment seg, MemoryAddress x) {
        _AdwSwipeableInterface.get_snap_points$VH.set(seg, x);
    }
    public static MemoryAddress get_snap_points$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_AdwSwipeableInterface.get_snap_points$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_snap_points$set(MemorySegment seg, long index, MemoryAddress x) {
        _AdwSwipeableInterface.get_snap_points$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_snap_points get_snap_points (MemorySegment segment, MemorySession session) {
        return get_snap_points.ofAddress(get_snap_points$get(segment), session);
    }
    static final FunctionDescriptor get_progress$FUNC = FunctionDescriptor.of(Constants$root.C_DOUBLE$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_progress$MH = RuntimeHelper.downcallHandle(
        _AdwSwipeableInterface.get_progress$FUNC
    );
    public interface get_progress {

        double apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(get_progress fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_progress.class, fi, _AdwSwipeableInterface.get_progress$FUNC, session);
        }
        static get_progress ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (double)_AdwSwipeableInterface.get_progress$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_progress$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_progress"));
    public static VarHandle get_progress$VH() {
        return _AdwSwipeableInterface.get_progress$VH;
    }
    public static MemoryAddress get_progress$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_AdwSwipeableInterface.get_progress$VH.get(seg);
    }
    public static void get_progress$set( MemorySegment seg, MemoryAddress x) {
        _AdwSwipeableInterface.get_progress$VH.set(seg, x);
    }
    public static MemoryAddress get_progress$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_AdwSwipeableInterface.get_progress$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_progress$set(MemorySegment seg, long index, MemoryAddress x) {
        _AdwSwipeableInterface.get_progress$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_progress get_progress (MemorySegment segment, MemorySession session) {
        return get_progress.ofAddress(get_progress$get(segment), session);
    }
    static final FunctionDescriptor get_cancel_progress$FUNC = FunctionDescriptor.of(Constants$root.C_DOUBLE$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_cancel_progress$MH = RuntimeHelper.downcallHandle(
        _AdwSwipeableInterface.get_cancel_progress$FUNC
    );
    public interface get_cancel_progress {

        double apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(get_cancel_progress fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_cancel_progress.class, fi, _AdwSwipeableInterface.get_cancel_progress$FUNC, session);
        }
        static get_cancel_progress ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (double)_AdwSwipeableInterface.get_cancel_progress$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_cancel_progress$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_cancel_progress"));
    public static VarHandle get_cancel_progress$VH() {
        return _AdwSwipeableInterface.get_cancel_progress$VH;
    }
    public static MemoryAddress get_cancel_progress$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_AdwSwipeableInterface.get_cancel_progress$VH.get(seg);
    }
    public static void get_cancel_progress$set( MemorySegment seg, MemoryAddress x) {
        _AdwSwipeableInterface.get_cancel_progress$VH.set(seg, x);
    }
    public static MemoryAddress get_cancel_progress$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_AdwSwipeableInterface.get_cancel_progress$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_cancel_progress$set(MemorySegment seg, long index, MemoryAddress x) {
        _AdwSwipeableInterface.get_cancel_progress$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_cancel_progress get_cancel_progress (MemorySegment segment, MemorySession session) {
        return get_cancel_progress.ofAddress(get_cancel_progress$get(segment), session);
    }
    static final FunctionDescriptor get_swipe_area$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_swipe_area$MH = RuntimeHelper.downcallHandle(
        _AdwSwipeableInterface.get_swipe_area$FUNC
    );
    public interface get_swipe_area {

        void apply(java.lang.foreign.MemoryAddress _x0, int _x1, int _x2, java.lang.foreign.MemoryAddress _x3);
        static MemorySegment allocate(get_swipe_area fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_swipe_area.class, fi, _AdwSwipeableInterface.get_swipe_area$FUNC, session);
        }
        static get_swipe_area ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1, int __x2, java.lang.foreign.MemoryAddress __x3) -> {
                try {
                    _AdwSwipeableInterface.get_swipe_area$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1, __x2, (java.lang.foreign.Addressable)__x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_swipe_area$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_swipe_area"));
    public static VarHandle get_swipe_area$VH() {
        return _AdwSwipeableInterface.get_swipe_area$VH;
    }
    public static MemoryAddress get_swipe_area$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_AdwSwipeableInterface.get_swipe_area$VH.get(seg);
    }
    public static void get_swipe_area$set( MemorySegment seg, MemoryAddress x) {
        _AdwSwipeableInterface.get_swipe_area$VH.set(seg, x);
    }
    public static MemoryAddress get_swipe_area$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_AdwSwipeableInterface.get_swipe_area$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_swipe_area$set(MemorySegment seg, long index, MemoryAddress x) {
        _AdwSwipeableInterface.get_swipe_area$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_swipe_area get_swipe_area (MemorySegment segment, MemorySession session) {
        return get_swipe_area.ofAddress(get_swipe_area$get(segment), session);
    }
    public static MemorySegment padding$slice(MemorySegment seg) {
        return seg.asSlice(56, 32);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


