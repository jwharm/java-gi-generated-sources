// Generated by jextract

package io.github.jwharm.javagi.interop.jextract;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _GtkTextViewClass {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            MemoryLayout.structLayout(
                MemoryLayout.structLayout(
                    Constants$root.C_LONG_LONG$LAYOUT.withName("g_type")
                ).withName("g_type_class"),
                Constants$root.C_POINTER$LAYOUT.withName("construct_properties"),
                Constants$root.C_POINTER$LAYOUT.withName("constructor"),
                Constants$root.C_POINTER$LAYOUT.withName("set_property"),
                Constants$root.C_POINTER$LAYOUT.withName("get_property"),
                Constants$root.C_POINTER$LAYOUT.withName("dispose"),
                Constants$root.C_POINTER$LAYOUT.withName("finalize"),
                Constants$root.C_POINTER$LAYOUT.withName("dispatch_properties_changed"),
                Constants$root.C_POINTER$LAYOUT.withName("notify"),
                Constants$root.C_POINTER$LAYOUT.withName("constructed"),
                Constants$root.C_LONG_LONG$LAYOUT.withName("flags"),
                MemoryLayout.sequenceLayout(6, Constants$root.C_POINTER$LAYOUT).withName("pdummy")
            ).withName("parent_class"),
            Constants$root.C_POINTER$LAYOUT.withName("show"),
            Constants$root.C_POINTER$LAYOUT.withName("hide"),
            Constants$root.C_POINTER$LAYOUT.withName("map"),
            Constants$root.C_POINTER$LAYOUT.withName("unmap"),
            Constants$root.C_POINTER$LAYOUT.withName("realize"),
            Constants$root.C_POINTER$LAYOUT.withName("unrealize"),
            Constants$root.C_POINTER$LAYOUT.withName("root"),
            Constants$root.C_POINTER$LAYOUT.withName("unroot"),
            Constants$root.C_POINTER$LAYOUT.withName("size_allocate"),
            Constants$root.C_POINTER$LAYOUT.withName("state_flags_changed"),
            Constants$root.C_POINTER$LAYOUT.withName("direction_changed"),
            Constants$root.C_POINTER$LAYOUT.withName("get_request_mode"),
            Constants$root.C_POINTER$LAYOUT.withName("measure"),
            Constants$root.C_POINTER$LAYOUT.withName("mnemonic_activate"),
            Constants$root.C_POINTER$LAYOUT.withName("grab_focus"),
            Constants$root.C_POINTER$LAYOUT.withName("focus"),
            Constants$root.C_POINTER$LAYOUT.withName("set_focus_child"),
            Constants$root.C_POINTER$LAYOUT.withName("move_focus"),
            Constants$root.C_POINTER$LAYOUT.withName("keynav_failed"),
            Constants$root.C_POINTER$LAYOUT.withName("query_tooltip"),
            Constants$root.C_POINTER$LAYOUT.withName("compute_expand"),
            Constants$root.C_POINTER$LAYOUT.withName("css_changed"),
            Constants$root.C_POINTER$LAYOUT.withName("system_setting_changed"),
            Constants$root.C_POINTER$LAYOUT.withName("snapshot"),
            Constants$root.C_POINTER$LAYOUT.withName("contains"),
            Constants$root.C_POINTER$LAYOUT.withName("priv"),
            MemoryLayout.sequenceLayout(8, Constants$root.C_POINTER$LAYOUT).withName("padding")
        ).withName("parent_class"),
        Constants$root.C_POINTER$LAYOUT.withName("move_cursor"),
        Constants$root.C_POINTER$LAYOUT.withName("set_anchor"),
        Constants$root.C_POINTER$LAYOUT.withName("insert_at_cursor"),
        Constants$root.C_POINTER$LAYOUT.withName("delete_from_cursor"),
        Constants$root.C_POINTER$LAYOUT.withName("backspace"),
        Constants$root.C_POINTER$LAYOUT.withName("cut_clipboard"),
        Constants$root.C_POINTER$LAYOUT.withName("copy_clipboard"),
        Constants$root.C_POINTER$LAYOUT.withName("paste_clipboard"),
        Constants$root.C_POINTER$LAYOUT.withName("toggle_overwrite"),
        Constants$root.C_POINTER$LAYOUT.withName("create_buffer"),
        Constants$root.C_POINTER$LAYOUT.withName("snapshot_layer"),
        Constants$root.C_POINTER$LAYOUT.withName("extend_selection"),
        Constants$root.C_POINTER$LAYOUT.withName("insert_emoji"),
        MemoryLayout.sequenceLayout(8, Constants$root.C_POINTER$LAYOUT).withName("padding")
    ).withName("_GtkTextViewClass");
    public static MemoryLayout $LAYOUT() {
        return _GtkTextViewClass.$struct$LAYOUT;
    }
    public static MemorySegment parent_class$slice(MemorySegment seg) {
        return seg.asSlice(0, 408);
    }
    static final FunctionDescriptor move_cursor$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle move_cursor$MH = RuntimeHelper.downcallHandle(
        _GtkTextViewClass.move_cursor$FUNC
    );
    public interface move_cursor {

        void apply(java.lang.foreign.MemoryAddress _x0, int _x1, int _x2, int _x3);
        static MemorySegment allocate(move_cursor fi, MemorySession session) {
            return RuntimeHelper.upcallStub(move_cursor.class, fi, _GtkTextViewClass.move_cursor$FUNC, session);
        }
        static move_cursor ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1, int __x2, int __x3) -> {
                try {
                    _GtkTextViewClass.move_cursor$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle move_cursor$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("move_cursor"));
    public static VarHandle move_cursor$VH() {
        return _GtkTextViewClass.move_cursor$VH;
    }
    public static MemoryAddress move_cursor$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkTextViewClass.move_cursor$VH.get(seg);
    }
    public static void move_cursor$set( MemorySegment seg, MemoryAddress x) {
        _GtkTextViewClass.move_cursor$VH.set(seg, x);
    }
    public static MemoryAddress move_cursor$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkTextViewClass.move_cursor$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void move_cursor$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkTextViewClass.move_cursor$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static move_cursor move_cursor (MemorySegment segment, MemorySession session) {
        return move_cursor.ofAddress(move_cursor$get(segment), session);
    }
    static final FunctionDescriptor set_anchor$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle set_anchor$MH = RuntimeHelper.downcallHandle(
        _GtkTextViewClass.set_anchor$FUNC
    );
    public interface set_anchor {

        void apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(set_anchor fi, MemorySession session) {
            return RuntimeHelper.upcallStub(set_anchor.class, fi, _GtkTextViewClass.set_anchor$FUNC, session);
        }
        static set_anchor ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    _GtkTextViewClass.set_anchor$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle set_anchor$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("set_anchor"));
    public static VarHandle set_anchor$VH() {
        return _GtkTextViewClass.set_anchor$VH;
    }
    public static MemoryAddress set_anchor$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkTextViewClass.set_anchor$VH.get(seg);
    }
    public static void set_anchor$set( MemorySegment seg, MemoryAddress x) {
        _GtkTextViewClass.set_anchor$VH.set(seg, x);
    }
    public static MemoryAddress set_anchor$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkTextViewClass.set_anchor$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void set_anchor$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkTextViewClass.set_anchor$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static set_anchor set_anchor (MemorySegment segment, MemorySession session) {
        return set_anchor.ofAddress(set_anchor$get(segment), session);
    }
    static final FunctionDescriptor insert_at_cursor$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle insert_at_cursor$MH = RuntimeHelper.downcallHandle(
        _GtkTextViewClass.insert_at_cursor$FUNC
    );
    public interface insert_at_cursor {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(insert_at_cursor fi, MemorySession session) {
            return RuntimeHelper.upcallStub(insert_at_cursor.class, fi, _GtkTextViewClass.insert_at_cursor$FUNC, session);
        }
        static insert_at_cursor ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    _GtkTextViewClass.insert_at_cursor$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle insert_at_cursor$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("insert_at_cursor"));
    public static VarHandle insert_at_cursor$VH() {
        return _GtkTextViewClass.insert_at_cursor$VH;
    }
    public static MemoryAddress insert_at_cursor$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkTextViewClass.insert_at_cursor$VH.get(seg);
    }
    public static void insert_at_cursor$set( MemorySegment seg, MemoryAddress x) {
        _GtkTextViewClass.insert_at_cursor$VH.set(seg, x);
    }
    public static MemoryAddress insert_at_cursor$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkTextViewClass.insert_at_cursor$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void insert_at_cursor$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkTextViewClass.insert_at_cursor$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static insert_at_cursor insert_at_cursor (MemorySegment segment, MemorySession session) {
        return insert_at_cursor.ofAddress(insert_at_cursor$get(segment), session);
    }
    static final FunctionDescriptor delete_from_cursor$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle delete_from_cursor$MH = RuntimeHelper.downcallHandle(
        _GtkTextViewClass.delete_from_cursor$FUNC
    );
    public interface delete_from_cursor {

        void apply(java.lang.foreign.MemoryAddress _x0, int _x1, int _x2);
        static MemorySegment allocate(delete_from_cursor fi, MemorySession session) {
            return RuntimeHelper.upcallStub(delete_from_cursor.class, fi, _GtkTextViewClass.delete_from_cursor$FUNC, session);
        }
        static delete_from_cursor ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1, int __x2) -> {
                try {
                    _GtkTextViewClass.delete_from_cursor$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle delete_from_cursor$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("delete_from_cursor"));
    public static VarHandle delete_from_cursor$VH() {
        return _GtkTextViewClass.delete_from_cursor$VH;
    }
    public static MemoryAddress delete_from_cursor$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkTextViewClass.delete_from_cursor$VH.get(seg);
    }
    public static void delete_from_cursor$set( MemorySegment seg, MemoryAddress x) {
        _GtkTextViewClass.delete_from_cursor$VH.set(seg, x);
    }
    public static MemoryAddress delete_from_cursor$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkTextViewClass.delete_from_cursor$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void delete_from_cursor$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkTextViewClass.delete_from_cursor$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static delete_from_cursor delete_from_cursor (MemorySegment segment, MemorySession session) {
        return delete_from_cursor.ofAddress(delete_from_cursor$get(segment), session);
    }
    static final FunctionDescriptor backspace$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle backspace$MH = RuntimeHelper.downcallHandle(
        _GtkTextViewClass.backspace$FUNC
    );
    public interface backspace {

        void apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(backspace fi, MemorySession session) {
            return RuntimeHelper.upcallStub(backspace.class, fi, _GtkTextViewClass.backspace$FUNC, session);
        }
        static backspace ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    _GtkTextViewClass.backspace$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle backspace$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("backspace"));
    public static VarHandle backspace$VH() {
        return _GtkTextViewClass.backspace$VH;
    }
    public static MemoryAddress backspace$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkTextViewClass.backspace$VH.get(seg);
    }
    public static void backspace$set( MemorySegment seg, MemoryAddress x) {
        _GtkTextViewClass.backspace$VH.set(seg, x);
    }
    public static MemoryAddress backspace$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkTextViewClass.backspace$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void backspace$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkTextViewClass.backspace$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static backspace backspace (MemorySegment segment, MemorySession session) {
        return backspace.ofAddress(backspace$get(segment), session);
    }
    static final FunctionDescriptor cut_clipboard$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle cut_clipboard$MH = RuntimeHelper.downcallHandle(
        _GtkTextViewClass.cut_clipboard$FUNC
    );
    public interface cut_clipboard {

        void apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(cut_clipboard fi, MemorySession session) {
            return RuntimeHelper.upcallStub(cut_clipboard.class, fi, _GtkTextViewClass.cut_clipboard$FUNC, session);
        }
        static cut_clipboard ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    _GtkTextViewClass.cut_clipboard$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle cut_clipboard$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("cut_clipboard"));
    public static VarHandle cut_clipboard$VH() {
        return _GtkTextViewClass.cut_clipboard$VH;
    }
    public static MemoryAddress cut_clipboard$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkTextViewClass.cut_clipboard$VH.get(seg);
    }
    public static void cut_clipboard$set( MemorySegment seg, MemoryAddress x) {
        _GtkTextViewClass.cut_clipboard$VH.set(seg, x);
    }
    public static MemoryAddress cut_clipboard$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkTextViewClass.cut_clipboard$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cut_clipboard$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkTextViewClass.cut_clipboard$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static cut_clipboard cut_clipboard (MemorySegment segment, MemorySession session) {
        return cut_clipboard.ofAddress(cut_clipboard$get(segment), session);
    }
    static final FunctionDescriptor copy_clipboard$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle copy_clipboard$MH = RuntimeHelper.downcallHandle(
        _GtkTextViewClass.copy_clipboard$FUNC
    );
    public interface copy_clipboard {

        void apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(copy_clipboard fi, MemorySession session) {
            return RuntimeHelper.upcallStub(copy_clipboard.class, fi, _GtkTextViewClass.copy_clipboard$FUNC, session);
        }
        static copy_clipboard ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    _GtkTextViewClass.copy_clipboard$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle copy_clipboard$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("copy_clipboard"));
    public static VarHandle copy_clipboard$VH() {
        return _GtkTextViewClass.copy_clipboard$VH;
    }
    public static MemoryAddress copy_clipboard$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkTextViewClass.copy_clipboard$VH.get(seg);
    }
    public static void copy_clipboard$set( MemorySegment seg, MemoryAddress x) {
        _GtkTextViewClass.copy_clipboard$VH.set(seg, x);
    }
    public static MemoryAddress copy_clipboard$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkTextViewClass.copy_clipboard$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void copy_clipboard$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkTextViewClass.copy_clipboard$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static copy_clipboard copy_clipboard (MemorySegment segment, MemorySession session) {
        return copy_clipboard.ofAddress(copy_clipboard$get(segment), session);
    }
    static final FunctionDescriptor paste_clipboard$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle paste_clipboard$MH = RuntimeHelper.downcallHandle(
        _GtkTextViewClass.paste_clipboard$FUNC
    );
    public interface paste_clipboard {

        void apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(paste_clipboard fi, MemorySession session) {
            return RuntimeHelper.upcallStub(paste_clipboard.class, fi, _GtkTextViewClass.paste_clipboard$FUNC, session);
        }
        static paste_clipboard ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    _GtkTextViewClass.paste_clipboard$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle paste_clipboard$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("paste_clipboard"));
    public static VarHandle paste_clipboard$VH() {
        return _GtkTextViewClass.paste_clipboard$VH;
    }
    public static MemoryAddress paste_clipboard$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkTextViewClass.paste_clipboard$VH.get(seg);
    }
    public static void paste_clipboard$set( MemorySegment seg, MemoryAddress x) {
        _GtkTextViewClass.paste_clipboard$VH.set(seg, x);
    }
    public static MemoryAddress paste_clipboard$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkTextViewClass.paste_clipboard$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void paste_clipboard$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkTextViewClass.paste_clipboard$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static paste_clipboard paste_clipboard (MemorySegment segment, MemorySession session) {
        return paste_clipboard.ofAddress(paste_clipboard$get(segment), session);
    }
    static final FunctionDescriptor toggle_overwrite$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle toggle_overwrite$MH = RuntimeHelper.downcallHandle(
        _GtkTextViewClass.toggle_overwrite$FUNC
    );
    public interface toggle_overwrite {

        void apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(toggle_overwrite fi, MemorySession session) {
            return RuntimeHelper.upcallStub(toggle_overwrite.class, fi, _GtkTextViewClass.toggle_overwrite$FUNC, session);
        }
        static toggle_overwrite ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    _GtkTextViewClass.toggle_overwrite$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle toggle_overwrite$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("toggle_overwrite"));
    public static VarHandle toggle_overwrite$VH() {
        return _GtkTextViewClass.toggle_overwrite$VH;
    }
    public static MemoryAddress toggle_overwrite$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkTextViewClass.toggle_overwrite$VH.get(seg);
    }
    public static void toggle_overwrite$set( MemorySegment seg, MemoryAddress x) {
        _GtkTextViewClass.toggle_overwrite$VH.set(seg, x);
    }
    public static MemoryAddress toggle_overwrite$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkTextViewClass.toggle_overwrite$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void toggle_overwrite$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkTextViewClass.toggle_overwrite$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static toggle_overwrite toggle_overwrite (MemorySegment segment, MemorySession session) {
        return toggle_overwrite.ofAddress(toggle_overwrite$get(segment), session);
    }
    static final FunctionDescriptor create_buffer$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle create_buffer$MH = RuntimeHelper.downcallHandle(
        _GtkTextViewClass.create_buffer$FUNC
    );
    public interface create_buffer {

        java.lang.foreign.Addressable apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(create_buffer fi, MemorySession session) {
            return RuntimeHelper.upcallStub(create_buffer.class, fi, _GtkTextViewClass.create_buffer$FUNC, session);
        }
        static create_buffer ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (java.lang.foreign.Addressable)(java.lang.foreign.MemoryAddress)_GtkTextViewClass.create_buffer$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle create_buffer$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("create_buffer"));
    public static VarHandle create_buffer$VH() {
        return _GtkTextViewClass.create_buffer$VH;
    }
    public static MemoryAddress create_buffer$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkTextViewClass.create_buffer$VH.get(seg);
    }
    public static void create_buffer$set( MemorySegment seg, MemoryAddress x) {
        _GtkTextViewClass.create_buffer$VH.set(seg, x);
    }
    public static MemoryAddress create_buffer$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkTextViewClass.create_buffer$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void create_buffer$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkTextViewClass.create_buffer$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static create_buffer create_buffer (MemorySegment segment, MemorySession session) {
        return create_buffer.ofAddress(create_buffer$get(segment), session);
    }
    static final FunctionDescriptor snapshot_layer$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle snapshot_layer$MH = RuntimeHelper.downcallHandle(
        _GtkTextViewClass.snapshot_layer$FUNC
    );
    public interface snapshot_layer {

        void apply(java.lang.foreign.MemoryAddress _x0, int _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(snapshot_layer fi, MemorySession session) {
            return RuntimeHelper.upcallStub(snapshot_layer.class, fi, _GtkTextViewClass.snapshot_layer$FUNC, session);
        }
        static snapshot_layer ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    _GtkTextViewClass.snapshot_layer$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle snapshot_layer$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("snapshot_layer"));
    public static VarHandle snapshot_layer$VH() {
        return _GtkTextViewClass.snapshot_layer$VH;
    }
    public static MemoryAddress snapshot_layer$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkTextViewClass.snapshot_layer$VH.get(seg);
    }
    public static void snapshot_layer$set( MemorySegment seg, MemoryAddress x) {
        _GtkTextViewClass.snapshot_layer$VH.set(seg, x);
    }
    public static MemoryAddress snapshot_layer$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkTextViewClass.snapshot_layer$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void snapshot_layer$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkTextViewClass.snapshot_layer$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static snapshot_layer snapshot_layer (MemorySegment segment, MemorySession session) {
        return snapshot_layer.ofAddress(snapshot_layer$get(segment), session);
    }
    static final FunctionDescriptor extend_selection$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle extend_selection$MH = RuntimeHelper.downcallHandle(
        _GtkTextViewClass.extend_selection$FUNC
    );
    public interface extend_selection {

        int apply(java.lang.foreign.MemoryAddress _x0, int _x1, java.lang.foreign.MemoryAddress _x2, java.lang.foreign.MemoryAddress _x3, java.lang.foreign.MemoryAddress _x4);
        static MemorySegment allocate(extend_selection fi, MemorySession session) {
            return RuntimeHelper.upcallStub(extend_selection.class, fi, _GtkTextViewClass.extend_selection$FUNC, session);
        }
        static extend_selection ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1, java.lang.foreign.MemoryAddress __x2, java.lang.foreign.MemoryAddress __x3, java.lang.foreign.MemoryAddress __x4) -> {
                try {
                    return (int)_GtkTextViewClass.extend_selection$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1, (java.lang.foreign.Addressable)__x2, (java.lang.foreign.Addressable)__x3, (java.lang.foreign.Addressable)__x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle extend_selection$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("extend_selection"));
    public static VarHandle extend_selection$VH() {
        return _GtkTextViewClass.extend_selection$VH;
    }
    public static MemoryAddress extend_selection$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkTextViewClass.extend_selection$VH.get(seg);
    }
    public static void extend_selection$set( MemorySegment seg, MemoryAddress x) {
        _GtkTextViewClass.extend_selection$VH.set(seg, x);
    }
    public static MemoryAddress extend_selection$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkTextViewClass.extend_selection$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void extend_selection$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkTextViewClass.extend_selection$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static extend_selection extend_selection (MemorySegment segment, MemorySession session) {
        return extend_selection.ofAddress(extend_selection$get(segment), session);
    }
    static final FunctionDescriptor insert_emoji$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle insert_emoji$MH = RuntimeHelper.downcallHandle(
        _GtkTextViewClass.insert_emoji$FUNC
    );
    public interface insert_emoji {

        void apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(insert_emoji fi, MemorySession session) {
            return RuntimeHelper.upcallStub(insert_emoji.class, fi, _GtkTextViewClass.insert_emoji$FUNC, session);
        }
        static insert_emoji ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    _GtkTextViewClass.insert_emoji$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle insert_emoji$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("insert_emoji"));
    public static VarHandle insert_emoji$VH() {
        return _GtkTextViewClass.insert_emoji$VH;
    }
    public static MemoryAddress insert_emoji$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkTextViewClass.insert_emoji$VH.get(seg);
    }
    public static void insert_emoji$set( MemorySegment seg, MemoryAddress x) {
        _GtkTextViewClass.insert_emoji$VH.set(seg, x);
    }
    public static MemoryAddress insert_emoji$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkTextViewClass.insert_emoji$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void insert_emoji$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkTextViewClass.insert_emoji$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static insert_emoji insert_emoji (MemorySegment segment, MemorySession session) {
        return insert_emoji.ofAddress(insert_emoji$get(segment), session);
    }
    public static MemorySegment padding$slice(MemorySegment seg) {
        return seg.asSlice(512, 64);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


