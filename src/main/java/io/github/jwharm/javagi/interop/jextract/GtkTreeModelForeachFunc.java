// Generated by jextract

package io.github.jwharm.javagi.interop.jextract;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public interface GtkTreeModelForeachFunc {

    int apply(java.lang.foreign.MemoryAddress model, java.lang.foreign.MemoryAddress path, java.lang.foreign.MemoryAddress iter, java.lang.foreign.MemoryAddress data);
    static MemorySegment allocate(GtkTreeModelForeachFunc fi, MemorySession session) {
        return RuntimeHelper.upcallStub(GtkTreeModelForeachFunc.class, fi, constants$1858.GtkTreeModelForeachFunc$FUNC, session);
    }
    static GtkTreeModelForeachFunc ofAddress(MemoryAddress addr, MemorySession session) {
        MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
        return (java.lang.foreign.MemoryAddress _model, java.lang.foreign.MemoryAddress _path, java.lang.foreign.MemoryAddress _iter, java.lang.foreign.MemoryAddress _data) -> {
            try {
                return (int)constants$1859.GtkTreeModelForeachFunc$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)_model, (java.lang.foreign.Addressable)_path, (java.lang.foreign.Addressable)_iter, (java.lang.foreign.Addressable)_data);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


