// Generated by jextract

package io.github.jwharm.javagi.interop.jextract;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _GtkTreeViewClass {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            MemoryLayout.structLayout(
                MemoryLayout.structLayout(
                    Constants$root.C_LONG_LONG$LAYOUT.withName("g_type")
                ).withName("g_type_class"),
                Constants$root.C_POINTER$LAYOUT.withName("construct_properties"),
                Constants$root.C_POINTER$LAYOUT.withName("constructor"),
                Constants$root.C_POINTER$LAYOUT.withName("set_property"),
                Constants$root.C_POINTER$LAYOUT.withName("get_property"),
                Constants$root.C_POINTER$LAYOUT.withName("dispose"),
                Constants$root.C_POINTER$LAYOUT.withName("finalize"),
                Constants$root.C_POINTER$LAYOUT.withName("dispatch_properties_changed"),
                Constants$root.C_POINTER$LAYOUT.withName("notify"),
                Constants$root.C_POINTER$LAYOUT.withName("constructed"),
                Constants$root.C_LONG_LONG$LAYOUT.withName("flags"),
                MemoryLayout.sequenceLayout(6, Constants$root.C_POINTER$LAYOUT).withName("pdummy")
            ).withName("parent_class"),
            Constants$root.C_POINTER$LAYOUT.withName("show"),
            Constants$root.C_POINTER$LAYOUT.withName("hide"),
            Constants$root.C_POINTER$LAYOUT.withName("map"),
            Constants$root.C_POINTER$LAYOUT.withName("unmap"),
            Constants$root.C_POINTER$LAYOUT.withName("realize"),
            Constants$root.C_POINTER$LAYOUT.withName("unrealize"),
            Constants$root.C_POINTER$LAYOUT.withName("root"),
            Constants$root.C_POINTER$LAYOUT.withName("unroot"),
            Constants$root.C_POINTER$LAYOUT.withName("size_allocate"),
            Constants$root.C_POINTER$LAYOUT.withName("state_flags_changed"),
            Constants$root.C_POINTER$LAYOUT.withName("direction_changed"),
            Constants$root.C_POINTER$LAYOUT.withName("get_request_mode"),
            Constants$root.C_POINTER$LAYOUT.withName("measure"),
            Constants$root.C_POINTER$LAYOUT.withName("mnemonic_activate"),
            Constants$root.C_POINTER$LAYOUT.withName("grab_focus"),
            Constants$root.C_POINTER$LAYOUT.withName("focus"),
            Constants$root.C_POINTER$LAYOUT.withName("set_focus_child"),
            Constants$root.C_POINTER$LAYOUT.withName("move_focus"),
            Constants$root.C_POINTER$LAYOUT.withName("keynav_failed"),
            Constants$root.C_POINTER$LAYOUT.withName("query_tooltip"),
            Constants$root.C_POINTER$LAYOUT.withName("compute_expand"),
            Constants$root.C_POINTER$LAYOUT.withName("css_changed"),
            Constants$root.C_POINTER$LAYOUT.withName("system_setting_changed"),
            Constants$root.C_POINTER$LAYOUT.withName("snapshot"),
            Constants$root.C_POINTER$LAYOUT.withName("contains"),
            Constants$root.C_POINTER$LAYOUT.withName("priv"),
            MemoryLayout.sequenceLayout(8, Constants$root.C_POINTER$LAYOUT).withName("padding")
        ).withName("parent_class"),
        Constants$root.C_POINTER$LAYOUT.withName("row_activated"),
        Constants$root.C_POINTER$LAYOUT.withName("test_expand_row"),
        Constants$root.C_POINTER$LAYOUT.withName("test_collapse_row"),
        Constants$root.C_POINTER$LAYOUT.withName("row_expanded"),
        Constants$root.C_POINTER$LAYOUT.withName("row_collapsed"),
        Constants$root.C_POINTER$LAYOUT.withName("columns_changed"),
        Constants$root.C_POINTER$LAYOUT.withName("cursor_changed"),
        Constants$root.C_POINTER$LAYOUT.withName("move_cursor"),
        Constants$root.C_POINTER$LAYOUT.withName("select_all"),
        Constants$root.C_POINTER$LAYOUT.withName("unselect_all"),
        Constants$root.C_POINTER$LAYOUT.withName("select_cursor_row"),
        Constants$root.C_POINTER$LAYOUT.withName("toggle_cursor_row"),
        Constants$root.C_POINTER$LAYOUT.withName("expand_collapse_cursor_row"),
        Constants$root.C_POINTER$LAYOUT.withName("select_cursor_parent"),
        Constants$root.C_POINTER$LAYOUT.withName("start_interactive_search"),
        MemoryLayout.sequenceLayout(16, Constants$root.C_POINTER$LAYOUT).withName("_reserved")
    ).withName("_GtkTreeViewClass");
    public static MemoryLayout $LAYOUT() {
        return _GtkTreeViewClass.$struct$LAYOUT;
    }
    public static MemorySegment parent_class$slice(MemorySegment seg) {
        return seg.asSlice(0, 408);
    }
    static final FunctionDescriptor row_activated$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle row_activated$MH = RuntimeHelper.downcallHandle(
        _GtkTreeViewClass.row_activated$FUNC
    );
    public interface row_activated {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(row_activated fi, MemorySession session) {
            return RuntimeHelper.upcallStub(row_activated.class, fi, _GtkTreeViewClass.row_activated$FUNC, session);
        }
        static row_activated ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    _GtkTreeViewClass.row_activated$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle row_activated$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("row_activated"));
    public static VarHandle row_activated$VH() {
        return _GtkTreeViewClass.row_activated$VH;
    }
    public static MemoryAddress row_activated$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkTreeViewClass.row_activated$VH.get(seg);
    }
    public static void row_activated$set( MemorySegment seg, MemoryAddress x) {
        _GtkTreeViewClass.row_activated$VH.set(seg, x);
    }
    public static MemoryAddress row_activated$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkTreeViewClass.row_activated$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void row_activated$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkTreeViewClass.row_activated$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static row_activated row_activated (MemorySegment segment, MemorySession session) {
        return row_activated.ofAddress(row_activated$get(segment), session);
    }
    static final FunctionDescriptor test_expand_row$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle test_expand_row$MH = RuntimeHelper.downcallHandle(
        _GtkTreeViewClass.test_expand_row$FUNC
    );
    public interface test_expand_row {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(test_expand_row fi, MemorySession session) {
            return RuntimeHelper.upcallStub(test_expand_row.class, fi, _GtkTreeViewClass.test_expand_row$FUNC, session);
        }
        static test_expand_row ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    return (int)_GtkTreeViewClass.test_expand_row$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle test_expand_row$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("test_expand_row"));
    public static VarHandle test_expand_row$VH() {
        return _GtkTreeViewClass.test_expand_row$VH;
    }
    public static MemoryAddress test_expand_row$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkTreeViewClass.test_expand_row$VH.get(seg);
    }
    public static void test_expand_row$set( MemorySegment seg, MemoryAddress x) {
        _GtkTreeViewClass.test_expand_row$VH.set(seg, x);
    }
    public static MemoryAddress test_expand_row$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkTreeViewClass.test_expand_row$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void test_expand_row$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkTreeViewClass.test_expand_row$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static test_expand_row test_expand_row (MemorySegment segment, MemorySession session) {
        return test_expand_row.ofAddress(test_expand_row$get(segment), session);
    }
    static final FunctionDescriptor test_collapse_row$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle test_collapse_row$MH = RuntimeHelper.downcallHandle(
        _GtkTreeViewClass.test_collapse_row$FUNC
    );
    public interface test_collapse_row {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(test_collapse_row fi, MemorySession session) {
            return RuntimeHelper.upcallStub(test_collapse_row.class, fi, _GtkTreeViewClass.test_collapse_row$FUNC, session);
        }
        static test_collapse_row ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    return (int)_GtkTreeViewClass.test_collapse_row$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle test_collapse_row$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("test_collapse_row"));
    public static VarHandle test_collapse_row$VH() {
        return _GtkTreeViewClass.test_collapse_row$VH;
    }
    public static MemoryAddress test_collapse_row$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkTreeViewClass.test_collapse_row$VH.get(seg);
    }
    public static void test_collapse_row$set( MemorySegment seg, MemoryAddress x) {
        _GtkTreeViewClass.test_collapse_row$VH.set(seg, x);
    }
    public static MemoryAddress test_collapse_row$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkTreeViewClass.test_collapse_row$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void test_collapse_row$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkTreeViewClass.test_collapse_row$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static test_collapse_row test_collapse_row (MemorySegment segment, MemorySession session) {
        return test_collapse_row.ofAddress(test_collapse_row$get(segment), session);
    }
    static final FunctionDescriptor row_expanded$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle row_expanded$MH = RuntimeHelper.downcallHandle(
        _GtkTreeViewClass.row_expanded$FUNC
    );
    public interface row_expanded {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(row_expanded fi, MemorySession session) {
            return RuntimeHelper.upcallStub(row_expanded.class, fi, _GtkTreeViewClass.row_expanded$FUNC, session);
        }
        static row_expanded ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    _GtkTreeViewClass.row_expanded$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle row_expanded$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("row_expanded"));
    public static VarHandle row_expanded$VH() {
        return _GtkTreeViewClass.row_expanded$VH;
    }
    public static MemoryAddress row_expanded$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkTreeViewClass.row_expanded$VH.get(seg);
    }
    public static void row_expanded$set( MemorySegment seg, MemoryAddress x) {
        _GtkTreeViewClass.row_expanded$VH.set(seg, x);
    }
    public static MemoryAddress row_expanded$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkTreeViewClass.row_expanded$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void row_expanded$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkTreeViewClass.row_expanded$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static row_expanded row_expanded (MemorySegment segment, MemorySession session) {
        return row_expanded.ofAddress(row_expanded$get(segment), session);
    }
    static final FunctionDescriptor row_collapsed$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle row_collapsed$MH = RuntimeHelper.downcallHandle(
        _GtkTreeViewClass.row_collapsed$FUNC
    );
    public interface row_collapsed {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(row_collapsed fi, MemorySession session) {
            return RuntimeHelper.upcallStub(row_collapsed.class, fi, _GtkTreeViewClass.row_collapsed$FUNC, session);
        }
        static row_collapsed ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    _GtkTreeViewClass.row_collapsed$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle row_collapsed$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("row_collapsed"));
    public static VarHandle row_collapsed$VH() {
        return _GtkTreeViewClass.row_collapsed$VH;
    }
    public static MemoryAddress row_collapsed$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkTreeViewClass.row_collapsed$VH.get(seg);
    }
    public static void row_collapsed$set( MemorySegment seg, MemoryAddress x) {
        _GtkTreeViewClass.row_collapsed$VH.set(seg, x);
    }
    public static MemoryAddress row_collapsed$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkTreeViewClass.row_collapsed$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void row_collapsed$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkTreeViewClass.row_collapsed$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static row_collapsed row_collapsed (MemorySegment segment, MemorySession session) {
        return row_collapsed.ofAddress(row_collapsed$get(segment), session);
    }
    static final FunctionDescriptor columns_changed$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle columns_changed$MH = RuntimeHelper.downcallHandle(
        _GtkTreeViewClass.columns_changed$FUNC
    );
    public interface columns_changed {

        void apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(columns_changed fi, MemorySession session) {
            return RuntimeHelper.upcallStub(columns_changed.class, fi, _GtkTreeViewClass.columns_changed$FUNC, session);
        }
        static columns_changed ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    _GtkTreeViewClass.columns_changed$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle columns_changed$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("columns_changed"));
    public static VarHandle columns_changed$VH() {
        return _GtkTreeViewClass.columns_changed$VH;
    }
    public static MemoryAddress columns_changed$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkTreeViewClass.columns_changed$VH.get(seg);
    }
    public static void columns_changed$set( MemorySegment seg, MemoryAddress x) {
        _GtkTreeViewClass.columns_changed$VH.set(seg, x);
    }
    public static MemoryAddress columns_changed$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkTreeViewClass.columns_changed$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void columns_changed$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkTreeViewClass.columns_changed$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static columns_changed columns_changed (MemorySegment segment, MemorySession session) {
        return columns_changed.ofAddress(columns_changed$get(segment), session);
    }
    static final FunctionDescriptor cursor_changed$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle cursor_changed$MH = RuntimeHelper.downcallHandle(
        _GtkTreeViewClass.cursor_changed$FUNC
    );
    public interface cursor_changed {

        void apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(cursor_changed fi, MemorySession session) {
            return RuntimeHelper.upcallStub(cursor_changed.class, fi, _GtkTreeViewClass.cursor_changed$FUNC, session);
        }
        static cursor_changed ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    _GtkTreeViewClass.cursor_changed$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle cursor_changed$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("cursor_changed"));
    public static VarHandle cursor_changed$VH() {
        return _GtkTreeViewClass.cursor_changed$VH;
    }
    public static MemoryAddress cursor_changed$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkTreeViewClass.cursor_changed$VH.get(seg);
    }
    public static void cursor_changed$set( MemorySegment seg, MemoryAddress x) {
        _GtkTreeViewClass.cursor_changed$VH.set(seg, x);
    }
    public static MemoryAddress cursor_changed$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkTreeViewClass.cursor_changed$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cursor_changed$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkTreeViewClass.cursor_changed$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static cursor_changed cursor_changed (MemorySegment segment, MemorySession session) {
        return cursor_changed.ofAddress(cursor_changed$get(segment), session);
    }
    static final FunctionDescriptor move_cursor$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle move_cursor$MH = RuntimeHelper.downcallHandle(
        _GtkTreeViewClass.move_cursor$FUNC
    );
    public interface move_cursor {

        int apply(java.lang.foreign.MemoryAddress _x0, int _x1, int _x2, int _x3, int _x4);
        static MemorySegment allocate(move_cursor fi, MemorySession session) {
            return RuntimeHelper.upcallStub(move_cursor.class, fi, _GtkTreeViewClass.move_cursor$FUNC, session);
        }
        static move_cursor ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1, int __x2, int __x3, int __x4) -> {
                try {
                    return (int)_GtkTreeViewClass.move_cursor$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle move_cursor$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("move_cursor"));
    public static VarHandle move_cursor$VH() {
        return _GtkTreeViewClass.move_cursor$VH;
    }
    public static MemoryAddress move_cursor$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkTreeViewClass.move_cursor$VH.get(seg);
    }
    public static void move_cursor$set( MemorySegment seg, MemoryAddress x) {
        _GtkTreeViewClass.move_cursor$VH.set(seg, x);
    }
    public static MemoryAddress move_cursor$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkTreeViewClass.move_cursor$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void move_cursor$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkTreeViewClass.move_cursor$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static move_cursor move_cursor (MemorySegment segment, MemorySession session) {
        return move_cursor.ofAddress(move_cursor$get(segment), session);
    }
    static final FunctionDescriptor select_all$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle select_all$MH = RuntimeHelper.downcallHandle(
        _GtkTreeViewClass.select_all$FUNC
    );
    public interface select_all {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(select_all fi, MemorySession session) {
            return RuntimeHelper.upcallStub(select_all.class, fi, _GtkTreeViewClass.select_all$FUNC, session);
        }
        static select_all ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)_GtkTreeViewClass.select_all$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle select_all$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("select_all"));
    public static VarHandle select_all$VH() {
        return _GtkTreeViewClass.select_all$VH;
    }
    public static MemoryAddress select_all$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkTreeViewClass.select_all$VH.get(seg);
    }
    public static void select_all$set( MemorySegment seg, MemoryAddress x) {
        _GtkTreeViewClass.select_all$VH.set(seg, x);
    }
    public static MemoryAddress select_all$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkTreeViewClass.select_all$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void select_all$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkTreeViewClass.select_all$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static select_all select_all (MemorySegment segment, MemorySession session) {
        return select_all.ofAddress(select_all$get(segment), session);
    }
    static final FunctionDescriptor unselect_all$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle unselect_all$MH = RuntimeHelper.downcallHandle(
        _GtkTreeViewClass.unselect_all$FUNC
    );
    public interface unselect_all {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(unselect_all fi, MemorySession session) {
            return RuntimeHelper.upcallStub(unselect_all.class, fi, _GtkTreeViewClass.unselect_all$FUNC, session);
        }
        static unselect_all ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)_GtkTreeViewClass.unselect_all$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle unselect_all$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("unselect_all"));
    public static VarHandle unselect_all$VH() {
        return _GtkTreeViewClass.unselect_all$VH;
    }
    public static MemoryAddress unselect_all$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkTreeViewClass.unselect_all$VH.get(seg);
    }
    public static void unselect_all$set( MemorySegment seg, MemoryAddress x) {
        _GtkTreeViewClass.unselect_all$VH.set(seg, x);
    }
    public static MemoryAddress unselect_all$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkTreeViewClass.unselect_all$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void unselect_all$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkTreeViewClass.unselect_all$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static unselect_all unselect_all (MemorySegment segment, MemorySession session) {
        return unselect_all.ofAddress(unselect_all$get(segment), session);
    }
    static final FunctionDescriptor select_cursor_row$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle select_cursor_row$MH = RuntimeHelper.downcallHandle(
        _GtkTreeViewClass.select_cursor_row$FUNC
    );
    public interface select_cursor_row {

        int apply(java.lang.foreign.MemoryAddress _x0, int _x1);
        static MemorySegment allocate(select_cursor_row fi, MemorySession session) {
            return RuntimeHelper.upcallStub(select_cursor_row.class, fi, _GtkTreeViewClass.select_cursor_row$FUNC, session);
        }
        static select_cursor_row ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1) -> {
                try {
                    return (int)_GtkTreeViewClass.select_cursor_row$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle select_cursor_row$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("select_cursor_row"));
    public static VarHandle select_cursor_row$VH() {
        return _GtkTreeViewClass.select_cursor_row$VH;
    }
    public static MemoryAddress select_cursor_row$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkTreeViewClass.select_cursor_row$VH.get(seg);
    }
    public static void select_cursor_row$set( MemorySegment seg, MemoryAddress x) {
        _GtkTreeViewClass.select_cursor_row$VH.set(seg, x);
    }
    public static MemoryAddress select_cursor_row$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkTreeViewClass.select_cursor_row$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void select_cursor_row$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkTreeViewClass.select_cursor_row$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static select_cursor_row select_cursor_row (MemorySegment segment, MemorySession session) {
        return select_cursor_row.ofAddress(select_cursor_row$get(segment), session);
    }
    static final FunctionDescriptor toggle_cursor_row$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle toggle_cursor_row$MH = RuntimeHelper.downcallHandle(
        _GtkTreeViewClass.toggle_cursor_row$FUNC
    );
    public interface toggle_cursor_row {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(toggle_cursor_row fi, MemorySession session) {
            return RuntimeHelper.upcallStub(toggle_cursor_row.class, fi, _GtkTreeViewClass.toggle_cursor_row$FUNC, session);
        }
        static toggle_cursor_row ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)_GtkTreeViewClass.toggle_cursor_row$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle toggle_cursor_row$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("toggle_cursor_row"));
    public static VarHandle toggle_cursor_row$VH() {
        return _GtkTreeViewClass.toggle_cursor_row$VH;
    }
    public static MemoryAddress toggle_cursor_row$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkTreeViewClass.toggle_cursor_row$VH.get(seg);
    }
    public static void toggle_cursor_row$set( MemorySegment seg, MemoryAddress x) {
        _GtkTreeViewClass.toggle_cursor_row$VH.set(seg, x);
    }
    public static MemoryAddress toggle_cursor_row$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkTreeViewClass.toggle_cursor_row$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void toggle_cursor_row$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkTreeViewClass.toggle_cursor_row$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static toggle_cursor_row toggle_cursor_row (MemorySegment segment, MemorySession session) {
        return toggle_cursor_row.ofAddress(toggle_cursor_row$get(segment), session);
    }
    static final FunctionDescriptor expand_collapse_cursor_row$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle expand_collapse_cursor_row$MH = RuntimeHelper.downcallHandle(
        _GtkTreeViewClass.expand_collapse_cursor_row$FUNC
    );
    public interface expand_collapse_cursor_row {

        int apply(java.lang.foreign.MemoryAddress _x0, int _x1, int _x2, int _x3);
        static MemorySegment allocate(expand_collapse_cursor_row fi, MemorySession session) {
            return RuntimeHelper.upcallStub(expand_collapse_cursor_row.class, fi, _GtkTreeViewClass.expand_collapse_cursor_row$FUNC, session);
        }
        static expand_collapse_cursor_row ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1, int __x2, int __x3) -> {
                try {
                    return (int)_GtkTreeViewClass.expand_collapse_cursor_row$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle expand_collapse_cursor_row$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("expand_collapse_cursor_row"));
    public static VarHandle expand_collapse_cursor_row$VH() {
        return _GtkTreeViewClass.expand_collapse_cursor_row$VH;
    }
    public static MemoryAddress expand_collapse_cursor_row$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkTreeViewClass.expand_collapse_cursor_row$VH.get(seg);
    }
    public static void expand_collapse_cursor_row$set( MemorySegment seg, MemoryAddress x) {
        _GtkTreeViewClass.expand_collapse_cursor_row$VH.set(seg, x);
    }
    public static MemoryAddress expand_collapse_cursor_row$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkTreeViewClass.expand_collapse_cursor_row$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void expand_collapse_cursor_row$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkTreeViewClass.expand_collapse_cursor_row$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static expand_collapse_cursor_row expand_collapse_cursor_row (MemorySegment segment, MemorySession session) {
        return expand_collapse_cursor_row.ofAddress(expand_collapse_cursor_row$get(segment), session);
    }
    static final FunctionDescriptor select_cursor_parent$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle select_cursor_parent$MH = RuntimeHelper.downcallHandle(
        _GtkTreeViewClass.select_cursor_parent$FUNC
    );
    public interface select_cursor_parent {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(select_cursor_parent fi, MemorySession session) {
            return RuntimeHelper.upcallStub(select_cursor_parent.class, fi, _GtkTreeViewClass.select_cursor_parent$FUNC, session);
        }
        static select_cursor_parent ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)_GtkTreeViewClass.select_cursor_parent$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle select_cursor_parent$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("select_cursor_parent"));
    public static VarHandle select_cursor_parent$VH() {
        return _GtkTreeViewClass.select_cursor_parent$VH;
    }
    public static MemoryAddress select_cursor_parent$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkTreeViewClass.select_cursor_parent$VH.get(seg);
    }
    public static void select_cursor_parent$set( MemorySegment seg, MemoryAddress x) {
        _GtkTreeViewClass.select_cursor_parent$VH.set(seg, x);
    }
    public static MemoryAddress select_cursor_parent$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkTreeViewClass.select_cursor_parent$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void select_cursor_parent$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkTreeViewClass.select_cursor_parent$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static select_cursor_parent select_cursor_parent (MemorySegment segment, MemorySession session) {
        return select_cursor_parent.ofAddress(select_cursor_parent$get(segment), session);
    }
    static final FunctionDescriptor start_interactive_search$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle start_interactive_search$MH = RuntimeHelper.downcallHandle(
        _GtkTreeViewClass.start_interactive_search$FUNC
    );
    public interface start_interactive_search {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(start_interactive_search fi, MemorySession session) {
            return RuntimeHelper.upcallStub(start_interactive_search.class, fi, _GtkTreeViewClass.start_interactive_search$FUNC, session);
        }
        static start_interactive_search ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)_GtkTreeViewClass.start_interactive_search$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle start_interactive_search$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("start_interactive_search"));
    public static VarHandle start_interactive_search$VH() {
        return _GtkTreeViewClass.start_interactive_search$VH;
    }
    public static MemoryAddress start_interactive_search$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkTreeViewClass.start_interactive_search$VH.get(seg);
    }
    public static void start_interactive_search$set( MemorySegment seg, MemoryAddress x) {
        _GtkTreeViewClass.start_interactive_search$VH.set(seg, x);
    }
    public static MemoryAddress start_interactive_search$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkTreeViewClass.start_interactive_search$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void start_interactive_search$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkTreeViewClass.start_interactive_search$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static start_interactive_search start_interactive_search (MemorySegment segment, MemorySession session) {
        return start_interactive_search.ofAddress(start_interactive_search$get(segment), session);
    }
    public static MemorySegment _reserved$slice(MemorySegment seg) {
        return seg.asSlice(528, 128);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


