// Generated by jextract

package io.github.jwharm.javagi.interop.jextract;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _GtkCellRendererClass {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG_LONG$LAYOUT.withName("g_type")
            ).withName("g_type_class"),
            Constants$root.C_POINTER$LAYOUT.withName("construct_properties"),
            Constants$root.C_POINTER$LAYOUT.withName("constructor"),
            Constants$root.C_POINTER$LAYOUT.withName("set_property"),
            Constants$root.C_POINTER$LAYOUT.withName("get_property"),
            Constants$root.C_POINTER$LAYOUT.withName("dispose"),
            Constants$root.C_POINTER$LAYOUT.withName("finalize"),
            Constants$root.C_POINTER$LAYOUT.withName("dispatch_properties_changed"),
            Constants$root.C_POINTER$LAYOUT.withName("notify"),
            Constants$root.C_POINTER$LAYOUT.withName("constructed"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("flags"),
            MemoryLayout.sequenceLayout(6, Constants$root.C_POINTER$LAYOUT).withName("pdummy")
        ).withName("parent_class"),
        Constants$root.C_POINTER$LAYOUT.withName("get_request_mode"),
        Constants$root.C_POINTER$LAYOUT.withName("get_preferred_width"),
        Constants$root.C_POINTER$LAYOUT.withName("get_preferred_height_for_width"),
        Constants$root.C_POINTER$LAYOUT.withName("get_preferred_height"),
        Constants$root.C_POINTER$LAYOUT.withName("get_preferred_width_for_height"),
        Constants$root.C_POINTER$LAYOUT.withName("get_aligned_area"),
        Constants$root.C_POINTER$LAYOUT.withName("snapshot"),
        Constants$root.C_POINTER$LAYOUT.withName("activate"),
        Constants$root.C_POINTER$LAYOUT.withName("start_editing"),
        Constants$root.C_POINTER$LAYOUT.withName("editing_canceled"),
        Constants$root.C_POINTER$LAYOUT.withName("editing_started"),
        MemoryLayout.sequenceLayout(8, Constants$root.C_POINTER$LAYOUT).withName("padding")
    ).withName("_GtkCellRendererClass");
    public static MemoryLayout $LAYOUT() {
        return _GtkCellRendererClass.$struct$LAYOUT;
    }
    public static MemorySegment parent_class$slice(MemorySegment seg) {
        return seg.asSlice(0, 136);
    }
    static final FunctionDescriptor get_request_mode$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_request_mode$MH = RuntimeHelper.downcallHandle(
        _GtkCellRendererClass.get_request_mode$FUNC
    );
    public interface get_request_mode {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(get_request_mode fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_request_mode.class, fi, _GtkCellRendererClass.get_request_mode$FUNC, session);
        }
        static get_request_mode ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)_GtkCellRendererClass.get_request_mode$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_request_mode$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_request_mode"));
    public static VarHandle get_request_mode$VH() {
        return _GtkCellRendererClass.get_request_mode$VH;
    }
    public static MemoryAddress get_request_mode$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkCellRendererClass.get_request_mode$VH.get(seg);
    }
    public static void get_request_mode$set( MemorySegment seg, MemoryAddress x) {
        _GtkCellRendererClass.get_request_mode$VH.set(seg, x);
    }
    public static MemoryAddress get_request_mode$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkCellRendererClass.get_request_mode$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_request_mode$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkCellRendererClass.get_request_mode$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_request_mode get_request_mode (MemorySegment segment, MemorySession session) {
        return get_request_mode.ofAddress(get_request_mode$get(segment), session);
    }
    static final FunctionDescriptor get_preferred_width$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_preferred_width$MH = RuntimeHelper.downcallHandle(
        _GtkCellRendererClass.get_preferred_width$FUNC
    );
    public interface get_preferred_width {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2, java.lang.foreign.MemoryAddress _x3);
        static MemorySegment allocate(get_preferred_width fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_preferred_width.class, fi, _GtkCellRendererClass.get_preferred_width$FUNC, session);
        }
        static get_preferred_width ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2, java.lang.foreign.MemoryAddress __x3) -> {
                try {
                    _GtkCellRendererClass.get_preferred_width$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2, (java.lang.foreign.Addressable)__x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_preferred_width$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_preferred_width"));
    public static VarHandle get_preferred_width$VH() {
        return _GtkCellRendererClass.get_preferred_width$VH;
    }
    public static MemoryAddress get_preferred_width$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkCellRendererClass.get_preferred_width$VH.get(seg);
    }
    public static void get_preferred_width$set( MemorySegment seg, MemoryAddress x) {
        _GtkCellRendererClass.get_preferred_width$VH.set(seg, x);
    }
    public static MemoryAddress get_preferred_width$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkCellRendererClass.get_preferred_width$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_preferred_width$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkCellRendererClass.get_preferred_width$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_preferred_width get_preferred_width (MemorySegment segment, MemorySession session) {
        return get_preferred_width.ofAddress(get_preferred_width$get(segment), session);
    }
    static final FunctionDescriptor get_preferred_height_for_width$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_preferred_height_for_width$MH = RuntimeHelper.downcallHandle(
        _GtkCellRendererClass.get_preferred_height_for_width$FUNC
    );
    public interface get_preferred_height_for_width {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, int _x2, java.lang.foreign.MemoryAddress _x3, java.lang.foreign.MemoryAddress _x4);
        static MemorySegment allocate(get_preferred_height_for_width fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_preferred_height_for_width.class, fi, _GtkCellRendererClass.get_preferred_height_for_width$FUNC, session);
        }
        static get_preferred_height_for_width ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, int __x2, java.lang.foreign.MemoryAddress __x3, java.lang.foreign.MemoryAddress __x4) -> {
                try {
                    _GtkCellRendererClass.get_preferred_height_for_width$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, __x2, (java.lang.foreign.Addressable)__x3, (java.lang.foreign.Addressable)__x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_preferred_height_for_width$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_preferred_height_for_width"));
    public static VarHandle get_preferred_height_for_width$VH() {
        return _GtkCellRendererClass.get_preferred_height_for_width$VH;
    }
    public static MemoryAddress get_preferred_height_for_width$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkCellRendererClass.get_preferred_height_for_width$VH.get(seg);
    }
    public static void get_preferred_height_for_width$set( MemorySegment seg, MemoryAddress x) {
        _GtkCellRendererClass.get_preferred_height_for_width$VH.set(seg, x);
    }
    public static MemoryAddress get_preferred_height_for_width$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkCellRendererClass.get_preferred_height_for_width$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_preferred_height_for_width$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkCellRendererClass.get_preferred_height_for_width$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_preferred_height_for_width get_preferred_height_for_width (MemorySegment segment, MemorySession session) {
        return get_preferred_height_for_width.ofAddress(get_preferred_height_for_width$get(segment), session);
    }
    static final FunctionDescriptor get_preferred_height$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_preferred_height$MH = RuntimeHelper.downcallHandle(
        _GtkCellRendererClass.get_preferred_height$FUNC
    );
    public interface get_preferred_height {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2, java.lang.foreign.MemoryAddress _x3);
        static MemorySegment allocate(get_preferred_height fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_preferred_height.class, fi, _GtkCellRendererClass.get_preferred_height$FUNC, session);
        }
        static get_preferred_height ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2, java.lang.foreign.MemoryAddress __x3) -> {
                try {
                    _GtkCellRendererClass.get_preferred_height$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2, (java.lang.foreign.Addressable)__x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_preferred_height$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_preferred_height"));
    public static VarHandle get_preferred_height$VH() {
        return _GtkCellRendererClass.get_preferred_height$VH;
    }
    public static MemoryAddress get_preferred_height$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkCellRendererClass.get_preferred_height$VH.get(seg);
    }
    public static void get_preferred_height$set( MemorySegment seg, MemoryAddress x) {
        _GtkCellRendererClass.get_preferred_height$VH.set(seg, x);
    }
    public static MemoryAddress get_preferred_height$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkCellRendererClass.get_preferred_height$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_preferred_height$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkCellRendererClass.get_preferred_height$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_preferred_height get_preferred_height (MemorySegment segment, MemorySession session) {
        return get_preferred_height.ofAddress(get_preferred_height$get(segment), session);
    }
    static final FunctionDescriptor get_preferred_width_for_height$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_preferred_width_for_height$MH = RuntimeHelper.downcallHandle(
        _GtkCellRendererClass.get_preferred_width_for_height$FUNC
    );
    public interface get_preferred_width_for_height {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, int _x2, java.lang.foreign.MemoryAddress _x3, java.lang.foreign.MemoryAddress _x4);
        static MemorySegment allocate(get_preferred_width_for_height fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_preferred_width_for_height.class, fi, _GtkCellRendererClass.get_preferred_width_for_height$FUNC, session);
        }
        static get_preferred_width_for_height ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, int __x2, java.lang.foreign.MemoryAddress __x3, java.lang.foreign.MemoryAddress __x4) -> {
                try {
                    _GtkCellRendererClass.get_preferred_width_for_height$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, __x2, (java.lang.foreign.Addressable)__x3, (java.lang.foreign.Addressable)__x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_preferred_width_for_height$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_preferred_width_for_height"));
    public static VarHandle get_preferred_width_for_height$VH() {
        return _GtkCellRendererClass.get_preferred_width_for_height$VH;
    }
    public static MemoryAddress get_preferred_width_for_height$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkCellRendererClass.get_preferred_width_for_height$VH.get(seg);
    }
    public static void get_preferred_width_for_height$set( MemorySegment seg, MemoryAddress x) {
        _GtkCellRendererClass.get_preferred_width_for_height$VH.set(seg, x);
    }
    public static MemoryAddress get_preferred_width_for_height$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkCellRendererClass.get_preferred_width_for_height$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_preferred_width_for_height$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkCellRendererClass.get_preferred_width_for_height$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_preferred_width_for_height get_preferred_width_for_height (MemorySegment segment, MemorySession session) {
        return get_preferred_width_for_height.ofAddress(get_preferred_width_for_height$get(segment), session);
    }
    static final FunctionDescriptor get_aligned_area$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_aligned_area$MH = RuntimeHelper.downcallHandle(
        _GtkCellRendererClass.get_aligned_area$FUNC
    );
    public interface get_aligned_area {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, int _x2, java.lang.foreign.MemoryAddress _x3, java.lang.foreign.MemoryAddress _x4);
        static MemorySegment allocate(get_aligned_area fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_aligned_area.class, fi, _GtkCellRendererClass.get_aligned_area$FUNC, session);
        }
        static get_aligned_area ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, int __x2, java.lang.foreign.MemoryAddress __x3, java.lang.foreign.MemoryAddress __x4) -> {
                try {
                    _GtkCellRendererClass.get_aligned_area$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, __x2, (java.lang.foreign.Addressable)__x3, (java.lang.foreign.Addressable)__x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_aligned_area$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_aligned_area"));
    public static VarHandle get_aligned_area$VH() {
        return _GtkCellRendererClass.get_aligned_area$VH;
    }
    public static MemoryAddress get_aligned_area$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkCellRendererClass.get_aligned_area$VH.get(seg);
    }
    public static void get_aligned_area$set( MemorySegment seg, MemoryAddress x) {
        _GtkCellRendererClass.get_aligned_area$VH.set(seg, x);
    }
    public static MemoryAddress get_aligned_area$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkCellRendererClass.get_aligned_area$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_aligned_area$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkCellRendererClass.get_aligned_area$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_aligned_area get_aligned_area (MemorySegment segment, MemorySession session) {
        return get_aligned_area.ofAddress(get_aligned_area$get(segment), session);
    }
    static final FunctionDescriptor snapshot$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle snapshot$MH = RuntimeHelper.downcallHandle(
        _GtkCellRendererClass.snapshot$FUNC
    );
    public interface snapshot {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2, java.lang.foreign.MemoryAddress _x3, java.lang.foreign.MemoryAddress _x4, int _x5);
        static MemorySegment allocate(snapshot fi, MemorySession session) {
            return RuntimeHelper.upcallStub(snapshot.class, fi, _GtkCellRendererClass.snapshot$FUNC, session);
        }
        static snapshot ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2, java.lang.foreign.MemoryAddress __x3, java.lang.foreign.MemoryAddress __x4, int __x5) -> {
                try {
                    _GtkCellRendererClass.snapshot$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2, (java.lang.foreign.Addressable)__x3, (java.lang.foreign.Addressable)__x4, __x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle snapshot$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("snapshot"));
    public static VarHandle snapshot$VH() {
        return _GtkCellRendererClass.snapshot$VH;
    }
    public static MemoryAddress snapshot$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkCellRendererClass.snapshot$VH.get(seg);
    }
    public static void snapshot$set( MemorySegment seg, MemoryAddress x) {
        _GtkCellRendererClass.snapshot$VH.set(seg, x);
    }
    public static MemoryAddress snapshot$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkCellRendererClass.snapshot$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void snapshot$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkCellRendererClass.snapshot$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static snapshot snapshot (MemorySegment segment, MemorySession session) {
        return snapshot.ofAddress(snapshot$get(segment), session);
    }
    static final FunctionDescriptor activate$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle activate$MH = RuntimeHelper.downcallHandle(
        _GtkCellRendererClass.activate$FUNC
    );
    public interface activate {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2, java.lang.foreign.MemoryAddress _x3, java.lang.foreign.MemoryAddress _x4, java.lang.foreign.MemoryAddress _x5, int _x6);
        static MemorySegment allocate(activate fi, MemorySession session) {
            return RuntimeHelper.upcallStub(activate.class, fi, _GtkCellRendererClass.activate$FUNC, session);
        }
        static activate ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2, java.lang.foreign.MemoryAddress __x3, java.lang.foreign.MemoryAddress __x4, java.lang.foreign.MemoryAddress __x5, int __x6) -> {
                try {
                    return (int)_GtkCellRendererClass.activate$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2, (java.lang.foreign.Addressable)__x3, (java.lang.foreign.Addressable)__x4, (java.lang.foreign.Addressable)__x5, __x6);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle activate$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("activate"));
    public static VarHandle activate$VH() {
        return _GtkCellRendererClass.activate$VH;
    }
    public static MemoryAddress activate$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkCellRendererClass.activate$VH.get(seg);
    }
    public static void activate$set( MemorySegment seg, MemoryAddress x) {
        _GtkCellRendererClass.activate$VH.set(seg, x);
    }
    public static MemoryAddress activate$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkCellRendererClass.activate$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void activate$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkCellRendererClass.activate$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static activate activate (MemorySegment segment, MemorySession session) {
        return activate.ofAddress(activate$get(segment), session);
    }
    static final FunctionDescriptor start_editing$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle start_editing$MH = RuntimeHelper.downcallHandle(
        _GtkCellRendererClass.start_editing$FUNC
    );
    public interface start_editing {

        java.lang.foreign.Addressable apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2, java.lang.foreign.MemoryAddress _x3, java.lang.foreign.MemoryAddress _x4, java.lang.foreign.MemoryAddress _x5, int _x6);
        static MemorySegment allocate(start_editing fi, MemorySession session) {
            return RuntimeHelper.upcallStub(start_editing.class, fi, _GtkCellRendererClass.start_editing$FUNC, session);
        }
        static start_editing ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2, java.lang.foreign.MemoryAddress __x3, java.lang.foreign.MemoryAddress __x4, java.lang.foreign.MemoryAddress __x5, int __x6) -> {
                try {
                    return (java.lang.foreign.Addressable)(java.lang.foreign.MemoryAddress)_GtkCellRendererClass.start_editing$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2, (java.lang.foreign.Addressable)__x3, (java.lang.foreign.Addressable)__x4, (java.lang.foreign.Addressable)__x5, __x6);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle start_editing$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("start_editing"));
    public static VarHandle start_editing$VH() {
        return _GtkCellRendererClass.start_editing$VH;
    }
    public static MemoryAddress start_editing$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkCellRendererClass.start_editing$VH.get(seg);
    }
    public static void start_editing$set( MemorySegment seg, MemoryAddress x) {
        _GtkCellRendererClass.start_editing$VH.set(seg, x);
    }
    public static MemoryAddress start_editing$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkCellRendererClass.start_editing$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void start_editing$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkCellRendererClass.start_editing$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static start_editing start_editing (MemorySegment segment, MemorySession session) {
        return start_editing.ofAddress(start_editing$get(segment), session);
    }
    static final FunctionDescriptor editing_canceled$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle editing_canceled$MH = RuntimeHelper.downcallHandle(
        _GtkCellRendererClass.editing_canceled$FUNC
    );
    public interface editing_canceled {

        void apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(editing_canceled fi, MemorySession session) {
            return RuntimeHelper.upcallStub(editing_canceled.class, fi, _GtkCellRendererClass.editing_canceled$FUNC, session);
        }
        static editing_canceled ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    _GtkCellRendererClass.editing_canceled$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle editing_canceled$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("editing_canceled"));
    public static VarHandle editing_canceled$VH() {
        return _GtkCellRendererClass.editing_canceled$VH;
    }
    public static MemoryAddress editing_canceled$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkCellRendererClass.editing_canceled$VH.get(seg);
    }
    public static void editing_canceled$set( MemorySegment seg, MemoryAddress x) {
        _GtkCellRendererClass.editing_canceled$VH.set(seg, x);
    }
    public static MemoryAddress editing_canceled$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkCellRendererClass.editing_canceled$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void editing_canceled$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkCellRendererClass.editing_canceled$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static editing_canceled editing_canceled (MemorySegment segment, MemorySession session) {
        return editing_canceled.ofAddress(editing_canceled$get(segment), session);
    }
    static final FunctionDescriptor editing_started$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle editing_started$MH = RuntimeHelper.downcallHandle(
        _GtkCellRendererClass.editing_started$FUNC
    );
    public interface editing_started {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(editing_started fi, MemorySession session) {
            return RuntimeHelper.upcallStub(editing_started.class, fi, _GtkCellRendererClass.editing_started$FUNC, session);
        }
        static editing_started ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    _GtkCellRendererClass.editing_started$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle editing_started$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("editing_started"));
    public static VarHandle editing_started$VH() {
        return _GtkCellRendererClass.editing_started$VH;
    }
    public static MemoryAddress editing_started$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkCellRendererClass.editing_started$VH.get(seg);
    }
    public static void editing_started$set( MemorySegment seg, MemoryAddress x) {
        _GtkCellRendererClass.editing_started$VH.set(seg, x);
    }
    public static MemoryAddress editing_started$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkCellRendererClass.editing_started$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void editing_started$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkCellRendererClass.editing_started$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static editing_started editing_started (MemorySegment segment, MemorySession session) {
        return editing_started.ofAddress(editing_started$get(segment), session);
    }
    public static MemorySegment padding$slice(MemorySegment seg) {
        return seg.asSlice(224, 64);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


