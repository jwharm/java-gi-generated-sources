// Generated by jextract

package io.github.jwharm.javagi.interop.jextract;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class group_req {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_INT$LAYOUT.withName("gr_interface"),
        MemoryLayout.paddingLayout(32),
        MemoryLayout.structLayout(
            Constants$root.C_SHORT$LAYOUT.withName("ss_family"),
            MemoryLayout.sequenceLayout(118, Constants$root.C_CHAR$LAYOUT).withName("__ss_padding"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("__ss_align")
        ).withName("gr_group")
    ).withName("group_req");
    public static MemoryLayout $LAYOUT() {
        return group_req.$struct$LAYOUT;
    }
    static final VarHandle gr_interface$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("gr_interface"));
    public static VarHandle gr_interface$VH() {
        return group_req.gr_interface$VH;
    }
    public static int gr_interface$get(MemorySegment seg) {
        return (int)group_req.gr_interface$VH.get(seg);
    }
    public static void gr_interface$set( MemorySegment seg, int x) {
        group_req.gr_interface$VH.set(seg, x);
    }
    public static int gr_interface$get(MemorySegment seg, long index) {
        return (int)group_req.gr_interface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void gr_interface$set(MemorySegment seg, long index, int x) {
        group_req.gr_interface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment gr_group$slice(MemorySegment seg) {
        return seg.asSlice(8, 128);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


