// Generated by jextract

package io.github.jwharm.javagi.interop.jextract;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class tcp_md5sig {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            Constants$root.C_SHORT$LAYOUT.withName("ss_family"),
            MemoryLayout.sequenceLayout(118, Constants$root.C_CHAR$LAYOUT).withName("__ss_padding"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("__ss_align")
        ).withName("tcpm_addr"),
        Constants$root.C_CHAR$LAYOUT.withName("tcpm_flags"),
        Constants$root.C_CHAR$LAYOUT.withName("tcpm_prefixlen"),
        Constants$root.C_SHORT$LAYOUT.withName("tcpm_keylen"),
        Constants$root.C_INT$LAYOUT.withName("__tcpm_pad"),
        MemoryLayout.sequenceLayout(80, Constants$root.C_CHAR$LAYOUT).withName("tcpm_key")
    ).withName("tcp_md5sig");
    public static MemoryLayout $LAYOUT() {
        return tcp_md5sig.$struct$LAYOUT;
    }
    public static MemorySegment tcpm_addr$slice(MemorySegment seg) {
        return seg.asSlice(0, 128);
    }
    static final VarHandle tcpm_flags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("tcpm_flags"));
    public static VarHandle tcpm_flags$VH() {
        return tcp_md5sig.tcpm_flags$VH;
    }
    public static byte tcpm_flags$get(MemorySegment seg) {
        return (byte)tcp_md5sig.tcpm_flags$VH.get(seg);
    }
    public static void tcpm_flags$set( MemorySegment seg, byte x) {
        tcp_md5sig.tcpm_flags$VH.set(seg, x);
    }
    public static byte tcpm_flags$get(MemorySegment seg, long index) {
        return (byte)tcp_md5sig.tcpm_flags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void tcpm_flags$set(MemorySegment seg, long index, byte x) {
        tcp_md5sig.tcpm_flags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle tcpm_prefixlen$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("tcpm_prefixlen"));
    public static VarHandle tcpm_prefixlen$VH() {
        return tcp_md5sig.tcpm_prefixlen$VH;
    }
    public static byte tcpm_prefixlen$get(MemorySegment seg) {
        return (byte)tcp_md5sig.tcpm_prefixlen$VH.get(seg);
    }
    public static void tcpm_prefixlen$set( MemorySegment seg, byte x) {
        tcp_md5sig.tcpm_prefixlen$VH.set(seg, x);
    }
    public static byte tcpm_prefixlen$get(MemorySegment seg, long index) {
        return (byte)tcp_md5sig.tcpm_prefixlen$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void tcpm_prefixlen$set(MemorySegment seg, long index, byte x) {
        tcp_md5sig.tcpm_prefixlen$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle tcpm_keylen$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("tcpm_keylen"));
    public static VarHandle tcpm_keylen$VH() {
        return tcp_md5sig.tcpm_keylen$VH;
    }
    public static short tcpm_keylen$get(MemorySegment seg) {
        return (short)tcp_md5sig.tcpm_keylen$VH.get(seg);
    }
    public static void tcpm_keylen$set( MemorySegment seg, short x) {
        tcp_md5sig.tcpm_keylen$VH.set(seg, x);
    }
    public static short tcpm_keylen$get(MemorySegment seg, long index) {
        return (short)tcp_md5sig.tcpm_keylen$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void tcpm_keylen$set(MemorySegment seg, long index, short x) {
        tcp_md5sig.tcpm_keylen$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle __tcpm_pad$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("__tcpm_pad"));
    public static VarHandle __tcpm_pad$VH() {
        return tcp_md5sig.__tcpm_pad$VH;
    }
    public static int __tcpm_pad$get(MemorySegment seg) {
        return (int)tcp_md5sig.__tcpm_pad$VH.get(seg);
    }
    public static void __tcpm_pad$set( MemorySegment seg, int x) {
        tcp_md5sig.__tcpm_pad$VH.set(seg, x);
    }
    public static int __tcpm_pad$get(MemorySegment seg, long index) {
        return (int)tcp_md5sig.__tcpm_pad$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void __tcpm_pad$set(MemorySegment seg, long index, int x) {
        tcp_md5sig.__tcpm_pad$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment tcpm_key$slice(MemorySegment seg) {
        return seg.asSlice(136, 80);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


