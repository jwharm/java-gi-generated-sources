// Generated by jextract

package io.github.jwharm.javagi.interop.jextract;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _GdkContentProviderClass {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG_LONG$LAYOUT.withName("g_type")
            ).withName("g_type_class"),
            Constants$root.C_POINTER$LAYOUT.withName("construct_properties"),
            Constants$root.C_POINTER$LAYOUT.withName("constructor"),
            Constants$root.C_POINTER$LAYOUT.withName("set_property"),
            Constants$root.C_POINTER$LAYOUT.withName("get_property"),
            Constants$root.C_POINTER$LAYOUT.withName("dispose"),
            Constants$root.C_POINTER$LAYOUT.withName("finalize"),
            Constants$root.C_POINTER$LAYOUT.withName("dispatch_properties_changed"),
            Constants$root.C_POINTER$LAYOUT.withName("notify"),
            Constants$root.C_POINTER$LAYOUT.withName("constructed"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("flags"),
            MemoryLayout.sequenceLayout(6, Constants$root.C_POINTER$LAYOUT).withName("pdummy")
        ).withName("parent_class"),
        Constants$root.C_POINTER$LAYOUT.withName("content_changed"),
        Constants$root.C_POINTER$LAYOUT.withName("attach_clipboard"),
        Constants$root.C_POINTER$LAYOUT.withName("detach_clipboard"),
        Constants$root.C_POINTER$LAYOUT.withName("ref_formats"),
        Constants$root.C_POINTER$LAYOUT.withName("ref_storable_formats"),
        Constants$root.C_POINTER$LAYOUT.withName("write_mime_type_async"),
        Constants$root.C_POINTER$LAYOUT.withName("write_mime_type_finish"),
        Constants$root.C_POINTER$LAYOUT.withName("get_value"),
        MemoryLayout.sequenceLayout(8, Constants$root.C_POINTER$LAYOUT).withName("padding")
    ).withName("_GdkContentProviderClass");
    public static MemoryLayout $LAYOUT() {
        return _GdkContentProviderClass.$struct$LAYOUT;
    }
    public static MemorySegment parent_class$slice(MemorySegment seg) {
        return seg.asSlice(0, 136);
    }
    static final FunctionDescriptor content_changed$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle content_changed$MH = RuntimeHelper.downcallHandle(
        _GdkContentProviderClass.content_changed$FUNC
    );
    public interface content_changed {

        void apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(content_changed fi, MemorySession session) {
            return RuntimeHelper.upcallStub(content_changed.class, fi, _GdkContentProviderClass.content_changed$FUNC, session);
        }
        static content_changed ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    _GdkContentProviderClass.content_changed$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle content_changed$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("content_changed"));
    public static VarHandle content_changed$VH() {
        return _GdkContentProviderClass.content_changed$VH;
    }
    public static MemoryAddress content_changed$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GdkContentProviderClass.content_changed$VH.get(seg);
    }
    public static void content_changed$set( MemorySegment seg, MemoryAddress x) {
        _GdkContentProviderClass.content_changed$VH.set(seg, x);
    }
    public static MemoryAddress content_changed$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GdkContentProviderClass.content_changed$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void content_changed$set(MemorySegment seg, long index, MemoryAddress x) {
        _GdkContentProviderClass.content_changed$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static content_changed content_changed (MemorySegment segment, MemorySession session) {
        return content_changed.ofAddress(content_changed$get(segment), session);
    }
    static final FunctionDescriptor attach_clipboard$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle attach_clipboard$MH = RuntimeHelper.downcallHandle(
        _GdkContentProviderClass.attach_clipboard$FUNC
    );
    public interface attach_clipboard {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(attach_clipboard fi, MemorySession session) {
            return RuntimeHelper.upcallStub(attach_clipboard.class, fi, _GdkContentProviderClass.attach_clipboard$FUNC, session);
        }
        static attach_clipboard ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    _GdkContentProviderClass.attach_clipboard$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle attach_clipboard$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("attach_clipboard"));
    public static VarHandle attach_clipboard$VH() {
        return _GdkContentProviderClass.attach_clipboard$VH;
    }
    public static MemoryAddress attach_clipboard$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GdkContentProviderClass.attach_clipboard$VH.get(seg);
    }
    public static void attach_clipboard$set( MemorySegment seg, MemoryAddress x) {
        _GdkContentProviderClass.attach_clipboard$VH.set(seg, x);
    }
    public static MemoryAddress attach_clipboard$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GdkContentProviderClass.attach_clipboard$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void attach_clipboard$set(MemorySegment seg, long index, MemoryAddress x) {
        _GdkContentProviderClass.attach_clipboard$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static attach_clipboard attach_clipboard (MemorySegment segment, MemorySession session) {
        return attach_clipboard.ofAddress(attach_clipboard$get(segment), session);
    }
    static final FunctionDescriptor detach_clipboard$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle detach_clipboard$MH = RuntimeHelper.downcallHandle(
        _GdkContentProviderClass.detach_clipboard$FUNC
    );
    public interface detach_clipboard {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(detach_clipboard fi, MemorySession session) {
            return RuntimeHelper.upcallStub(detach_clipboard.class, fi, _GdkContentProviderClass.detach_clipboard$FUNC, session);
        }
        static detach_clipboard ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    _GdkContentProviderClass.detach_clipboard$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle detach_clipboard$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("detach_clipboard"));
    public static VarHandle detach_clipboard$VH() {
        return _GdkContentProviderClass.detach_clipboard$VH;
    }
    public static MemoryAddress detach_clipboard$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GdkContentProviderClass.detach_clipboard$VH.get(seg);
    }
    public static void detach_clipboard$set( MemorySegment seg, MemoryAddress x) {
        _GdkContentProviderClass.detach_clipboard$VH.set(seg, x);
    }
    public static MemoryAddress detach_clipboard$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GdkContentProviderClass.detach_clipboard$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void detach_clipboard$set(MemorySegment seg, long index, MemoryAddress x) {
        _GdkContentProviderClass.detach_clipboard$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static detach_clipboard detach_clipboard (MemorySegment segment, MemorySession session) {
        return detach_clipboard.ofAddress(detach_clipboard$get(segment), session);
    }
    static final FunctionDescriptor ref_formats$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle ref_formats$MH = RuntimeHelper.downcallHandle(
        _GdkContentProviderClass.ref_formats$FUNC
    );
    public interface ref_formats {

        java.lang.foreign.Addressable apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(ref_formats fi, MemorySession session) {
            return RuntimeHelper.upcallStub(ref_formats.class, fi, _GdkContentProviderClass.ref_formats$FUNC, session);
        }
        static ref_formats ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (java.lang.foreign.Addressable)(java.lang.foreign.MemoryAddress)_GdkContentProviderClass.ref_formats$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle ref_formats$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ref_formats"));
    public static VarHandle ref_formats$VH() {
        return _GdkContentProviderClass.ref_formats$VH;
    }
    public static MemoryAddress ref_formats$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GdkContentProviderClass.ref_formats$VH.get(seg);
    }
    public static void ref_formats$set( MemorySegment seg, MemoryAddress x) {
        _GdkContentProviderClass.ref_formats$VH.set(seg, x);
    }
    public static MemoryAddress ref_formats$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GdkContentProviderClass.ref_formats$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ref_formats$set(MemorySegment seg, long index, MemoryAddress x) {
        _GdkContentProviderClass.ref_formats$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static ref_formats ref_formats (MemorySegment segment, MemorySession session) {
        return ref_formats.ofAddress(ref_formats$get(segment), session);
    }
    static final FunctionDescriptor ref_storable_formats$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle ref_storable_formats$MH = RuntimeHelper.downcallHandle(
        _GdkContentProviderClass.ref_storable_formats$FUNC
    );
    public interface ref_storable_formats {

        java.lang.foreign.Addressable apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(ref_storable_formats fi, MemorySession session) {
            return RuntimeHelper.upcallStub(ref_storable_formats.class, fi, _GdkContentProviderClass.ref_storable_formats$FUNC, session);
        }
        static ref_storable_formats ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (java.lang.foreign.Addressable)(java.lang.foreign.MemoryAddress)_GdkContentProviderClass.ref_storable_formats$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle ref_storable_formats$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ref_storable_formats"));
    public static VarHandle ref_storable_formats$VH() {
        return _GdkContentProviderClass.ref_storable_formats$VH;
    }
    public static MemoryAddress ref_storable_formats$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GdkContentProviderClass.ref_storable_formats$VH.get(seg);
    }
    public static void ref_storable_formats$set( MemorySegment seg, MemoryAddress x) {
        _GdkContentProviderClass.ref_storable_formats$VH.set(seg, x);
    }
    public static MemoryAddress ref_storable_formats$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GdkContentProviderClass.ref_storable_formats$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ref_storable_formats$set(MemorySegment seg, long index, MemoryAddress x) {
        _GdkContentProviderClass.ref_storable_formats$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static ref_storable_formats ref_storable_formats (MemorySegment segment, MemorySession session) {
        return ref_storable_formats.ofAddress(ref_storable_formats$get(segment), session);
    }
    static final FunctionDescriptor write_mime_type_async$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle write_mime_type_async$MH = RuntimeHelper.downcallHandle(
        _GdkContentProviderClass.write_mime_type_async$FUNC
    );
    public interface write_mime_type_async {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2, int _x3, java.lang.foreign.MemoryAddress _x4, java.lang.foreign.MemoryAddress _x5, java.lang.foreign.MemoryAddress _x6);
        static MemorySegment allocate(write_mime_type_async fi, MemorySession session) {
            return RuntimeHelper.upcallStub(write_mime_type_async.class, fi, _GdkContentProviderClass.write_mime_type_async$FUNC, session);
        }
        static write_mime_type_async ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2, int __x3, java.lang.foreign.MemoryAddress __x4, java.lang.foreign.MemoryAddress __x5, java.lang.foreign.MemoryAddress __x6) -> {
                try {
                    _GdkContentProviderClass.write_mime_type_async$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2, __x3, (java.lang.foreign.Addressable)__x4, (java.lang.foreign.Addressable)__x5, (java.lang.foreign.Addressable)__x6);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle write_mime_type_async$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("write_mime_type_async"));
    public static VarHandle write_mime_type_async$VH() {
        return _GdkContentProviderClass.write_mime_type_async$VH;
    }
    public static MemoryAddress write_mime_type_async$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GdkContentProviderClass.write_mime_type_async$VH.get(seg);
    }
    public static void write_mime_type_async$set( MemorySegment seg, MemoryAddress x) {
        _GdkContentProviderClass.write_mime_type_async$VH.set(seg, x);
    }
    public static MemoryAddress write_mime_type_async$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GdkContentProviderClass.write_mime_type_async$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void write_mime_type_async$set(MemorySegment seg, long index, MemoryAddress x) {
        _GdkContentProviderClass.write_mime_type_async$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static write_mime_type_async write_mime_type_async (MemorySegment segment, MemorySession session) {
        return write_mime_type_async.ofAddress(write_mime_type_async$get(segment), session);
    }
    static final FunctionDescriptor write_mime_type_finish$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle write_mime_type_finish$MH = RuntimeHelper.downcallHandle(
        _GdkContentProviderClass.write_mime_type_finish$FUNC
    );
    public interface write_mime_type_finish {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(write_mime_type_finish fi, MemorySession session) {
            return RuntimeHelper.upcallStub(write_mime_type_finish.class, fi, _GdkContentProviderClass.write_mime_type_finish$FUNC, session);
        }
        static write_mime_type_finish ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    return (int)_GdkContentProviderClass.write_mime_type_finish$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle write_mime_type_finish$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("write_mime_type_finish"));
    public static VarHandle write_mime_type_finish$VH() {
        return _GdkContentProviderClass.write_mime_type_finish$VH;
    }
    public static MemoryAddress write_mime_type_finish$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GdkContentProviderClass.write_mime_type_finish$VH.get(seg);
    }
    public static void write_mime_type_finish$set( MemorySegment seg, MemoryAddress x) {
        _GdkContentProviderClass.write_mime_type_finish$VH.set(seg, x);
    }
    public static MemoryAddress write_mime_type_finish$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GdkContentProviderClass.write_mime_type_finish$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void write_mime_type_finish$set(MemorySegment seg, long index, MemoryAddress x) {
        _GdkContentProviderClass.write_mime_type_finish$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static write_mime_type_finish write_mime_type_finish (MemorySegment segment, MemorySession session) {
        return write_mime_type_finish.ofAddress(write_mime_type_finish$get(segment), session);
    }
    static final FunctionDescriptor get_value$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_value$MH = RuntimeHelper.downcallHandle(
        _GdkContentProviderClass.get_value$FUNC
    );
    public interface get_value {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(get_value fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_value.class, fi, _GdkContentProviderClass.get_value$FUNC, session);
        }
        static get_value ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    return (int)_GdkContentProviderClass.get_value$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_value$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_value"));
    public static VarHandle get_value$VH() {
        return _GdkContentProviderClass.get_value$VH;
    }
    public static MemoryAddress get_value$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GdkContentProviderClass.get_value$VH.get(seg);
    }
    public static void get_value$set( MemorySegment seg, MemoryAddress x) {
        _GdkContentProviderClass.get_value$VH.set(seg, x);
    }
    public static MemoryAddress get_value$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GdkContentProviderClass.get_value$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_value$set(MemorySegment seg, long index, MemoryAddress x) {
        _GdkContentProviderClass.get_value$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_value get_value (MemorySegment segment, MemorySession session) {
        return get_value.ofAddress(get_value$get(segment), session);
    }
    public static MemorySegment padding$slice(MemorySegment seg) {
        return seg.asSlice(200, 64);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


