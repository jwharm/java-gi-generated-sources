// Generated by jextract

package io.github.jwharm.javagi.interop.jextract;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class ns_tcp_tsig_state {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_INT$LAYOUT.withName("counter"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("key"),
        Constants$root.C_POINTER$LAYOUT.withName("ctx"),
        MemoryLayout.sequenceLayout(512, Constants$root.C_CHAR$LAYOUT).withName("sig"),
        Constants$root.C_INT$LAYOUT.withName("siglen"),
        MemoryLayout.paddingLayout(32)
    ).withName("ns_tcp_tsig_state");
    public static MemoryLayout $LAYOUT() {
        return ns_tcp_tsig_state.$struct$LAYOUT;
    }
    static final VarHandle counter$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("counter"));
    public static VarHandle counter$VH() {
        return ns_tcp_tsig_state.counter$VH;
    }
    public static int counter$get(MemorySegment seg) {
        return (int)ns_tcp_tsig_state.counter$VH.get(seg);
    }
    public static void counter$set( MemorySegment seg, int x) {
        ns_tcp_tsig_state.counter$VH.set(seg, x);
    }
    public static int counter$get(MemorySegment seg, long index) {
        return (int)ns_tcp_tsig_state.counter$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void counter$set(MemorySegment seg, long index, int x) {
        ns_tcp_tsig_state.counter$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle key$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("key"));
    public static VarHandle key$VH() {
        return ns_tcp_tsig_state.key$VH;
    }
    public static MemoryAddress key$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)ns_tcp_tsig_state.key$VH.get(seg);
    }
    public static void key$set( MemorySegment seg, MemoryAddress x) {
        ns_tcp_tsig_state.key$VH.set(seg, x);
    }
    public static MemoryAddress key$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)ns_tcp_tsig_state.key$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void key$set(MemorySegment seg, long index, MemoryAddress x) {
        ns_tcp_tsig_state.key$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ctx$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ctx"));
    public static VarHandle ctx$VH() {
        return ns_tcp_tsig_state.ctx$VH;
    }
    public static MemoryAddress ctx$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)ns_tcp_tsig_state.ctx$VH.get(seg);
    }
    public static void ctx$set( MemorySegment seg, MemoryAddress x) {
        ns_tcp_tsig_state.ctx$VH.set(seg, x);
    }
    public static MemoryAddress ctx$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)ns_tcp_tsig_state.ctx$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ctx$set(MemorySegment seg, long index, MemoryAddress x) {
        ns_tcp_tsig_state.ctx$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment sig$slice(MemorySegment seg) {
        return seg.asSlice(24, 512);
    }
    static final VarHandle siglen$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("siglen"));
    public static VarHandle siglen$VH() {
        return ns_tcp_tsig_state.siglen$VH;
    }
    public static int siglen$get(MemorySegment seg) {
        return (int)ns_tcp_tsig_state.siglen$VH.get(seg);
    }
    public static void siglen$set( MemorySegment seg, int x) {
        ns_tcp_tsig_state.siglen$VH.set(seg, x);
    }
    public static int siglen$get(MemorySegment seg, long index) {
        return (int)ns_tcp_tsig_state.siglen$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void siglen$set(MemorySegment seg, long index, int x) {
        ns_tcp_tsig_state.siglen$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


