// Generated by jextract

package io.github.jwharm.javagi.interop.jextract;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class ifmap {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG_LONG$LAYOUT.withName("mem_start"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("mem_end"),
        Constants$root.C_SHORT$LAYOUT.withName("base_addr"),
        Constants$root.C_CHAR$LAYOUT.withName("irq"),
        Constants$root.C_CHAR$LAYOUT.withName("dma"),
        Constants$root.C_CHAR$LAYOUT.withName("port"),
        MemoryLayout.paddingLayout(24)
    ).withName("ifmap");
    public static MemoryLayout $LAYOUT() {
        return ifmap.$struct$LAYOUT;
    }
    static final VarHandle mem_start$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("mem_start"));
    public static VarHandle mem_start$VH() {
        return ifmap.mem_start$VH;
    }
    public static long mem_start$get(MemorySegment seg) {
        return (long)ifmap.mem_start$VH.get(seg);
    }
    public static void mem_start$set( MemorySegment seg, long x) {
        ifmap.mem_start$VH.set(seg, x);
    }
    public static long mem_start$get(MemorySegment seg, long index) {
        return (long)ifmap.mem_start$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void mem_start$set(MemorySegment seg, long index, long x) {
        ifmap.mem_start$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle mem_end$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("mem_end"));
    public static VarHandle mem_end$VH() {
        return ifmap.mem_end$VH;
    }
    public static long mem_end$get(MemorySegment seg) {
        return (long)ifmap.mem_end$VH.get(seg);
    }
    public static void mem_end$set( MemorySegment seg, long x) {
        ifmap.mem_end$VH.set(seg, x);
    }
    public static long mem_end$get(MemorySegment seg, long index) {
        return (long)ifmap.mem_end$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void mem_end$set(MemorySegment seg, long index, long x) {
        ifmap.mem_end$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle base_addr$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("base_addr"));
    public static VarHandle base_addr$VH() {
        return ifmap.base_addr$VH;
    }
    public static short base_addr$get(MemorySegment seg) {
        return (short)ifmap.base_addr$VH.get(seg);
    }
    public static void base_addr$set( MemorySegment seg, short x) {
        ifmap.base_addr$VH.set(seg, x);
    }
    public static short base_addr$get(MemorySegment seg, long index) {
        return (short)ifmap.base_addr$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void base_addr$set(MemorySegment seg, long index, short x) {
        ifmap.base_addr$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle irq$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("irq"));
    public static VarHandle irq$VH() {
        return ifmap.irq$VH;
    }
    public static byte irq$get(MemorySegment seg) {
        return (byte)ifmap.irq$VH.get(seg);
    }
    public static void irq$set( MemorySegment seg, byte x) {
        ifmap.irq$VH.set(seg, x);
    }
    public static byte irq$get(MemorySegment seg, long index) {
        return (byte)ifmap.irq$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void irq$set(MemorySegment seg, long index, byte x) {
        ifmap.irq$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dma$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dma"));
    public static VarHandle dma$VH() {
        return ifmap.dma$VH;
    }
    public static byte dma$get(MemorySegment seg) {
        return (byte)ifmap.dma$VH.get(seg);
    }
    public static void dma$set( MemorySegment seg, byte x) {
        ifmap.dma$VH.set(seg, x);
    }
    public static byte dma$get(MemorySegment seg, long index) {
        return (byte)ifmap.dma$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dma$set(MemorySegment seg, long index, byte x) {
        ifmap.dma$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle port$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("port"));
    public static VarHandle port$VH() {
        return ifmap.port$VH;
    }
    public static byte port$get(MemorySegment seg) {
        return (byte)ifmap.port$VH.get(seg);
    }
    public static void port$set( MemorySegment seg, byte x) {
        ifmap.port$VH.set(seg, x);
    }
    public static byte port$get(MemorySegment seg, long index) {
        return (byte)ifmap.port$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void port$set(MemorySegment seg, long index, byte x) {
        ifmap.port$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


