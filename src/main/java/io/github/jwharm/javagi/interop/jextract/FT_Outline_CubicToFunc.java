// Generated by jextract

package io.github.jwharm.javagi.interop.jextract;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public interface FT_Outline_CubicToFunc {

    int apply(java.lang.foreign.MemoryAddress control1, java.lang.foreign.MemoryAddress control2, java.lang.foreign.MemoryAddress to, java.lang.foreign.MemoryAddress user);
    static MemorySegment allocate(FT_Outline_CubicToFunc fi, MemorySession session) {
        return RuntimeHelper.upcallStub(FT_Outline_CubicToFunc.class, fi, constants$2660.FT_Outline_CubicToFunc$FUNC, session);
    }
    static FT_Outline_CubicToFunc ofAddress(MemoryAddress addr, MemorySession session) {
        MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
        return (java.lang.foreign.MemoryAddress _control1, java.lang.foreign.MemoryAddress _control2, java.lang.foreign.MemoryAddress _to, java.lang.foreign.MemoryAddress _user) -> {
            try {
                return (int)constants$2660.FT_Outline_CubicToFunc$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)_control1, (java.lang.foreign.Addressable)_control2, (java.lang.foreign.Addressable)_to, (java.lang.foreign.Addressable)_user);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


