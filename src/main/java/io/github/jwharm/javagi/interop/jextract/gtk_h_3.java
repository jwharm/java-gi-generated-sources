// Generated by jextract

package io.github.jwharm.javagi.interop.jextract;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
 class gtk_h_3 extends gtk_h_2 {

    public static int GDK_KEY_braille_dots_138() {
        return (int)16787589L;
    }
    public static int GDK_KEY_braille_dots_238() {
        return (int)16787590L;
    }
    public static int GDK_KEY_braille_dots_1238() {
        return (int)16787591L;
    }
    public static int GDK_KEY_braille_dots_48() {
        return (int)16787592L;
    }
    public static int GDK_KEY_braille_dots_148() {
        return (int)16787593L;
    }
    public static int GDK_KEY_braille_dots_248() {
        return (int)16787594L;
    }
    public static int GDK_KEY_braille_dots_1248() {
        return (int)16787595L;
    }
    public static int GDK_KEY_braille_dots_348() {
        return (int)16787596L;
    }
    public static int GDK_KEY_braille_dots_1348() {
        return (int)16787597L;
    }
    public static int GDK_KEY_braille_dots_2348() {
        return (int)16787598L;
    }
    public static int GDK_KEY_braille_dots_12348() {
        return (int)16787599L;
    }
    public static int GDK_KEY_braille_dots_58() {
        return (int)16787600L;
    }
    public static int GDK_KEY_braille_dots_158() {
        return (int)16787601L;
    }
    public static int GDK_KEY_braille_dots_258() {
        return (int)16787602L;
    }
    public static int GDK_KEY_braille_dots_1258() {
        return (int)16787603L;
    }
    public static int GDK_KEY_braille_dots_358() {
        return (int)16787604L;
    }
    public static int GDK_KEY_braille_dots_1358() {
        return (int)16787605L;
    }
    public static int GDK_KEY_braille_dots_2358() {
        return (int)16787606L;
    }
    public static int GDK_KEY_braille_dots_12358() {
        return (int)16787607L;
    }
    public static int GDK_KEY_braille_dots_458() {
        return (int)16787608L;
    }
    public static int GDK_KEY_braille_dots_1458() {
        return (int)16787609L;
    }
    public static int GDK_KEY_braille_dots_2458() {
        return (int)16787610L;
    }
    public static int GDK_KEY_braille_dots_12458() {
        return (int)16787611L;
    }
    public static int GDK_KEY_braille_dots_3458() {
        return (int)16787612L;
    }
    public static int GDK_KEY_braille_dots_13458() {
        return (int)16787613L;
    }
    public static int GDK_KEY_braille_dots_23458() {
        return (int)16787614L;
    }
    public static int GDK_KEY_braille_dots_123458() {
        return (int)16787615L;
    }
    public static int GDK_KEY_braille_dots_68() {
        return (int)16787616L;
    }
    public static int GDK_KEY_braille_dots_168() {
        return (int)16787617L;
    }
    public static int GDK_KEY_braille_dots_268() {
        return (int)16787618L;
    }
    public static int GDK_KEY_braille_dots_1268() {
        return (int)16787619L;
    }
    public static int GDK_KEY_braille_dots_368() {
        return (int)16787620L;
    }
    public static int GDK_KEY_braille_dots_1368() {
        return (int)16787621L;
    }
    public static int GDK_KEY_braille_dots_2368() {
        return (int)16787622L;
    }
    public static int GDK_KEY_braille_dots_12368() {
        return (int)16787623L;
    }
    public static int GDK_KEY_braille_dots_468() {
        return (int)16787624L;
    }
    public static int GDK_KEY_braille_dots_1468() {
        return (int)16787625L;
    }
    public static int GDK_KEY_braille_dots_2468() {
        return (int)16787626L;
    }
    public static int GDK_KEY_braille_dots_12468() {
        return (int)16787627L;
    }
    public static int GDK_KEY_braille_dots_3468() {
        return (int)16787628L;
    }
    public static int GDK_KEY_braille_dots_13468() {
        return (int)16787629L;
    }
    public static int GDK_KEY_braille_dots_23468() {
        return (int)16787630L;
    }
    public static int GDK_KEY_braille_dots_123468() {
        return (int)16787631L;
    }
    public static int GDK_KEY_braille_dots_568() {
        return (int)16787632L;
    }
    public static int GDK_KEY_braille_dots_1568() {
        return (int)16787633L;
    }
    public static int GDK_KEY_braille_dots_2568() {
        return (int)16787634L;
    }
    public static int GDK_KEY_braille_dots_12568() {
        return (int)16787635L;
    }
    public static int GDK_KEY_braille_dots_3568() {
        return (int)16787636L;
    }
    public static int GDK_KEY_braille_dots_13568() {
        return (int)16787637L;
    }
    public static int GDK_KEY_braille_dots_23568() {
        return (int)16787638L;
    }
    public static int GDK_KEY_braille_dots_123568() {
        return (int)16787639L;
    }
    public static int GDK_KEY_braille_dots_4568() {
        return (int)16787640L;
    }
    public static int GDK_KEY_braille_dots_14568() {
        return (int)16787641L;
    }
    public static int GDK_KEY_braille_dots_24568() {
        return (int)16787642L;
    }
    public static int GDK_KEY_braille_dots_124568() {
        return (int)16787643L;
    }
    public static int GDK_KEY_braille_dots_34568() {
        return (int)16787644L;
    }
    public static int GDK_KEY_braille_dots_134568() {
        return (int)16787645L;
    }
    public static int GDK_KEY_braille_dots_234568() {
        return (int)16787646L;
    }
    public static int GDK_KEY_braille_dots_1234568() {
        return (int)16787647L;
    }
    public static int GDK_KEY_braille_dots_78() {
        return (int)16787648L;
    }
    public static int GDK_KEY_braille_dots_178() {
        return (int)16787649L;
    }
    public static int GDK_KEY_braille_dots_278() {
        return (int)16787650L;
    }
    public static int GDK_KEY_braille_dots_1278() {
        return (int)16787651L;
    }
    public static int GDK_KEY_braille_dots_378() {
        return (int)16787652L;
    }
    public static int GDK_KEY_braille_dots_1378() {
        return (int)16787653L;
    }
    public static int GDK_KEY_braille_dots_2378() {
        return (int)16787654L;
    }
    public static int GDK_KEY_braille_dots_12378() {
        return (int)16787655L;
    }
    public static int GDK_KEY_braille_dots_478() {
        return (int)16787656L;
    }
    public static int GDK_KEY_braille_dots_1478() {
        return (int)16787657L;
    }
    public static int GDK_KEY_braille_dots_2478() {
        return (int)16787658L;
    }
    public static int GDK_KEY_braille_dots_12478() {
        return (int)16787659L;
    }
    public static int GDK_KEY_braille_dots_3478() {
        return (int)16787660L;
    }
    public static int GDK_KEY_braille_dots_13478() {
        return (int)16787661L;
    }
    public static int GDK_KEY_braille_dots_23478() {
        return (int)16787662L;
    }
    public static int GDK_KEY_braille_dots_123478() {
        return (int)16787663L;
    }
    public static int GDK_KEY_braille_dots_578() {
        return (int)16787664L;
    }
    public static int GDK_KEY_braille_dots_1578() {
        return (int)16787665L;
    }
    public static int GDK_KEY_braille_dots_2578() {
        return (int)16787666L;
    }
    public static int GDK_KEY_braille_dots_12578() {
        return (int)16787667L;
    }
    public static int GDK_KEY_braille_dots_3578() {
        return (int)16787668L;
    }
    public static int GDK_KEY_braille_dots_13578() {
        return (int)16787669L;
    }
    public static int GDK_KEY_braille_dots_23578() {
        return (int)16787670L;
    }
    public static int GDK_KEY_braille_dots_123578() {
        return (int)16787671L;
    }
    public static int GDK_KEY_braille_dots_4578() {
        return (int)16787672L;
    }
    public static int GDK_KEY_braille_dots_14578() {
        return (int)16787673L;
    }
    public static int GDK_KEY_braille_dots_24578() {
        return (int)16787674L;
    }
    public static int GDK_KEY_braille_dots_124578() {
        return (int)16787675L;
    }
    public static int GDK_KEY_braille_dots_34578() {
        return (int)16787676L;
    }
    public static int GDK_KEY_braille_dots_134578() {
        return (int)16787677L;
    }
    public static int GDK_KEY_braille_dots_234578() {
        return (int)16787678L;
    }
    public static int GDK_KEY_braille_dots_1234578() {
        return (int)16787679L;
    }
    public static int GDK_KEY_braille_dots_678() {
        return (int)16787680L;
    }
    public static int GDK_KEY_braille_dots_1678() {
        return (int)16787681L;
    }
    public static int GDK_KEY_braille_dots_2678() {
        return (int)16787682L;
    }
    public static int GDK_KEY_braille_dots_12678() {
        return (int)16787683L;
    }
    public static int GDK_KEY_braille_dots_3678() {
        return (int)16787684L;
    }
    public static int GDK_KEY_braille_dots_13678() {
        return (int)16787685L;
    }
    public static int GDK_KEY_braille_dots_23678() {
        return (int)16787686L;
    }
    public static int GDK_KEY_braille_dots_123678() {
        return (int)16787687L;
    }
    public static int GDK_KEY_braille_dots_4678() {
        return (int)16787688L;
    }
    public static int GDK_KEY_braille_dots_14678() {
        return (int)16787689L;
    }
    public static int GDK_KEY_braille_dots_24678() {
        return (int)16787690L;
    }
    public static int GDK_KEY_braille_dots_124678() {
        return (int)16787691L;
    }
    public static int GDK_KEY_braille_dots_34678() {
        return (int)16787692L;
    }
    public static int GDK_KEY_braille_dots_134678() {
        return (int)16787693L;
    }
    public static int GDK_KEY_braille_dots_234678() {
        return (int)16787694L;
    }
    public static int GDK_KEY_braille_dots_1234678() {
        return (int)16787695L;
    }
    public static int GDK_KEY_braille_dots_5678() {
        return (int)16787696L;
    }
    public static int GDK_KEY_braille_dots_15678() {
        return (int)16787697L;
    }
    public static int GDK_KEY_braille_dots_25678() {
        return (int)16787698L;
    }
    public static int GDK_KEY_braille_dots_125678() {
        return (int)16787699L;
    }
    public static int GDK_KEY_braille_dots_35678() {
        return (int)16787700L;
    }
    public static int GDK_KEY_braille_dots_135678() {
        return (int)16787701L;
    }
    public static int GDK_KEY_braille_dots_235678() {
        return (int)16787702L;
    }
    public static int GDK_KEY_braille_dots_1235678() {
        return (int)16787703L;
    }
    public static int GDK_KEY_braille_dots_45678() {
        return (int)16787704L;
    }
    public static int GDK_KEY_braille_dots_145678() {
        return (int)16787705L;
    }
    public static int GDK_KEY_braille_dots_245678() {
        return (int)16787706L;
    }
    public static int GDK_KEY_braille_dots_1245678() {
        return (int)16787707L;
    }
    public static int GDK_KEY_braille_dots_345678() {
        return (int)16787708L;
    }
    public static int GDK_KEY_braille_dots_1345678() {
        return (int)16787709L;
    }
    public static int GDK_KEY_braille_dots_2345678() {
        return (int)16787710L;
    }
    public static int GDK_KEY_braille_dots_12345678() {
        return (int)16787711L;
    }
    public static int GDK_KEY_Sinh_ng() {
        return (int)16780674L;
    }
    public static int GDK_KEY_Sinh_h2() {
        return (int)16780675L;
    }
    public static int GDK_KEY_Sinh_a() {
        return (int)16780677L;
    }
    public static int GDK_KEY_Sinh_aa() {
        return (int)16780678L;
    }
    public static int GDK_KEY_Sinh_ae() {
        return (int)16780679L;
    }
    public static int GDK_KEY_Sinh_aee() {
        return (int)16780680L;
    }
    public static int GDK_KEY_Sinh_i() {
        return (int)16780681L;
    }
    public static int GDK_KEY_Sinh_ii() {
        return (int)16780682L;
    }
    public static int GDK_KEY_Sinh_u() {
        return (int)16780683L;
    }
    public static int GDK_KEY_Sinh_uu() {
        return (int)16780684L;
    }
    public static int GDK_KEY_Sinh_ri() {
        return (int)16780685L;
    }
    public static int GDK_KEY_Sinh_rii() {
        return (int)16780686L;
    }
    public static int GDK_KEY_Sinh_lu() {
        return (int)16780687L;
    }
    public static int GDK_KEY_Sinh_luu() {
        return (int)16780688L;
    }
    public static int GDK_KEY_Sinh_e() {
        return (int)16780689L;
    }
    public static int GDK_KEY_Sinh_ee() {
        return (int)16780690L;
    }
    public static int GDK_KEY_Sinh_ai() {
        return (int)16780691L;
    }
    public static int GDK_KEY_Sinh_o() {
        return (int)16780692L;
    }
    public static int GDK_KEY_Sinh_oo() {
        return (int)16780693L;
    }
    public static int GDK_KEY_Sinh_au() {
        return (int)16780694L;
    }
    public static int GDK_KEY_Sinh_ka() {
        return (int)16780698L;
    }
    public static int GDK_KEY_Sinh_kha() {
        return (int)16780699L;
    }
    public static int GDK_KEY_Sinh_ga() {
        return (int)16780700L;
    }
    public static int GDK_KEY_Sinh_gha() {
        return (int)16780701L;
    }
    public static int GDK_KEY_Sinh_ng2() {
        return (int)16780702L;
    }
    public static int GDK_KEY_Sinh_nga() {
        return (int)16780703L;
    }
    public static int GDK_KEY_Sinh_ca() {
        return (int)16780704L;
    }
    public static int GDK_KEY_Sinh_cha() {
        return (int)16780705L;
    }
    public static int GDK_KEY_Sinh_ja() {
        return (int)16780706L;
    }
    public static int GDK_KEY_Sinh_jha() {
        return (int)16780707L;
    }
    public static int GDK_KEY_Sinh_nya() {
        return (int)16780708L;
    }
    public static int GDK_KEY_Sinh_jnya() {
        return (int)16780709L;
    }
    public static int GDK_KEY_Sinh_nja() {
        return (int)16780710L;
    }
    public static int GDK_KEY_Sinh_tta() {
        return (int)16780711L;
    }
    public static int GDK_KEY_Sinh_ttha() {
        return (int)16780712L;
    }
    public static int GDK_KEY_Sinh_dda() {
        return (int)16780713L;
    }
    public static int GDK_KEY_Sinh_ddha() {
        return (int)16780714L;
    }
    public static int GDK_KEY_Sinh_nna() {
        return (int)16780715L;
    }
    public static int GDK_KEY_Sinh_ndda() {
        return (int)16780716L;
    }
    public static int GDK_KEY_Sinh_tha() {
        return (int)16780717L;
    }
    public static int GDK_KEY_Sinh_thha() {
        return (int)16780718L;
    }
    public static int GDK_KEY_Sinh_dha() {
        return (int)16780719L;
    }
    public static int GDK_KEY_Sinh_dhha() {
        return (int)16780720L;
    }
    public static int GDK_KEY_Sinh_na() {
        return (int)16780721L;
    }
    public static int GDK_KEY_Sinh_ndha() {
        return (int)16780723L;
    }
    public static int GDK_KEY_Sinh_pa() {
        return (int)16780724L;
    }
    public static int GDK_KEY_Sinh_pha() {
        return (int)16780725L;
    }
    public static int GDK_KEY_Sinh_ba() {
        return (int)16780726L;
    }
    public static int GDK_KEY_Sinh_bha() {
        return (int)16780727L;
    }
    public static int GDK_KEY_Sinh_ma() {
        return (int)16780728L;
    }
    public static int GDK_KEY_Sinh_mba() {
        return (int)16780729L;
    }
    public static int GDK_KEY_Sinh_ya() {
        return (int)16780730L;
    }
    public static int GDK_KEY_Sinh_ra() {
        return (int)16780731L;
    }
    public static int GDK_KEY_Sinh_la() {
        return (int)16780733L;
    }
    public static int GDK_KEY_Sinh_va() {
        return (int)16780736L;
    }
    public static int GDK_KEY_Sinh_sha() {
        return (int)16780737L;
    }
    public static int GDK_KEY_Sinh_ssha() {
        return (int)16780738L;
    }
    public static int GDK_KEY_Sinh_sa() {
        return (int)16780739L;
    }
    public static int GDK_KEY_Sinh_ha() {
        return (int)16780740L;
    }
    public static int GDK_KEY_Sinh_lla() {
        return (int)16780741L;
    }
    public static int GDK_KEY_Sinh_fa() {
        return (int)16780742L;
    }
    public static int GDK_KEY_Sinh_al() {
        return (int)16780746L;
    }
    public static int GDK_KEY_Sinh_aa2() {
        return (int)16780751L;
    }
    public static int GDK_KEY_Sinh_ae2() {
        return (int)16780752L;
    }
    public static int GDK_KEY_Sinh_aee2() {
        return (int)16780753L;
    }
    public static int GDK_KEY_Sinh_i2() {
        return (int)16780754L;
    }
    public static int GDK_KEY_Sinh_ii2() {
        return (int)16780755L;
    }
    public static int GDK_KEY_Sinh_u2() {
        return (int)16780756L;
    }
    public static int GDK_KEY_Sinh_uu2() {
        return (int)16780758L;
    }
    public static int GDK_KEY_Sinh_ru2() {
        return (int)16780760L;
    }
    public static int GDK_KEY_Sinh_e2() {
        return (int)16780761L;
    }
    public static int GDK_KEY_Sinh_ee2() {
        return (int)16780762L;
    }
    public static int GDK_KEY_Sinh_ai2() {
        return (int)16780763L;
    }
    public static int GDK_KEY_Sinh_o2() {
        return (int)16780764L;
    }
    public static int GDK_KEY_Sinh_oo2() {
        return (int)16780765L;
    }
    public static int GDK_KEY_Sinh_au2() {
        return (int)16780766L;
    }
    public static int GDK_KEY_Sinh_lu2() {
        return (int)16780767L;
    }
    public static int GDK_KEY_Sinh_ruu2() {
        return (int)16780786L;
    }
    public static int GDK_KEY_Sinh_luu2() {
        return (int)16780787L;
    }
    public static int GDK_KEY_Sinh_kunddaliya() {
        return (int)16780788L;
    }
    public static int GDK_KEY_ModeLock() {
        return (int)269025025L;
    }
    public static int GDK_KEY_MonBrightnessUp() {
        return (int)269025026L;
    }
    public static int GDK_KEY_MonBrightnessDown() {
        return (int)269025027L;
    }
    public static int GDK_KEY_KbdLightOnOff() {
        return (int)269025028L;
    }
    public static int GDK_KEY_KbdBrightnessUp() {
        return (int)269025029L;
    }
    public static int GDK_KEY_KbdBrightnessDown() {
        return (int)269025030L;
    }
    public static int GDK_KEY_Standby() {
        return (int)269025040L;
    }
    public static int GDK_KEY_AudioLowerVolume() {
        return (int)269025041L;
    }
    public static int GDK_KEY_AudioMute() {
        return (int)269025042L;
    }
    public static int GDK_KEY_AudioRaiseVolume() {
        return (int)269025043L;
    }
    public static int GDK_KEY_AudioPlay() {
        return (int)269025044L;
    }
    public static int GDK_KEY_AudioStop() {
        return (int)269025045L;
    }
    public static int GDK_KEY_AudioPrev() {
        return (int)269025046L;
    }
    public static int GDK_KEY_AudioNext() {
        return (int)269025047L;
    }
    public static int GDK_KEY_HomePage() {
        return (int)269025048L;
    }
    public static int GDK_KEY_Mail() {
        return (int)269025049L;
    }
    public static int GDK_KEY_Start() {
        return (int)269025050L;
    }
    public static int GDK_KEY_Search() {
        return (int)269025051L;
    }
    public static int GDK_KEY_AudioRecord() {
        return (int)269025052L;
    }
    public static int GDK_KEY_Calculator() {
        return (int)269025053L;
    }
    public static int GDK_KEY_Memo() {
        return (int)269025054L;
    }
    public static int GDK_KEY_ToDoList() {
        return (int)269025055L;
    }
    public static int GDK_KEY_Calendar() {
        return (int)269025056L;
    }
    public static int GDK_KEY_PowerDown() {
        return (int)269025057L;
    }
    public static int GDK_KEY_ContrastAdjust() {
        return (int)269025058L;
    }
    public static int GDK_KEY_RockerUp() {
        return (int)269025059L;
    }
    public static int GDK_KEY_RockerDown() {
        return (int)269025060L;
    }
    public static int GDK_KEY_RockerEnter() {
        return (int)269025061L;
    }
    public static int GDK_KEY_Back() {
        return (int)269025062L;
    }
    public static int GDK_KEY_Forward() {
        return (int)269025063L;
    }
    public static int GDK_KEY_Stop() {
        return (int)269025064L;
    }
    public static int GDK_KEY_Refresh() {
        return (int)269025065L;
    }
    public static int GDK_KEY_PowerOff() {
        return (int)269025066L;
    }
    public static int GDK_KEY_WakeUp() {
        return (int)269025067L;
    }
    public static int GDK_KEY_Eject() {
        return (int)269025068L;
    }
    public static int GDK_KEY_ScreenSaver() {
        return (int)269025069L;
    }
    public static int GDK_KEY_WWW() {
        return (int)269025070L;
    }
    public static int GDK_KEY_Sleep() {
        return (int)269025071L;
    }
    public static int GDK_KEY_Favorites() {
        return (int)269025072L;
    }
    public static int GDK_KEY_AudioPause() {
        return (int)269025073L;
    }
    public static int GDK_KEY_AudioMedia() {
        return (int)269025074L;
    }
    public static int GDK_KEY_MyComputer() {
        return (int)269025075L;
    }
    public static int GDK_KEY_VendorHome() {
        return (int)269025076L;
    }
    public static int GDK_KEY_LightBulb() {
        return (int)269025077L;
    }
    public static int GDK_KEY_Shop() {
        return (int)269025078L;
    }
    public static int GDK_KEY_History() {
        return (int)269025079L;
    }
    public static int GDK_KEY_OpenURL() {
        return (int)269025080L;
    }
    public static int GDK_KEY_AddFavorite() {
        return (int)269025081L;
    }
    public static int GDK_KEY_HotLinks() {
        return (int)269025082L;
    }
    public static int GDK_KEY_BrightnessAdjust() {
        return (int)269025083L;
    }
    public static int GDK_KEY_Finance() {
        return (int)269025084L;
    }
    public static int GDK_KEY_Community() {
        return (int)269025085L;
    }
    public static int GDK_KEY_AudioRewind() {
        return (int)269025086L;
    }
    public static int GDK_KEY_BackForward() {
        return (int)269025087L;
    }
    public static int GDK_KEY_Launch0() {
        return (int)269025088L;
    }
    public static int GDK_KEY_Launch1() {
        return (int)269025089L;
    }
    public static int GDK_KEY_Launch2() {
        return (int)269025090L;
    }
    public static int GDK_KEY_Launch3() {
        return (int)269025091L;
    }
    public static int GDK_KEY_Launch4() {
        return (int)269025092L;
    }
    public static int GDK_KEY_Launch5() {
        return (int)269025093L;
    }
    public static int GDK_KEY_Launch6() {
        return (int)269025094L;
    }
    public static int GDK_KEY_Launch7() {
        return (int)269025095L;
    }
    public static int GDK_KEY_Launch8() {
        return (int)269025096L;
    }
    public static int GDK_KEY_Launch9() {
        return (int)269025097L;
    }
    public static int GDK_KEY_LaunchA() {
        return (int)269025098L;
    }
    public static int GDK_KEY_LaunchB() {
        return (int)269025099L;
    }
    public static int GDK_KEY_LaunchC() {
        return (int)269025100L;
    }
    public static int GDK_KEY_LaunchD() {
        return (int)269025101L;
    }
    public static int GDK_KEY_LaunchE() {
        return (int)269025102L;
    }
    public static int GDK_KEY_LaunchF() {
        return (int)269025103L;
    }
    public static int GDK_KEY_ApplicationLeft() {
        return (int)269025104L;
    }
    public static int GDK_KEY_ApplicationRight() {
        return (int)269025105L;
    }
    public static int GDK_KEY_Book() {
        return (int)269025106L;
    }
    public static int GDK_KEY_CD() {
        return (int)269025107L;
    }
    public static int GDK_KEY_WindowClear() {
        return (int)269025109L;
    }
    public static int GDK_KEY_Close() {
        return (int)269025110L;
    }
    public static int GDK_KEY_Copy() {
        return (int)269025111L;
    }
    public static int GDK_KEY_Cut() {
        return (int)269025112L;
    }
    public static int GDK_KEY_Display() {
        return (int)269025113L;
    }
    public static int GDK_KEY_DOS() {
        return (int)269025114L;
    }
    public static int GDK_KEY_Documents() {
        return (int)269025115L;
    }
    public static int GDK_KEY_Excel() {
        return (int)269025116L;
    }
    public static int GDK_KEY_Explorer() {
        return (int)269025117L;
    }
    public static int GDK_KEY_Game() {
        return (int)269025118L;
    }
    public static int GDK_KEY_Go() {
        return (int)269025119L;
    }
    public static int GDK_KEY_iTouch() {
        return (int)269025120L;
    }
    public static int GDK_KEY_LogOff() {
        return (int)269025121L;
    }
    public static int GDK_KEY_Market() {
        return (int)269025122L;
    }
    public static int GDK_KEY_Meeting() {
        return (int)269025123L;
    }
    public static int GDK_KEY_MenuKB() {
        return (int)269025125L;
    }
    public static int GDK_KEY_MenuPB() {
        return (int)269025126L;
    }
    public static int GDK_KEY_MySites() {
        return (int)269025127L;
    }
    public static int GDK_KEY_New() {
        return (int)269025128L;
    }
    public static int GDK_KEY_News() {
        return (int)269025129L;
    }
    public static int GDK_KEY_OfficeHome() {
        return (int)269025130L;
    }
    public static int GDK_KEY_Open() {
        return (int)269025131L;
    }
    public static int GDK_KEY_Option() {
        return (int)269025132L;
    }
    public static int GDK_KEY_Paste() {
        return (int)269025133L;
    }
    public static int GDK_KEY_Phone() {
        return (int)269025134L;
    }
    public static int GDK_KEY_Reply() {
        return (int)269025138L;
    }
    public static int GDK_KEY_Reload() {
        return (int)269025139L;
    }
    public static int GDK_KEY_RotateWindows() {
        return (int)269025140L;
    }
    public static int GDK_KEY_RotationPB() {
        return (int)269025141L;
    }
    public static int GDK_KEY_RotationKB() {
        return (int)269025142L;
    }
    public static int GDK_KEY_Save() {
        return (int)269025143L;
    }
    public static int GDK_KEY_ScrollUp() {
        return (int)269025144L;
    }
    public static int GDK_KEY_ScrollDown() {
        return (int)269025145L;
    }
    public static int GDK_KEY_ScrollClick() {
        return (int)269025146L;
    }
    public static int GDK_KEY_Send() {
        return (int)269025147L;
    }
    public static int GDK_KEY_Spell() {
        return (int)269025148L;
    }
    public static int GDK_KEY_SplitScreen() {
        return (int)269025149L;
    }
    public static int GDK_KEY_Support() {
        return (int)269025150L;
    }
    public static int GDK_KEY_TaskPane() {
        return (int)269025151L;
    }
    public static int GDK_KEY_Terminal() {
        return (int)269025152L;
    }
    public static int GDK_KEY_Tools() {
        return (int)269025153L;
    }
    public static int GDK_KEY_Travel() {
        return (int)269025154L;
    }
    public static int GDK_KEY_UserPB() {
        return (int)269025156L;
    }
    public static int GDK_KEY_User1KB() {
        return (int)269025157L;
    }
    public static int GDK_KEY_User2KB() {
        return (int)269025158L;
    }
    public static int GDK_KEY_Video() {
        return (int)269025159L;
    }
    public static int GDK_KEY_WheelButton() {
        return (int)269025160L;
    }
    public static int GDK_KEY_Word() {
        return (int)269025161L;
    }
    public static int GDK_KEY_Xfer() {
        return (int)269025162L;
    }
    public static int GDK_KEY_ZoomIn() {
        return (int)269025163L;
    }
    public static int GDK_KEY_ZoomOut() {
        return (int)269025164L;
    }
    public static int GDK_KEY_Away() {
        return (int)269025165L;
    }
    public static int GDK_KEY_Messenger() {
        return (int)269025166L;
    }
    public static int GDK_KEY_WebCam() {
        return (int)269025167L;
    }
    public static int GDK_KEY_MailForward() {
        return (int)269025168L;
    }
    public static int GDK_KEY_Pictures() {
        return (int)269025169L;
    }
    public static int GDK_KEY_Music() {
        return (int)269025170L;
    }
    public static int GDK_KEY_Battery() {
        return (int)269025171L;
    }
    public static int GDK_KEY_Bluetooth() {
        return (int)269025172L;
    }
    public static int GDK_KEY_WLAN() {
        return (int)269025173L;
    }
    public static int GDK_KEY_UWB() {
        return (int)269025174L;
    }
    public static int GDK_KEY_AudioForward() {
        return (int)269025175L;
    }
    public static int GDK_KEY_AudioRepeat() {
        return (int)269025176L;
    }
    public static int GDK_KEY_AudioRandomPlay() {
        return (int)269025177L;
    }
    public static int GDK_KEY_Subtitle() {
        return (int)269025178L;
    }
    public static int GDK_KEY_AudioCycleTrack() {
        return (int)269025179L;
    }
    public static int GDK_KEY_CycleAngle() {
        return (int)269025180L;
    }
    public static int GDK_KEY_FrameBack() {
        return (int)269025181L;
    }
    public static int GDK_KEY_FrameForward() {
        return (int)269025182L;
    }
    public static int GDK_KEY_Time() {
        return (int)269025183L;
    }
    public static int GDK_KEY_SelectButton() {
        return (int)269025184L;
    }
    public static int GDK_KEY_View() {
        return (int)269025185L;
    }
    public static int GDK_KEY_TopMenu() {
        return (int)269025186L;
    }
    public static int GDK_KEY_Red() {
        return (int)269025187L;
    }
    public static int GDK_KEY_Green() {
        return (int)269025188L;
    }
    public static int GDK_KEY_Yellow() {
        return (int)269025189L;
    }
    public static int GDK_KEY_Blue() {
        return (int)269025190L;
    }
    public static int GDK_KEY_Suspend() {
        return (int)269025191L;
    }
    public static int GDK_KEY_Hibernate() {
        return (int)269025192L;
    }
    public static int GDK_KEY_TouchpadToggle() {
        return (int)269025193L;
    }
    public static int GDK_KEY_TouchpadOn() {
        return (int)269025200L;
    }
    public static int GDK_KEY_TouchpadOff() {
        return (int)269025201L;
    }
    public static int GDK_KEY_AudioMicMute() {
        return (int)269025202L;
    }
    public static int GDK_KEY_Keyboard() {
        return (int)269025203L;
    }
    public static int GDK_KEY_WWAN() {
        return (int)269025204L;
    }
    public static int GDK_KEY_RFKill() {
        return (int)269025205L;
    }
    public static int GDK_KEY_AudioPreset() {
        return (int)269025206L;
    }
    public static int GDK_KEY_Switch_VT_1() {
        return (int)269024769L;
    }
    public static int GDK_KEY_Switch_VT_2() {
        return (int)269024770L;
    }
    public static int GDK_KEY_Switch_VT_3() {
        return (int)269024771L;
    }
    public static int GDK_KEY_Switch_VT_4() {
        return (int)269024772L;
    }
    public static int GDK_KEY_Switch_VT_5() {
        return (int)269024773L;
    }
    public static int GDK_KEY_Switch_VT_6() {
        return (int)269024774L;
    }
    public static int GDK_KEY_Switch_VT_7() {
        return (int)269024775L;
    }
    public static int GDK_KEY_Switch_VT_8() {
        return (int)269024776L;
    }
    public static int GDK_KEY_Switch_VT_9() {
        return (int)269024777L;
    }
    public static int GDK_KEY_Switch_VT_10() {
        return (int)269024778L;
    }
    public static int GDK_KEY_Switch_VT_11() {
        return (int)269024779L;
    }
    public static int GDK_KEY_Switch_VT_12() {
        return (int)269024780L;
    }
    public static int GDK_KEY_Ungrab() {
        return (int)269024800L;
    }
    public static int GDK_KEY_ClearGrab() {
        return (int)269024801L;
    }
    public static int GDK_KEY_Next_VMode() {
        return (int)269024802L;
    }
    public static int GDK_KEY_Prev_VMode() {
        return (int)269024803L;
    }
    public static int GDK_KEY_LogWindowTree() {
        return (int)269024804L;
    }
    public static int GDK_KEY_LogGrabInfo() {
        return (int)269024805L;
    }
    public static int GRAPHENE_HAS_SSE() {
        return (int)1L;
    }
    public static int GRAPHENE_HAS_SCALAR() {
        return (int)1L;
    }
    public static int _MM_HINT_ET0() {
        return (int)7L;
    }
    public static int _MM_HINT_ET1() {
        return (int)6L;
    }
    public static int _MM_HINT_T0() {
        return (int)3L;
    }
    public static int _MM_HINT_T1() {
        return (int)2L;
    }
    public static int _MM_HINT_T2() {
        return (int)1L;
    }
    public static int _MM_HINT_NTA() {
        return (int)0L;
    }
    public static int true_() {
        return (int)1L;
    }
    public static int false_() {
        return (int)0L;
    }
    public static int __bool_true_false_are_defined() {
        return (int)1L;
    }
    public static int GRAPHENE_VEC2_LEN() {
        return (int)2L;
    }
    public static int GRAPHENE_VEC3_LEN() {
        return (int)3L;
    }
    public static int GRAPHENE_VEC4_LEN() {
        return (int)4L;
    }
    public static int _MATH_H() {
        return (int)1L;
    }
    public static int _BITS_LIBM_SIMD_DECL_STUBS_H() {
        return (int)1L;
    }
    public static int __FP_LOGB0_IS_MIN() {
        return (int)1L;
    }
    public static int __FP_LOGBNAN_IS_MIN() {
        return (int)1L;
    }
    public static int __MATH_DECLARING_DOUBLE() {
        return (int)1L;
    }
    public static int __MATH_DECLARING_FLOATN() {
        return (int)0L;
    }
    public static int __MATH_DECLARE_LDOUBLE() {
        return (int)1L;
    }
    public static int FP_NAN() {
        return (int)0L;
    }
    public static int FP_INFINITE() {
        return (int)1L;
    }
    public static int FP_ZERO() {
        return (int)2L;
    }
    public static int FP_SUBNORMAL() {
        return (int)3L;
    }
    public static int FP_NORMAL() {
        return (int)4L;
    }
    public static int MATH_ERRNO() {
        return (int)1L;
    }
    public static int MATH_ERREXCEPT() {
        return (int)2L;
    }
    public static int GTK_MAX_COMPOSE_LEN() {
        return (int)7L;
    }
    public static int GTK_STYLE_PROVIDER_PRIORITY_FALLBACK() {
        return (int)1L;
    }
    public static int GTK_STYLE_PROVIDER_PRIORITY_THEME() {
        return (int)200L;
    }
    public static int GTK_STYLE_PROVIDER_PRIORITY_SETTINGS() {
        return (int)400L;
    }
    public static int GTK_STYLE_PROVIDER_PRIORITY_APPLICATION() {
        return (int)600L;
    }
    public static int GTK_STYLE_PROVIDER_PRIORITY_USER() {
        return (int)800L;
    }
    public static int FT_MAX_MODULES() {
        return (int)32L;
    }
    public static int TT_CONFIG_OPTION_SUBPIXEL_HINTING() {
        return (int)2L;
    }
    public static int T1_MAX_DICT_DEPTH() {
        return (int)5L;
    }
    public static int T1_MAX_SUBRS_CALLS() {
        return (int)16L;
    }
    public static int T1_MAX_CHARSTRINGS_OPERANDS() {
        return (int)256L;
    }
    public static int CFF_CONFIG_OPTION_DARKENING_PARAMETER_X1() {
        return (int)500L;
    }
    public static int CFF_CONFIG_OPTION_DARKENING_PARAMETER_Y1() {
        return (int)400L;
    }
    public static int CFF_CONFIG_OPTION_DARKENING_PARAMETER_X2() {
        return (int)1000L;
    }
    public static int CFF_CONFIG_OPTION_DARKENING_PARAMETER_Y2() {
        return (int)275L;
    }
    public static int CFF_CONFIG_OPTION_DARKENING_PARAMETER_X3() {
        return (int)1667L;
    }
    public static int CFF_CONFIG_OPTION_DARKENING_PARAMETER_Y3() {
        return (int)275L;
    }
    public static int CFF_CONFIG_OPTION_DARKENING_PARAMETER_X4() {
        return (int)2333L;
    }
    public static int CFF_CONFIG_OPTION_DARKENING_PARAMETER_Y4() {
        return (int)0L;
    }
    public static int _SETJMP_H() {
        return (int)1L;
    }
    public static int HAVE_UNISTD_H() {
        return (int)1L;
    }
    public static int HAVE_FCNTL_H() {
        return (int)1L;
    }
    public static int FT_OUTLINE_NONE() {
        return (int)0L;
    }
    public static int FT_OUTLINE_OWNER() {
        return (int)1L;
    }
    public static int FT_OUTLINE_EVEN_ODD_FILL() {
        return (int)2L;
    }
    public static int FT_OUTLINE_REVERSE_FILL() {
        return (int)4L;
    }
    public static int FT_OUTLINE_IGNORE_DROPOUTS() {
        return (int)8L;
    }
    public static int FT_OUTLINE_SMART_DROPOUTS() {
        return (int)16L;
    }
    public static int FT_OUTLINE_INCLUDE_STUBS() {
        return (int)32L;
    }
    public static int FT_OUTLINE_OVERLAP() {
        return (int)64L;
    }
    public static int FT_OUTLINE_HIGH_PRECISION() {
        return (int)256L;
    }
    public static int FT_OUTLINE_SINGLE_PASS() {
        return (int)512L;
    }
    public static int FT_CURVE_TAG_ON() {
        return (int)1L;
    }
    public static int FT_CURVE_TAG_CONIC() {
        return (int)0L;
    }
    public static int FT_CURVE_TAG_CUBIC() {
        return (int)2L;
    }
    public static int FT_CURVE_TAG_HAS_SCANMODE() {
        return (int)4L;
    }
    public static int FT_CURVE_TAG_TOUCH_X() {
        return (int)8L;
    }
    public static int FT_CURVE_TAG_TOUCH_Y() {
        return (int)16L;
    }
    public static int FT_RASTER_FLAG_DEFAULT() {
        return (int)0L;
    }
    public static int FT_RASTER_FLAG_AA() {
        return (int)1L;
    }
    public static int FT_RASTER_FLAG_DIRECT() {
        return (int)2L;
    }
    public static int FT_RASTER_FLAG_CLIP() {
        return (int)4L;
    }
    public static int FT_RASTER_FLAG_SDF() {
        return (int)8L;
    }
    public static int FT_ERR_BASE() {
        return (int)0L;
    }
    public static int FT_OPEN_MEMORY() {
        return (int)1L;
    }
    public static int FT_OPEN_STREAM() {
        return (int)2L;
    }
    public static int FT_OPEN_PATHNAME() {
        return (int)4L;
    }
    public static int FT_OPEN_DRIVER() {
        return (int)8L;
    }
    public static int FT_OPEN_PARAMS() {
        return (int)16L;
    }
    public static int FT_LOAD_DEFAULT() {
        return (int)0L;
    }
    public static int FT_SUBGLYPH_FLAG_ARGS_ARE_WORDS() {
        return (int)1L;
    }
    public static int FT_SUBGLYPH_FLAG_ARGS_ARE_XY_VALUES() {
        return (int)2L;
    }
    public static int FT_SUBGLYPH_FLAG_ROUND_XY_TO_GRID() {
        return (int)4L;
    }
    public static int FT_SUBGLYPH_FLAG_SCALE() {
        return (int)8L;
    }
    public static int FT_SUBGLYPH_FLAG_XY_SCALE() {
        return (int)64L;
    }
    public static int FT_SUBGLYPH_FLAG_2X2() {
        return (int)128L;
    }
    public static int FT_SUBGLYPH_FLAG_USE_MY_METRICS() {
        return (int)512L;
    }
    public static int FT_FSTYPE_INSTALLABLE_EMBEDDING() {
        return (int)0L;
    }
    public static int FT_FSTYPE_RESTRICTED_LICENSE_EMBEDDING() {
        return (int)2L;
    }
    public static int FT_FSTYPE_PREVIEW_AND_PRINT_EMBEDDING() {
        return (int)4L;
    }
    public static int FT_FSTYPE_EDITABLE_EMBEDDING() {
        return (int)8L;
    }
    public static int FT_FSTYPE_NO_SUBSETTING() {
        return (int)256L;
    }
    public static int FT_FSTYPE_BITMAP_EMBEDDING_ONLY() {
        return (int)512L;
    }
    public static int FREETYPE_MAJOR() {
        return (int)2L;
    }
    public static int FREETYPE_MINOR() {
        return (int)12L;
    }
    public static int FREETYPE_PATCH() {
        return (int)1L;
    }
    public static OfLong ptrdiff_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt wchar_t = Constants$root.C_INT$LAYOUT;
    public static OfShort gint16 = Constants$root.C_SHORT$LAYOUT;
    public static OfInt gint32 = Constants$root.C_INT$LAYOUT;
    public static OfLong gint64 = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong gssize = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong goffset = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong gintptr = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt GPid = Constants$root.C_INT$LAYOUT;
    public static OfShort __int16_t = Constants$root.C_SHORT$LAYOUT;
    public static OfInt __int32_t = Constants$root.C_INT$LAYOUT;
    public static OfLong __int64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfShort __int_least16_t = Constants$root.C_SHORT$LAYOUT;
    public static OfInt __int_least32_t = Constants$root.C_INT$LAYOUT;
    public static OfLong __int_least64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __quad_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __intmax_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __off_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __off64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt __pid_t = Constants$root.C_INT$LAYOUT;
    public static OfLong __clock_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __time_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __suseconds_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __suseconds64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt __daddr_t = Constants$root.C_INT$LAYOUT;
    public static OfInt __key_t = Constants$root.C_INT$LAYOUT;
    public static OfInt __clockid_t = Constants$root.C_INT$LAYOUT;
    public static OfAddress __timer_t = Constants$root.C_POINTER$LAYOUT;
    public static OfLong __blksize_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __blkcnt_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __blkcnt64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __fsword_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __ssize_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __syscall_slong_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __loff_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfAddress __caddr_t = Constants$root.C_POINTER$LAYOUT;
    public static OfLong __intptr_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt __sig_atomic_t = Constants$root.C_INT$LAYOUT;
    public static OfLong clock_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong time_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt clockid_t = Constants$root.C_INT$LAYOUT;
    public static OfAddress timer_t = Constants$root.C_POINTER$LAYOUT;
    public static OfInt pid_t = Constants$root.C_INT$LAYOUT;
    public static OfAddress __locale_t = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress locale_t = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle clock$MH() {
        return RuntimeHelper.requireNonNull(constants$0.clock$MH,"clock");
    }
    public static long clock () {
        var mh$ = clock$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle time$MH() {
        return RuntimeHelper.requireNonNull(constants$0.time$MH,"time");
    }
    public static long time ( Addressable __timer) {
        var mh$ = time$MH();
        try {
            return (long)mh$.invokeExact(__timer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle difftime$MH() {
        return RuntimeHelper.requireNonNull(constants$0.difftime$MH,"difftime");
    }
    public static double difftime ( long __time1,  long __time0) {
        var mh$ = difftime$MH();
        try {
            return (double)mh$.invokeExact(__time1, __time0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mktime$MH() {
        return RuntimeHelper.requireNonNull(constants$0.mktime$MH,"mktime");
    }
    public static long mktime ( Addressable __tp) {
        var mh$ = mktime$MH();
        try {
            return (long)mh$.invokeExact(__tp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strftime$MH() {
        return RuntimeHelper.requireNonNull(constants$0.strftime$MH,"strftime");
    }
    public static long strftime ( Addressable __s,  long __maxsize,  Addressable __format,  Addressable __tp) {
        var mh$ = strftime$MH();
        try {
            return (long)mh$.invokeExact(__s, __maxsize, __format, __tp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strftime_l$MH() {
        return RuntimeHelper.requireNonNull(constants$0.strftime_l$MH,"strftime_l");
    }
    public static long strftime_l ( Addressable __s,  long __maxsize,  Addressable __format,  Addressable __tp,  Addressable __loc) {
        var mh$ = strftime_l$MH();
        try {
            return (long)mh$.invokeExact(__s, __maxsize, __format, __tp, __loc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gmtime$MH() {
        return RuntimeHelper.requireNonNull(constants$1.gmtime$MH,"gmtime");
    }
    public static MemoryAddress gmtime ( Addressable __timer) {
        var mh$ = gmtime$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__timer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle localtime$MH() {
        return RuntimeHelper.requireNonNull(constants$1.localtime$MH,"localtime");
    }
    public static MemoryAddress localtime ( Addressable __timer) {
        var mh$ = localtime$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__timer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gmtime_r$MH() {
        return RuntimeHelper.requireNonNull(constants$1.gmtime_r$MH,"gmtime_r");
    }
    public static MemoryAddress gmtime_r ( Addressable __timer,  Addressable __tp) {
        var mh$ = gmtime_r$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__timer, __tp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle localtime_r$MH() {
        return RuntimeHelper.requireNonNull(constants$1.localtime_r$MH,"localtime_r");
    }
    public static MemoryAddress localtime_r ( Addressable __timer,  Addressable __tp) {
        var mh$ = localtime_r$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__timer, __tp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle asctime$MH() {
        return RuntimeHelper.requireNonNull(constants$1.asctime$MH,"asctime");
    }
    public static MemoryAddress asctime ( Addressable __tp) {
        var mh$ = asctime$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__tp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ctime$MH() {
        return RuntimeHelper.requireNonNull(constants$1.ctime$MH,"ctime");
    }
    public static MemoryAddress ctime ( Addressable __timer) {
        var mh$ = ctime$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__timer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle asctime_r$MH() {
        return RuntimeHelper.requireNonNull(constants$2.asctime_r$MH,"asctime_r");
    }
    public static MemoryAddress asctime_r ( Addressable __tp,  Addressable __buf) {
        var mh$ = asctime_r$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__tp, __buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ctime_r$MH() {
        return RuntimeHelper.requireNonNull(constants$2.ctime_r$MH,"ctime_r");
    }
    public static MemoryAddress ctime_r ( Addressable __timer,  Addressable __buf) {
        var mh$ = ctime_r$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__timer, __buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemorySegment __tzname$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$2.__tzname$SEGMENT,"__tzname");
    }
    public static MemoryLayout __daylight$LAYOUT() {
        return constants$2.__daylight$LAYOUT;
    }
    public static VarHandle __daylight$VH() {
        return constants$2.__daylight$VH;
    }
    public static MemorySegment __daylight$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$2.__daylight$SEGMENT,"__daylight");
    }
    public static int __daylight$get() {
        return (int) constants$2.__daylight$VH.get(RuntimeHelper.requireNonNull(constants$2.__daylight$SEGMENT, "__daylight"));
    }
    public static void __daylight$set( int x) {
        constants$2.__daylight$VH.set(RuntimeHelper.requireNonNull(constants$2.__daylight$SEGMENT, "__daylight"), x);
    }
    public static MemoryLayout __timezone$LAYOUT() {
        return constants$2.__timezone$LAYOUT;
    }
    public static VarHandle __timezone$VH() {
        return constants$2.__timezone$VH;
    }
    public static MemorySegment __timezone$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$2.__timezone$SEGMENT,"__timezone");
    }
    public static long __timezone$get() {
        return (long) constants$2.__timezone$VH.get(RuntimeHelper.requireNonNull(constants$2.__timezone$SEGMENT, "__timezone"));
    }
    public static void __timezone$set( long x) {
        constants$2.__timezone$VH.set(RuntimeHelper.requireNonNull(constants$2.__timezone$SEGMENT, "__timezone"), x);
    }
    public static MemorySegment tzname$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$2.tzname$SEGMENT,"tzname");
    }
    public static MethodHandle tzset$MH() {
        return RuntimeHelper.requireNonNull(constants$3.tzset$MH,"tzset");
    }
    public static void tzset () {
        var mh$ = tzset$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemoryLayout daylight$LAYOUT() {
        return constants$3.daylight$LAYOUT;
    }
    public static VarHandle daylight$VH() {
        return constants$3.daylight$VH;
    }
    public static MemorySegment daylight$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$3.daylight$SEGMENT,"daylight");
    }
    public static int daylight$get() {
        return (int) constants$3.daylight$VH.get(RuntimeHelper.requireNonNull(constants$3.daylight$SEGMENT, "daylight"));
    }
    public static void daylight$set( int x) {
        constants$3.daylight$VH.set(RuntimeHelper.requireNonNull(constants$3.daylight$SEGMENT, "daylight"), x);
    }
    public static MemoryLayout timezone$LAYOUT() {
        return constants$3.timezone$LAYOUT;
    }
    public static VarHandle timezone$VH() {
        return constants$3.timezone$VH;
    }
    public static MemorySegment timezone$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$3.timezone$SEGMENT,"timezone");
    }
    public static long timezone$get() {
        return (long) constants$3.timezone$VH.get(RuntimeHelper.requireNonNull(constants$3.timezone$SEGMENT, "timezone"));
    }
    public static void timezone$set( long x) {
        constants$3.timezone$VH.set(RuntimeHelper.requireNonNull(constants$3.timezone$SEGMENT, "timezone"), x);
    }
    public static MethodHandle timegm$MH() {
        return RuntimeHelper.requireNonNull(constants$3.timegm$MH,"timegm");
    }
    public static long timegm ( Addressable __tp) {
        var mh$ = timegm$MH();
        try {
            return (long)mh$.invokeExact(__tp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle timelocal$MH() {
        return RuntimeHelper.requireNonNull(constants$3.timelocal$MH,"timelocal");
    }
    public static long timelocal ( Addressable __tp) {
        var mh$ = timelocal$MH();
        try {
            return (long)mh$.invokeExact(__tp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle dysize$MH() {
        return RuntimeHelper.requireNonNull(constants$3.dysize$MH,"dysize");
    }
    public static int dysize ( int __year) {
        var mh$ = dysize$MH();
        try {
            return (int)mh$.invokeExact(__year);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nanosleep$MH() {
        return RuntimeHelper.requireNonNull(constants$4.nanosleep$MH,"nanosleep");
    }
    public static int nanosleep ( Addressable __requested_time,  Addressable __remaining) {
        var mh$ = nanosleep$MH();
        try {
            return (int)mh$.invokeExact(__requested_time, __remaining);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clock_getres$MH() {
        return RuntimeHelper.requireNonNull(constants$4.clock_getres$MH,"clock_getres");
    }
    public static int clock_getres ( int __clock_id,  Addressable __res) {
        var mh$ = clock_getres$MH();
        try {
            return (int)mh$.invokeExact(__clock_id, __res);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clock_gettime$MH() {
        return RuntimeHelper.requireNonNull(constants$4.clock_gettime$MH,"clock_gettime");
    }
    public static int clock_gettime ( int __clock_id,  Addressable __tp) {
        var mh$ = clock_gettime$MH();
        try {
            return (int)mh$.invokeExact(__clock_id, __tp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clock_settime$MH() {
        return RuntimeHelper.requireNonNull(constants$4.clock_settime$MH,"clock_settime");
    }
    public static int clock_settime ( int __clock_id,  Addressable __tp) {
        var mh$ = clock_settime$MH();
        try {
            return (int)mh$.invokeExact(__clock_id, __tp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clock_nanosleep$MH() {
        return RuntimeHelper.requireNonNull(constants$4.clock_nanosleep$MH,"clock_nanosleep");
    }
    public static int clock_nanosleep ( int __clock_id,  int __flags,  Addressable __req,  Addressable __rem) {
        var mh$ = clock_nanosleep$MH();
        try {
            return (int)mh$.invokeExact(__clock_id, __flags, __req, __rem);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clock_getcpuclockid$MH() {
        return RuntimeHelper.requireNonNull(constants$4.clock_getcpuclockid$MH,"clock_getcpuclockid");
    }
    public static int clock_getcpuclockid ( int __pid,  Addressable __clock_id) {
        var mh$ = clock_getcpuclockid$MH();
        try {
            return (int)mh$.invokeExact(__pid, __clock_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle timer_create$MH() {
        return RuntimeHelper.requireNonNull(constants$5.timer_create$MH,"timer_create");
    }
    public static int timer_create ( int __clock_id,  Addressable __evp,  Addressable __timerid) {
        var mh$ = timer_create$MH();
        try {
            return (int)mh$.invokeExact(__clock_id, __evp, __timerid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle timer_delete$MH() {
        return RuntimeHelper.requireNonNull(constants$5.timer_delete$MH,"timer_delete");
    }
    public static int timer_delete ( Addressable __timerid) {
        var mh$ = timer_delete$MH();
        try {
            return (int)mh$.invokeExact(__timerid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle timer_settime$MH() {
        return RuntimeHelper.requireNonNull(constants$5.timer_settime$MH,"timer_settime");
    }
    public static int timer_settime ( Addressable __timerid,  int __flags,  Addressable __value,  Addressable __ovalue) {
        var mh$ = timer_settime$MH();
        try {
            return (int)mh$.invokeExact(__timerid, __flags, __value, __ovalue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle timer_gettime$MH() {
        return RuntimeHelper.requireNonNull(constants$5.timer_gettime$MH,"timer_gettime");
    }
    public static int timer_gettime ( Addressable __timerid,  Addressable __value) {
        var mh$ = timer_gettime$MH();
        try {
            return (int)mh$.invokeExact(__timerid, __value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle timer_getoverrun$MH() {
        return RuntimeHelper.requireNonNull(constants$5.timer_getoverrun$MH,"timer_getoverrun");
    }
    public static int timer_getoverrun ( Addressable __timerid) {
        var mh$ = timer_getoverrun$MH();
        try {
            return (int)mh$.invokeExact(__timerid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle timespec_get$MH() {
        return RuntimeHelper.requireNonNull(constants$5.timespec_get$MH,"timespec_get");
    }
    public static int timespec_get ( Addressable __ts,  int __base) {
        var mh$ = timespec_get$MH();
        try {
            return (int)mh$.invokeExact(__ts, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfByte gchar = Constants$root.C_CHAR$LAYOUT;
    public static OfShort gshort = Constants$root.C_SHORT$LAYOUT;
    public static OfLong glong = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt gint = Constants$root.C_INT$LAYOUT;
    public static OfInt gboolean = Constants$root.C_INT$LAYOUT;
    public static OfFloat gfloat = Constants$root.C_FLOAT$LAYOUT;
    public static OfDouble gdouble = Constants$root.C_DOUBLE$LAYOUT;
    public static OfAddress gpointer = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress gconstpointer = Constants$root.C_POINTER$LAYOUT;
    public static OfInt grefcount = Constants$root.C_INT$LAYOUT;
    public static OfInt gatomicrefcount = Constants$root.C_INT$LAYOUT;
    public static MethodHandle memcpy$MH() {
        return RuntimeHelper.requireNonNull(constants$9.memcpy$MH,"memcpy");
    }
    public static MemoryAddress memcpy ( Addressable __dest,  Addressable __src,  long __n) {
        var mh$ = memcpy$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__dest, __src, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle memmove$MH() {
        return RuntimeHelper.requireNonNull(constants$9.memmove$MH,"memmove");
    }
    public static MemoryAddress memmove ( Addressable __dest,  Addressable __src,  long __n) {
        var mh$ = memmove$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__dest, __src, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle memccpy$MH() {
        return RuntimeHelper.requireNonNull(constants$9.memccpy$MH,"memccpy");
    }
    public static MemoryAddress memccpy ( Addressable __dest,  Addressable __src,  int __c,  long __n) {
        var mh$ = memccpy$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__dest, __src, __c, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle memset$MH() {
        return RuntimeHelper.requireNonNull(constants$9.memset$MH,"memset");
    }
    public static MemoryAddress memset ( Addressable __s,  int __c,  long __n) {
        var mh$ = memset$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__s, __c, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle memcmp$MH() {
        return RuntimeHelper.requireNonNull(constants$10.memcmp$MH,"memcmp");
    }
    public static int memcmp ( Addressable __s1,  Addressable __s2,  long __n) {
        var mh$ = memcmp$MH();
        try {
            return (int)mh$.invokeExact(__s1, __s2, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __memcmpeq$MH() {
        return RuntimeHelper.requireNonNull(constants$10.__memcmpeq$MH,"__memcmpeq");
    }
    public static int __memcmpeq ( Addressable __s1,  Addressable __s2,  long __n) {
        var mh$ = __memcmpeq$MH();
        try {
            return (int)mh$.invokeExact(__s1, __s2, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle memchr$MH() {
        return RuntimeHelper.requireNonNull(constants$10.memchr$MH,"memchr");
    }
    public static MemoryAddress memchr ( Addressable __s,  int __c,  long __n) {
        var mh$ = memchr$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__s, __c, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strcpy$MH() {
        return RuntimeHelper.requireNonNull(constants$10.strcpy$MH,"strcpy");
    }
    public static MemoryAddress strcpy ( Addressable __dest,  Addressable __src) {
        var mh$ = strcpy$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__dest, __src);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strncpy$MH() {
        return RuntimeHelper.requireNonNull(constants$10.strncpy$MH,"strncpy");
    }
    public static MemoryAddress strncpy ( Addressable __dest,  Addressable __src,  long __n) {
        var mh$ = strncpy$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__dest, __src, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strcat$MH() {
        return RuntimeHelper.requireNonNull(constants$10.strcat$MH,"strcat");
    }
    public static MemoryAddress strcat ( Addressable __dest,  Addressable __src) {
        var mh$ = strcat$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__dest, __src);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strncat$MH() {
        return RuntimeHelper.requireNonNull(constants$11.strncat$MH,"strncat");
    }
    public static MemoryAddress strncat ( Addressable __dest,  Addressable __src,  long __n) {
        var mh$ = strncat$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__dest, __src, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strcmp$MH() {
        return RuntimeHelper.requireNonNull(constants$11.strcmp$MH,"strcmp");
    }
    public static int strcmp ( Addressable __s1,  Addressable __s2) {
        var mh$ = strcmp$MH();
        try {
            return (int)mh$.invokeExact(__s1, __s2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strncmp$MH() {
        return RuntimeHelper.requireNonNull(constants$11.strncmp$MH,"strncmp");
    }
    public static int strncmp ( Addressable __s1,  Addressable __s2,  long __n) {
        var mh$ = strncmp$MH();
        try {
            return (int)mh$.invokeExact(__s1, __s2, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strcoll$MH() {
        return RuntimeHelper.requireNonNull(constants$11.strcoll$MH,"strcoll");
    }
    public static int strcoll ( Addressable __s1,  Addressable __s2) {
        var mh$ = strcoll$MH();
        try {
            return (int)mh$.invokeExact(__s1, __s2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strxfrm$MH() {
        return RuntimeHelper.requireNonNull(constants$11.strxfrm$MH,"strxfrm");
    }
    public static long strxfrm ( Addressable __dest,  Addressable __src,  long __n) {
        var mh$ = strxfrm$MH();
        try {
            return (long)mh$.invokeExact(__dest, __src, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strcoll_l$MH() {
        return RuntimeHelper.requireNonNull(constants$11.strcoll_l$MH,"strcoll_l");
    }
    public static int strcoll_l ( Addressable __s1,  Addressable __s2,  Addressable __l) {
        var mh$ = strcoll_l$MH();
        try {
            return (int)mh$.invokeExact(__s1, __s2, __l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strxfrm_l$MH() {
        return RuntimeHelper.requireNonNull(constants$12.strxfrm_l$MH,"strxfrm_l");
    }
    public static long strxfrm_l ( Addressable __dest,  Addressable __src,  long __n,  Addressable __l) {
        var mh$ = strxfrm_l$MH();
        try {
            return (long)mh$.invokeExact(__dest, __src, __n, __l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strdup$MH() {
        return RuntimeHelper.requireNonNull(constants$12.strdup$MH,"strdup");
    }
    public static MemoryAddress strdup ( Addressable __s) {
        var mh$ = strdup$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strndup$MH() {
        return RuntimeHelper.requireNonNull(constants$12.strndup$MH,"strndup");
    }
    public static MemoryAddress strndup ( Addressable __string,  long __n) {
        var mh$ = strndup$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__string, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strchr$MH() {
        return RuntimeHelper.requireNonNull(constants$12.strchr$MH,"strchr");
    }
    public static MemoryAddress strchr ( Addressable __s,  int __c) {
        var mh$ = strchr$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__s, __c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strrchr$MH() {
        return RuntimeHelper.requireNonNull(constants$12.strrchr$MH,"strrchr");
    }
    public static MemoryAddress strrchr ( Addressable __s,  int __c) {
        var mh$ = strrchr$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__s, __c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strcspn$MH() {
        return RuntimeHelper.requireNonNull(constants$12.strcspn$MH,"strcspn");
    }
    public static long strcspn ( Addressable __s,  Addressable __reject) {
        var mh$ = strcspn$MH();
        try {
            return (long)mh$.invokeExact(__s, __reject);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strspn$MH() {
        return RuntimeHelper.requireNonNull(constants$13.strspn$MH,"strspn");
    }
    public static long strspn ( Addressable __s,  Addressable __accept) {
        var mh$ = strspn$MH();
        try {
            return (long)mh$.invokeExact(__s, __accept);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strpbrk$MH() {
        return RuntimeHelper.requireNonNull(constants$13.strpbrk$MH,"strpbrk");
    }
    public static MemoryAddress strpbrk ( Addressable __s,  Addressable __accept) {
        var mh$ = strpbrk$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__s, __accept);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strstr$MH() {
        return RuntimeHelper.requireNonNull(constants$13.strstr$MH,"strstr");
    }
    public static MemoryAddress strstr ( Addressable __haystack,  Addressable __needle) {
        var mh$ = strstr$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__haystack, __needle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtok$MH() {
        return RuntimeHelper.requireNonNull(constants$13.strtok$MH,"strtok");
    }
    public static MemoryAddress strtok ( Addressable __s,  Addressable __delim) {
        var mh$ = strtok$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__s, __delim);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __strtok_r$MH() {
        return RuntimeHelper.requireNonNull(constants$13.__strtok_r$MH,"__strtok_r");
    }
    public static MemoryAddress __strtok_r ( Addressable __s,  Addressable __delim,  Addressable __save_ptr) {
        var mh$ = __strtok_r$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__s, __delim, __save_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtok_r$MH() {
        return RuntimeHelper.requireNonNull(constants$13.strtok_r$MH,"strtok_r");
    }
    public static MemoryAddress strtok_r ( Addressable __s,  Addressable __delim,  Addressable __save_ptr) {
        var mh$ = strtok_r$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__s, __delim, __save_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strlen$MH() {
        return RuntimeHelper.requireNonNull(constants$14.strlen$MH,"strlen");
    }
    public static long strlen ( Addressable __s) {
        var mh$ = strlen$MH();
        try {
            return (long)mh$.invokeExact(__s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strnlen$MH() {
        return RuntimeHelper.requireNonNull(constants$14.strnlen$MH,"strnlen");
    }
    public static long strnlen ( Addressable __string,  long __maxlen) {
        var mh$ = strnlen$MH();
        try {
            return (long)mh$.invokeExact(__string, __maxlen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strerror$MH() {
        return RuntimeHelper.requireNonNull(constants$14.strerror$MH,"strerror");
    }
    public static MemoryAddress strerror ( int __errnum) {
        var mh$ = strerror$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__errnum);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strerror_r$MH() {
        return RuntimeHelper.requireNonNull(constants$14.strerror_r$MH,"strerror_r");
    }
    public static int strerror_r ( int __errnum,  Addressable __buf,  long __buflen) {
        var mh$ = strerror_r$MH();
        try {
            return (int)mh$.invokeExact(__errnum, __buf, __buflen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strerror_l$MH() {
        return RuntimeHelper.requireNonNull(constants$14.strerror_l$MH,"strerror_l");
    }
    public static MemoryAddress strerror_l ( int __errnum,  Addressable __l) {
        var mh$ = strerror_l$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__errnum, __l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle bcmp$MH() {
        return RuntimeHelper.requireNonNull(constants$14.bcmp$MH,"bcmp");
    }
    public static int bcmp ( Addressable __s1,  Addressable __s2,  long __n) {
        var mh$ = bcmp$MH();
        try {
            return (int)mh$.invokeExact(__s1, __s2, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle bcopy$MH() {
        return RuntimeHelper.requireNonNull(constants$15.bcopy$MH,"bcopy");
    }
    public static void bcopy ( Addressable __src,  Addressable __dest,  long __n) {
        var mh$ = bcopy$MH();
        try {
            mh$.invokeExact(__src, __dest, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle bzero$MH() {
        return RuntimeHelper.requireNonNull(constants$15.bzero$MH,"bzero");
    }
    public static void bzero ( Addressable __s,  long __n) {
        var mh$ = bzero$MH();
        try {
            mh$.invokeExact(__s, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle index$MH() {
        return RuntimeHelper.requireNonNull(constants$15.index$MH,"index");
    }
    public static MemoryAddress index ( Addressable __s,  int __c) {
        var mh$ = index$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__s, __c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rindex$MH() {
        return RuntimeHelper.requireNonNull(constants$15.rindex$MH,"rindex");
    }
    public static MemoryAddress rindex ( Addressable __s,  int __c) {
        var mh$ = rindex$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__s, __c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffs$MH() {
        return RuntimeHelper.requireNonNull(constants$15.ffs$MH,"ffs");
    }
    public static int ffs ( int __i) {
        var mh$ = ffs$MH();
        try {
            return (int)mh$.invokeExact(__i);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffsl$MH() {
        return RuntimeHelper.requireNonNull(constants$15.ffsl$MH,"ffsl");
    }
    public static int ffsl ( long __l) {
        var mh$ = ffsl$MH();
        try {
            return (int)mh$.invokeExact(__l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffsll$MH() {
        return RuntimeHelper.requireNonNull(constants$16.ffsll$MH,"ffsll");
    }
    public static int ffsll ( long __ll) {
        var mh$ = ffsll$MH();
        try {
            return (int)mh$.invokeExact(__ll);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strcasecmp$MH() {
        return RuntimeHelper.requireNonNull(constants$16.strcasecmp$MH,"strcasecmp");
    }
    public static int strcasecmp ( Addressable __s1,  Addressable __s2) {
        var mh$ = strcasecmp$MH();
        try {
            return (int)mh$.invokeExact(__s1, __s2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strncasecmp$MH() {
        return RuntimeHelper.requireNonNull(constants$16.strncasecmp$MH,"strncasecmp");
    }
    public static int strncasecmp ( Addressable __s1,  Addressable __s2,  long __n) {
        var mh$ = strncasecmp$MH();
        try {
            return (int)mh$.invokeExact(__s1, __s2, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strcasecmp_l$MH() {
        return RuntimeHelper.requireNonNull(constants$16.strcasecmp_l$MH,"strcasecmp_l");
    }
    public static int strcasecmp_l ( Addressable __s1,  Addressable __s2,  Addressable __loc) {
        var mh$ = strcasecmp_l$MH();
        try {
            return (int)mh$.invokeExact(__s1, __s2, __loc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strncasecmp_l$MH() {
        return RuntimeHelper.requireNonNull(constants$16.strncasecmp_l$MH,"strncasecmp_l");
    }
    public static int strncasecmp_l ( Addressable __s1,  Addressable __s2,  long __n,  Addressable __loc) {
        var mh$ = strncasecmp_l$MH();
        try {
            return (int)mh$.invokeExact(__s1, __s2, __n, __loc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle explicit_bzero$MH() {
        return RuntimeHelper.requireNonNull(constants$16.explicit_bzero$MH,"explicit_bzero");
    }
    public static void explicit_bzero ( Addressable __s,  long __n) {
        var mh$ = explicit_bzero$MH();
        try {
            mh$.invokeExact(__s, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strsep$MH() {
        return RuntimeHelper.requireNonNull(constants$17.strsep$MH,"strsep");
    }
    public static MemoryAddress strsep ( Addressable __stringp,  Addressable __delim) {
        var mh$ = strsep$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__stringp, __delim);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strsignal$MH() {
        return RuntimeHelper.requireNonNull(constants$17.strsignal$MH,"strsignal");
    }
    public static MemoryAddress strsignal ( int __sig) {
        var mh$ = strsignal$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__sig);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __stpcpy$MH() {
        return RuntimeHelper.requireNonNull(constants$17.__stpcpy$MH,"__stpcpy");
    }
    public static MemoryAddress __stpcpy ( Addressable __dest,  Addressable __src) {
        var mh$ = __stpcpy$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__dest, __src);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle stpcpy$MH() {
        return RuntimeHelper.requireNonNull(constants$17.stpcpy$MH,"stpcpy");
    }
    public static MemoryAddress stpcpy ( Addressable __dest,  Addressable __src) {
        var mh$ = stpcpy$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__dest, __src);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __stpncpy$MH() {
        return RuntimeHelper.requireNonNull(constants$17.__stpncpy$MH,"__stpncpy");
    }
    public static MemoryAddress __stpncpy ( Addressable __dest,  Addressable __src,  long __n) {
        var mh$ = __stpncpy$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__dest, __src, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle stpncpy$MH() {
        return RuntimeHelper.requireNonNull(constants$17.stpncpy$MH,"stpncpy");
    }
    public static MemoryAddress stpncpy ( Addressable __dest,  Addressable __src,  long __n) {
        var mh$ = stpncpy$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__dest, __src, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_array_new$MH() {
        return RuntimeHelper.requireNonNull(constants$18.g_array_new$MH,"g_array_new");
    }
    public static MemoryAddress g_array_new ( int zero_terminated,  int clear_,  int element_size) {
        var mh$ = g_array_new$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(zero_terminated, clear_, element_size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_array_steal$MH() {
        return RuntimeHelper.requireNonNull(constants$18.g_array_steal$MH,"g_array_steal");
    }
    public static MemoryAddress g_array_steal ( Addressable array,  Addressable len) {
        var mh$ = g_array_steal$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(array, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_array_sized_new$MH() {
        return RuntimeHelper.requireNonNull(constants$18.g_array_sized_new$MH,"g_array_sized_new");
    }
    public static MemoryAddress g_array_sized_new ( int zero_terminated,  int clear_,  int element_size,  int reserved_size) {
        var mh$ = g_array_sized_new$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(zero_terminated, clear_, element_size, reserved_size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_array_copy$MH() {
        return RuntimeHelper.requireNonNull(constants$18.g_array_copy$MH,"g_array_copy");
    }
    public static MemoryAddress g_array_copy ( Addressable array) {
        var mh$ = g_array_copy$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(array);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_array_free$MH() {
        return RuntimeHelper.requireNonNull(constants$18.g_array_free$MH,"g_array_free");
    }
    public static MemoryAddress g_array_free ( Addressable array,  int free_segment) {
        var mh$ = g_array_free$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(array, free_segment);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_array_ref$MH() {
        return RuntimeHelper.requireNonNull(constants$18.g_array_ref$MH,"g_array_ref");
    }
    public static MemoryAddress g_array_ref ( Addressable array) {
        var mh$ = g_array_ref$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(array);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_array_unref$MH() {
        return RuntimeHelper.requireNonNull(constants$19.g_array_unref$MH,"g_array_unref");
    }
    public static void g_array_unref ( Addressable array) {
        var mh$ = g_array_unref$MH();
        try {
            mh$.invokeExact(array);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_array_get_element_size$MH() {
        return RuntimeHelper.requireNonNull(constants$19.g_array_get_element_size$MH,"g_array_get_element_size");
    }
    public static int g_array_get_element_size ( Addressable array) {
        var mh$ = g_array_get_element_size$MH();
        try {
            return (int)mh$.invokeExact(array);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_array_append_vals$MH() {
        return RuntimeHelper.requireNonNull(constants$19.g_array_append_vals$MH,"g_array_append_vals");
    }
    public static MemoryAddress g_array_append_vals ( Addressable array,  Addressable data,  int len) {
        var mh$ = g_array_append_vals$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(array, data, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_array_prepend_vals$MH() {
        return RuntimeHelper.requireNonNull(constants$19.g_array_prepend_vals$MH,"g_array_prepend_vals");
    }
    public static MemoryAddress g_array_prepend_vals ( Addressable array,  Addressable data,  int len) {
        var mh$ = g_array_prepend_vals$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(array, data, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_array_insert_vals$MH() {
        return RuntimeHelper.requireNonNull(constants$19.g_array_insert_vals$MH,"g_array_insert_vals");
    }
    public static MemoryAddress g_array_insert_vals ( Addressable array,  int index_,  Addressable data,  int len) {
        var mh$ = g_array_insert_vals$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(array, index_, data, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_array_set_size$MH() {
        return RuntimeHelper.requireNonNull(constants$19.g_array_set_size$MH,"g_array_set_size");
    }
    public static MemoryAddress g_array_set_size ( Addressable array,  int length) {
        var mh$ = g_array_set_size$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(array, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_array_remove_index$MH() {
        return RuntimeHelper.requireNonNull(constants$20.g_array_remove_index$MH,"g_array_remove_index");
    }
    public static MemoryAddress g_array_remove_index ( Addressable array,  int index_) {
        var mh$ = g_array_remove_index$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(array, index_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_array_remove_index_fast$MH() {
        return RuntimeHelper.requireNonNull(constants$20.g_array_remove_index_fast$MH,"g_array_remove_index_fast");
    }
    public static MemoryAddress g_array_remove_index_fast ( Addressable array,  int index_) {
        var mh$ = g_array_remove_index_fast$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(array, index_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_array_remove_range$MH() {
        return RuntimeHelper.requireNonNull(constants$20.g_array_remove_range$MH,"g_array_remove_range");
    }
    public static MemoryAddress g_array_remove_range ( Addressable array,  int index_,  int length) {
        var mh$ = g_array_remove_range$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(array, index_, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_array_sort$MH() {
        return RuntimeHelper.requireNonNull(constants$20.g_array_sort$MH,"g_array_sort");
    }
    public static void g_array_sort ( Addressable array,  Addressable compare_func) {
        var mh$ = g_array_sort$MH();
        try {
            mh$.invokeExact(array, compare_func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_array_sort_with_data$MH() {
        return RuntimeHelper.requireNonNull(constants$20.g_array_sort_with_data$MH,"g_array_sort_with_data");
    }
    public static void g_array_sort_with_data ( Addressable array,  Addressable compare_func,  Addressable user_data) {
        var mh$ = g_array_sort_with_data$MH();
        try {
            mh$.invokeExact(array, compare_func, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_array_binary_search$MH() {
        return RuntimeHelper.requireNonNull(constants$20.g_array_binary_search$MH,"g_array_binary_search");
    }
    public static int g_array_binary_search ( Addressable array,  Addressable target,  Addressable compare_func,  Addressable out_match_index) {
        var mh$ = g_array_binary_search$MH();
        try {
            return (int)mh$.invokeExact(array, target, compare_func, out_match_index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_array_set_clear_func$MH() {
        return RuntimeHelper.requireNonNull(constants$21.g_array_set_clear_func$MH,"g_array_set_clear_func");
    }
    public static void g_array_set_clear_func ( Addressable array,  Addressable clear_func) {
        var mh$ = g_array_set_clear_func$MH();
        try {
            mh$.invokeExact(array, clear_func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ptr_array_new$MH() {
        return RuntimeHelper.requireNonNull(constants$21.g_ptr_array_new$MH,"g_ptr_array_new");
    }
    public static MemoryAddress g_ptr_array_new () {
        var mh$ = g_ptr_array_new$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ptr_array_new_with_free_func$MH() {
        return RuntimeHelper.requireNonNull(constants$21.g_ptr_array_new_with_free_func$MH,"g_ptr_array_new_with_free_func");
    }
    public static MemoryAddress g_ptr_array_new_with_free_func ( Addressable element_free_func) {
        var mh$ = g_ptr_array_new_with_free_func$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(element_free_func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ptr_array_steal$MH() {
        return RuntimeHelper.requireNonNull(constants$21.g_ptr_array_steal$MH,"g_ptr_array_steal");
    }
    public static MemoryAddress g_ptr_array_steal ( Addressable array,  Addressable len) {
        var mh$ = g_ptr_array_steal$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(array, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ptr_array_copy$MH() {
        return RuntimeHelper.requireNonNull(constants$21.g_ptr_array_copy$MH,"g_ptr_array_copy");
    }
    public static MemoryAddress g_ptr_array_copy ( Addressable array,  Addressable func,  Addressable user_data) {
        var mh$ = g_ptr_array_copy$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(array, func, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ptr_array_sized_new$MH() {
        return RuntimeHelper.requireNonNull(constants$21.g_ptr_array_sized_new$MH,"g_ptr_array_sized_new");
    }
    public static MemoryAddress g_ptr_array_sized_new ( int reserved_size) {
        var mh$ = g_ptr_array_sized_new$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(reserved_size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ptr_array_new_full$MH() {
        return RuntimeHelper.requireNonNull(constants$22.g_ptr_array_new_full$MH,"g_ptr_array_new_full");
    }
    public static MemoryAddress g_ptr_array_new_full ( int reserved_size,  Addressable element_free_func) {
        var mh$ = g_ptr_array_new_full$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(reserved_size, element_free_func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ptr_array_free$MH() {
        return RuntimeHelper.requireNonNull(constants$22.g_ptr_array_free$MH,"g_ptr_array_free");
    }
    public static MemoryAddress g_ptr_array_free ( Addressable array,  int free_seg) {
        var mh$ = g_ptr_array_free$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(array, free_seg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ptr_array_ref$MH() {
        return RuntimeHelper.requireNonNull(constants$22.g_ptr_array_ref$MH,"g_ptr_array_ref");
    }
    public static MemoryAddress g_ptr_array_ref ( Addressable array) {
        var mh$ = g_ptr_array_ref$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(array);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ptr_array_unref$MH() {
        return RuntimeHelper.requireNonNull(constants$22.g_ptr_array_unref$MH,"g_ptr_array_unref");
    }
    public static void g_ptr_array_unref ( Addressable array) {
        var mh$ = g_ptr_array_unref$MH();
        try {
            mh$.invokeExact(array);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ptr_array_set_free_func$MH() {
        return RuntimeHelper.requireNonNull(constants$22.g_ptr_array_set_free_func$MH,"g_ptr_array_set_free_func");
    }
    public static void g_ptr_array_set_free_func ( Addressable array,  Addressable element_free_func) {
        var mh$ = g_ptr_array_set_free_func$MH();
        try {
            mh$.invokeExact(array, element_free_func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ptr_array_set_size$MH() {
        return RuntimeHelper.requireNonNull(constants$22.g_ptr_array_set_size$MH,"g_ptr_array_set_size");
    }
    public static void g_ptr_array_set_size ( Addressable array,  int length) {
        var mh$ = g_ptr_array_set_size$MH();
        try {
            mh$.invokeExact(array, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ptr_array_remove_index$MH() {
        return RuntimeHelper.requireNonNull(constants$23.g_ptr_array_remove_index$MH,"g_ptr_array_remove_index");
    }
    public static MemoryAddress g_ptr_array_remove_index ( Addressable array,  int index_) {
        var mh$ = g_ptr_array_remove_index$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(array, index_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ptr_array_remove_index_fast$MH() {
        return RuntimeHelper.requireNonNull(constants$23.g_ptr_array_remove_index_fast$MH,"g_ptr_array_remove_index_fast");
    }
    public static MemoryAddress g_ptr_array_remove_index_fast ( Addressable array,  int index_) {
        var mh$ = g_ptr_array_remove_index_fast$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(array, index_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ptr_array_steal_index$MH() {
        return RuntimeHelper.requireNonNull(constants$23.g_ptr_array_steal_index$MH,"g_ptr_array_steal_index");
    }
    public static MemoryAddress g_ptr_array_steal_index ( Addressable array,  int index_) {
        var mh$ = g_ptr_array_steal_index$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(array, index_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ptr_array_steal_index_fast$MH() {
        return RuntimeHelper.requireNonNull(constants$23.g_ptr_array_steal_index_fast$MH,"g_ptr_array_steal_index_fast");
    }
    public static MemoryAddress g_ptr_array_steal_index_fast ( Addressable array,  int index_) {
        var mh$ = g_ptr_array_steal_index_fast$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(array, index_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ptr_array_remove$MH() {
        return RuntimeHelper.requireNonNull(constants$23.g_ptr_array_remove$MH,"g_ptr_array_remove");
    }
    public static int g_ptr_array_remove ( Addressable array,  Addressable data) {
        var mh$ = g_ptr_array_remove$MH();
        try {
            return (int)mh$.invokeExact(array, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ptr_array_remove_fast$MH() {
        return RuntimeHelper.requireNonNull(constants$23.g_ptr_array_remove_fast$MH,"g_ptr_array_remove_fast");
    }
    public static int g_ptr_array_remove_fast ( Addressable array,  Addressable data) {
        var mh$ = g_ptr_array_remove_fast$MH();
        try {
            return (int)mh$.invokeExact(array, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ptr_array_remove_range$MH() {
        return RuntimeHelper.requireNonNull(constants$24.g_ptr_array_remove_range$MH,"g_ptr_array_remove_range");
    }
    public static MemoryAddress g_ptr_array_remove_range ( Addressable array,  int index_,  int length) {
        var mh$ = g_ptr_array_remove_range$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(array, index_, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ptr_array_add$MH() {
        return RuntimeHelper.requireNonNull(constants$24.g_ptr_array_add$MH,"g_ptr_array_add");
    }
    public static void g_ptr_array_add ( Addressable array,  Addressable data) {
        var mh$ = g_ptr_array_add$MH();
        try {
            mh$.invokeExact(array, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ptr_array_extend$MH() {
        return RuntimeHelper.requireNonNull(constants$24.g_ptr_array_extend$MH,"g_ptr_array_extend");
    }
    public static void g_ptr_array_extend ( Addressable array_to_extend,  Addressable array,  Addressable func,  Addressable user_data) {
        var mh$ = g_ptr_array_extend$MH();
        try {
            mh$.invokeExact(array_to_extend, array, func, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ptr_array_extend_and_steal$MH() {
        return RuntimeHelper.requireNonNull(constants$24.g_ptr_array_extend_and_steal$MH,"g_ptr_array_extend_and_steal");
    }
    public static void g_ptr_array_extend_and_steal ( Addressable array_to_extend,  Addressable array) {
        var mh$ = g_ptr_array_extend_and_steal$MH();
        try {
            mh$.invokeExact(array_to_extend, array);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ptr_array_insert$MH() {
        return RuntimeHelper.requireNonNull(constants$24.g_ptr_array_insert$MH,"g_ptr_array_insert");
    }
    public static void g_ptr_array_insert ( Addressable array,  int index_,  Addressable data) {
        var mh$ = g_ptr_array_insert$MH();
        try {
            mh$.invokeExact(array, index_, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ptr_array_sort$MH() {
        return RuntimeHelper.requireNonNull(constants$24.g_ptr_array_sort$MH,"g_ptr_array_sort");
    }
    public static void g_ptr_array_sort ( Addressable array,  Addressable compare_func) {
        var mh$ = g_ptr_array_sort$MH();
        try {
            mh$.invokeExact(array, compare_func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ptr_array_sort_with_data$MH() {
        return RuntimeHelper.requireNonNull(constants$25.g_ptr_array_sort_with_data$MH,"g_ptr_array_sort_with_data");
    }
    public static void g_ptr_array_sort_with_data ( Addressable array,  Addressable compare_func,  Addressable user_data) {
        var mh$ = g_ptr_array_sort_with_data$MH();
        try {
            mh$.invokeExact(array, compare_func, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ptr_array_foreach$MH() {
        return RuntimeHelper.requireNonNull(constants$25.g_ptr_array_foreach$MH,"g_ptr_array_foreach");
    }
    public static void g_ptr_array_foreach ( Addressable array,  Addressable func,  Addressable user_data) {
        var mh$ = g_ptr_array_foreach$MH();
        try {
            mh$.invokeExact(array, func, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ptr_array_find$MH() {
        return RuntimeHelper.requireNonNull(constants$25.g_ptr_array_find$MH,"g_ptr_array_find");
    }
    public static int g_ptr_array_find ( Addressable haystack,  Addressable needle,  Addressable index_) {
        var mh$ = g_ptr_array_find$MH();
        try {
            return (int)mh$.invokeExact(haystack, needle, index_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ptr_array_find_with_equal_func$MH() {
        return RuntimeHelper.requireNonNull(constants$25.g_ptr_array_find_with_equal_func$MH,"g_ptr_array_find_with_equal_func");
    }
    public static int g_ptr_array_find_with_equal_func ( Addressable haystack,  Addressable needle,  Addressable equal_func,  Addressable index_) {
        var mh$ = g_ptr_array_find_with_equal_func$MH();
        try {
            return (int)mh$.invokeExact(haystack, needle, equal_func, index_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_byte_array_new$MH() {
        return RuntimeHelper.requireNonNull(constants$25.g_byte_array_new$MH,"g_byte_array_new");
    }
    public static MemoryAddress g_byte_array_new () {
        var mh$ = g_byte_array_new$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_byte_array_new_take$MH() {
        return RuntimeHelper.requireNonNull(constants$25.g_byte_array_new_take$MH,"g_byte_array_new_take");
    }
    public static MemoryAddress g_byte_array_new_take ( Addressable data,  long len) {
        var mh$ = g_byte_array_new_take$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(data, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_byte_array_steal$MH() {
        return RuntimeHelper.requireNonNull(constants$26.g_byte_array_steal$MH,"g_byte_array_steal");
    }
    public static MemoryAddress g_byte_array_steal ( Addressable array,  Addressable len) {
        var mh$ = g_byte_array_steal$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(array, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_byte_array_sized_new$MH() {
        return RuntimeHelper.requireNonNull(constants$26.g_byte_array_sized_new$MH,"g_byte_array_sized_new");
    }
    public static MemoryAddress g_byte_array_sized_new ( int reserved_size) {
        var mh$ = g_byte_array_sized_new$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(reserved_size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_byte_array_free$MH() {
        return RuntimeHelper.requireNonNull(constants$26.g_byte_array_free$MH,"g_byte_array_free");
    }
    public static MemoryAddress g_byte_array_free ( Addressable array,  int free_segment) {
        var mh$ = g_byte_array_free$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(array, free_segment);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_byte_array_free_to_bytes$MH() {
        return RuntimeHelper.requireNonNull(constants$26.g_byte_array_free_to_bytes$MH,"g_byte_array_free_to_bytes");
    }
    public static MemoryAddress g_byte_array_free_to_bytes ( Addressable array) {
        var mh$ = g_byte_array_free_to_bytes$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(array);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_byte_array_ref$MH() {
        return RuntimeHelper.requireNonNull(constants$26.g_byte_array_ref$MH,"g_byte_array_ref");
    }
    public static MemoryAddress g_byte_array_ref ( Addressable array) {
        var mh$ = g_byte_array_ref$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(array);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_byte_array_unref$MH() {
        return RuntimeHelper.requireNonNull(constants$26.g_byte_array_unref$MH,"g_byte_array_unref");
    }
    public static void g_byte_array_unref ( Addressable array) {
        var mh$ = g_byte_array_unref$MH();
        try {
            mh$.invokeExact(array);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_byte_array_append$MH() {
        return RuntimeHelper.requireNonNull(constants$27.g_byte_array_append$MH,"g_byte_array_append");
    }
    public static MemoryAddress g_byte_array_append ( Addressable array,  Addressable data,  int len) {
        var mh$ = g_byte_array_append$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(array, data, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_byte_array_prepend$MH() {
        return RuntimeHelper.requireNonNull(constants$27.g_byte_array_prepend$MH,"g_byte_array_prepend");
    }
    public static MemoryAddress g_byte_array_prepend ( Addressable array,  Addressable data,  int len) {
        var mh$ = g_byte_array_prepend$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(array, data, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_byte_array_set_size$MH() {
        return RuntimeHelper.requireNonNull(constants$27.g_byte_array_set_size$MH,"g_byte_array_set_size");
    }
    public static MemoryAddress g_byte_array_set_size ( Addressable array,  int length) {
        var mh$ = g_byte_array_set_size$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(array, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_byte_array_remove_index$MH() {
        return RuntimeHelper.requireNonNull(constants$27.g_byte_array_remove_index$MH,"g_byte_array_remove_index");
    }
    public static MemoryAddress g_byte_array_remove_index ( Addressable array,  int index_) {
        var mh$ = g_byte_array_remove_index$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(array, index_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_byte_array_remove_index_fast$MH() {
        return RuntimeHelper.requireNonNull(constants$27.g_byte_array_remove_index_fast$MH,"g_byte_array_remove_index_fast");
    }
    public static MemoryAddress g_byte_array_remove_index_fast ( Addressable array,  int index_) {
        var mh$ = g_byte_array_remove_index_fast$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(array, index_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_byte_array_remove_range$MH() {
        return RuntimeHelper.requireNonNull(constants$27.g_byte_array_remove_range$MH,"g_byte_array_remove_range");
    }
    public static MemoryAddress g_byte_array_remove_range ( Addressable array,  int index_,  int length) {
        var mh$ = g_byte_array_remove_range$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(array, index_, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_byte_array_sort$MH() {
        return RuntimeHelper.requireNonNull(constants$28.g_byte_array_sort$MH,"g_byte_array_sort");
    }
    public static void g_byte_array_sort ( Addressable array,  Addressable compare_func) {
        var mh$ = g_byte_array_sort$MH();
        try {
            mh$.invokeExact(array, compare_func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_byte_array_sort_with_data$MH() {
        return RuntimeHelper.requireNonNull(constants$28.g_byte_array_sort_with_data$MH,"g_byte_array_sort_with_data");
    }
    public static void g_byte_array_sort_with_data ( Addressable array,  Addressable compare_func,  Addressable user_data) {
        var mh$ = g_byte_array_sort_with_data$MH();
        try {
            mh$.invokeExact(array, compare_func, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_atomic_int_get$MH() {
        return RuntimeHelper.requireNonNull(constants$28.g_atomic_int_get$MH,"g_atomic_int_get");
    }
    public static int g_atomic_int_get ( Addressable atomic) {
        var mh$ = g_atomic_int_get$MH();
        try {
            return (int)mh$.invokeExact(atomic);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_atomic_int_set$MH() {
        return RuntimeHelper.requireNonNull(constants$28.g_atomic_int_set$MH,"g_atomic_int_set");
    }
    public static void g_atomic_int_set ( Addressable atomic,  int newval) {
        var mh$ = g_atomic_int_set$MH();
        try {
            mh$.invokeExact(atomic, newval);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_atomic_int_inc$MH() {
        return RuntimeHelper.requireNonNull(constants$28.g_atomic_int_inc$MH,"g_atomic_int_inc");
    }
    public static void g_atomic_int_inc ( Addressable atomic) {
        var mh$ = g_atomic_int_inc$MH();
        try {
            mh$.invokeExact(atomic);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_atomic_int_dec_and_test$MH() {
        return RuntimeHelper.requireNonNull(constants$28.g_atomic_int_dec_and_test$MH,"g_atomic_int_dec_and_test");
    }
    public static int g_atomic_int_dec_and_test ( Addressable atomic) {
        var mh$ = g_atomic_int_dec_and_test$MH();
        try {
            return (int)mh$.invokeExact(atomic);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_atomic_int_compare_and_exchange$MH() {
        return RuntimeHelper.requireNonNull(constants$29.g_atomic_int_compare_and_exchange$MH,"g_atomic_int_compare_and_exchange");
    }
    public static int g_atomic_int_compare_and_exchange ( Addressable atomic,  int oldval,  int newval) {
        var mh$ = g_atomic_int_compare_and_exchange$MH();
        try {
            return (int)mh$.invokeExact(atomic, oldval, newval);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_atomic_int_add$MH() {
        return RuntimeHelper.requireNonNull(constants$29.g_atomic_int_add$MH,"g_atomic_int_add");
    }
    public static int g_atomic_int_add ( Addressable atomic,  int val) {
        var mh$ = g_atomic_int_add$MH();
        try {
            return (int)mh$.invokeExact(atomic, val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_atomic_int_and$MH() {
        return RuntimeHelper.requireNonNull(constants$29.g_atomic_int_and$MH,"g_atomic_int_and");
    }
    public static int g_atomic_int_and ( Addressable atomic,  int val) {
        var mh$ = g_atomic_int_and$MH();
        try {
            return (int)mh$.invokeExact(atomic, val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_atomic_int_or$MH() {
        return RuntimeHelper.requireNonNull(constants$29.g_atomic_int_or$MH,"g_atomic_int_or");
    }
    public static int g_atomic_int_or ( Addressable atomic,  int val) {
        var mh$ = g_atomic_int_or$MH();
        try {
            return (int)mh$.invokeExact(atomic, val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_atomic_int_xor$MH() {
        return RuntimeHelper.requireNonNull(constants$29.g_atomic_int_xor$MH,"g_atomic_int_xor");
    }
    public static int g_atomic_int_xor ( Addressable atomic,  int val) {
        var mh$ = g_atomic_int_xor$MH();
        try {
            return (int)mh$.invokeExact(atomic, val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_atomic_pointer_get$MH() {
        return RuntimeHelper.requireNonNull(constants$29.g_atomic_pointer_get$MH,"g_atomic_pointer_get");
    }
    public static MemoryAddress g_atomic_pointer_get ( Addressable atomic) {
        var mh$ = g_atomic_pointer_get$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(atomic);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_atomic_pointer_set$MH() {
        return RuntimeHelper.requireNonNull(constants$30.g_atomic_pointer_set$MH,"g_atomic_pointer_set");
    }
    public static void g_atomic_pointer_set ( Addressable atomic,  Addressable newval) {
        var mh$ = g_atomic_pointer_set$MH();
        try {
            mh$.invokeExact(atomic, newval);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_atomic_pointer_compare_and_exchange$MH() {
        return RuntimeHelper.requireNonNull(constants$30.g_atomic_pointer_compare_and_exchange$MH,"g_atomic_pointer_compare_and_exchange");
    }
    public static int g_atomic_pointer_compare_and_exchange ( Addressable atomic,  Addressable oldval,  Addressable newval) {
        var mh$ = g_atomic_pointer_compare_and_exchange$MH();
        try {
            return (int)mh$.invokeExact(atomic, oldval, newval);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_atomic_pointer_add$MH() {
        return RuntimeHelper.requireNonNull(constants$30.g_atomic_pointer_add$MH,"g_atomic_pointer_add");
    }
    public static long g_atomic_pointer_add ( Addressable atomic,  long val) {
        var mh$ = g_atomic_pointer_add$MH();
        try {
            return (long)mh$.invokeExact(atomic, val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_atomic_pointer_and$MH() {
        return RuntimeHelper.requireNonNull(constants$30.g_atomic_pointer_and$MH,"g_atomic_pointer_and");
    }
    public static long g_atomic_pointer_and ( Addressable atomic,  long val) {
        var mh$ = g_atomic_pointer_and$MH();
        try {
            return (long)mh$.invokeExact(atomic, val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_atomic_pointer_or$MH() {
        return RuntimeHelper.requireNonNull(constants$30.g_atomic_pointer_or$MH,"g_atomic_pointer_or");
    }
    public static long g_atomic_pointer_or ( Addressable atomic,  long val) {
        var mh$ = g_atomic_pointer_or$MH();
        try {
            return (long)mh$.invokeExact(atomic, val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_atomic_pointer_xor$MH() {
        return RuntimeHelper.requireNonNull(constants$30.g_atomic_pointer_xor$MH,"g_atomic_pointer_xor");
    }
    public static long g_atomic_pointer_xor ( Addressable atomic,  long val) {
        var mh$ = g_atomic_pointer_xor$MH();
        try {
            return (long)mh$.invokeExact(atomic, val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_atomic_int_exchange_and_add$MH() {
        return RuntimeHelper.requireNonNull(constants$31.g_atomic_int_exchange_and_add$MH,"g_atomic_int_exchange_and_add");
    }
    public static int g_atomic_int_exchange_and_add ( Addressable atomic,  int val) {
        var mh$ = g_atomic_int_exchange_and_add$MH();
        try {
            return (int)mh$.invokeExact(atomic, val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_quark_try_string$MH() {
        return RuntimeHelper.requireNonNull(constants$31.g_quark_try_string$MH,"g_quark_try_string");
    }
    public static int g_quark_try_string ( Addressable string) {
        var mh$ = g_quark_try_string$MH();
        try {
            return (int)mh$.invokeExact(string);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_quark_from_static_string$MH() {
        return RuntimeHelper.requireNonNull(constants$31.g_quark_from_static_string$MH,"g_quark_from_static_string");
    }
    public static int g_quark_from_static_string ( Addressable string) {
        var mh$ = g_quark_from_static_string$MH();
        try {
            return (int)mh$.invokeExact(string);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_quark_from_string$MH() {
        return RuntimeHelper.requireNonNull(constants$31.g_quark_from_string$MH,"g_quark_from_string");
    }
    public static int g_quark_from_string ( Addressable string) {
        var mh$ = g_quark_from_string$MH();
        try {
            return (int)mh$.invokeExact(string);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_quark_to_string$MH() {
        return RuntimeHelper.requireNonNull(constants$31.g_quark_to_string$MH,"g_quark_to_string");
    }
    public static MemoryAddress g_quark_to_string ( int quark) {
        var mh$ = g_quark_to_string$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(quark);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_intern_string$MH() {
        return RuntimeHelper.requireNonNull(constants$31.g_intern_string$MH,"g_intern_string");
    }
    public static MemoryAddress g_intern_string ( Addressable string) {
        var mh$ = g_intern_string$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(string);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_intern_static_string$MH() {
        return RuntimeHelper.requireNonNull(constants$32.g_intern_static_string$MH,"g_intern_static_string");
    }
    public static MemoryAddress g_intern_static_string ( Addressable string) {
        var mh$ = g_intern_static_string$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(string);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_error_domain_register_static$MH() {
        return RuntimeHelper.requireNonNull(constants$33.g_error_domain_register_static$MH,"g_error_domain_register_static");
    }
    public static int g_error_domain_register_static ( Addressable error_type_name,  long error_type_private_size,  Addressable error_type_init,  Addressable error_type_copy,  Addressable error_type_clear) {
        var mh$ = g_error_domain_register_static$MH();
        try {
            return (int)mh$.invokeExact(error_type_name, error_type_private_size, error_type_init, error_type_copy, error_type_clear);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_error_domain_register$MH() {
        return RuntimeHelper.requireNonNull(constants$33.g_error_domain_register$MH,"g_error_domain_register");
    }
    public static int g_error_domain_register ( Addressable error_type_name,  long error_type_private_size,  Addressable error_type_init,  Addressable error_type_copy,  Addressable error_type_clear) {
        var mh$ = g_error_domain_register$MH();
        try {
            return (int)mh$.invokeExact(error_type_name, error_type_private_size, error_type_init, error_type_copy, error_type_clear);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_error_new$MH() {
        return RuntimeHelper.requireNonNull(constants$33.g_error_new$MH,"g_error_new");
    }
    public static MemoryAddress g_error_new ( int domain,  int code,  Addressable format, Object... x3) {
        var mh$ = g_error_new$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(domain, code, format, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_error_new_literal$MH() {
        return RuntimeHelper.requireNonNull(constants$33.g_error_new_literal$MH,"g_error_new_literal");
    }
    public static MemoryAddress g_error_new_literal ( int domain,  int code,  Addressable message) {
        var mh$ = g_error_new_literal$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(domain, code, message);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_error_new_valist$MH() {
        return RuntimeHelper.requireNonNull(constants$33.g_error_new_valist$MH,"g_error_new_valist");
    }
    public static MemoryAddress g_error_new_valist ( int domain,  int code,  Addressable format,  Addressable args) {
        var mh$ = g_error_new_valist$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(domain, code, format, args);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_error_free$MH() {
        return RuntimeHelper.requireNonNull(constants$34.g_error_free$MH,"g_error_free");
    }
    public static void g_error_free ( Addressable error) {
        var mh$ = g_error_free$MH();
        try {
            mh$.invokeExact(error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_error_copy$MH() {
        return RuntimeHelper.requireNonNull(constants$34.g_error_copy$MH,"g_error_copy");
    }
    public static MemoryAddress g_error_copy ( Addressable error) {
        var mh$ = g_error_copy$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_error_matches$MH() {
        return RuntimeHelper.requireNonNull(constants$34.g_error_matches$MH,"g_error_matches");
    }
    public static int g_error_matches ( Addressable error,  int domain,  int code) {
        var mh$ = g_error_matches$MH();
        try {
            return (int)mh$.invokeExact(error, domain, code);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_set_error$MH() {
        return RuntimeHelper.requireNonNull(constants$34.g_set_error$MH,"g_set_error");
    }
    public static void g_set_error ( Addressable err,  int domain,  int code,  Addressable format, Object... x4) {
        var mh$ = g_set_error$MH();
        try {
            mh$.invokeExact(err, domain, code, format, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_set_error_literal$MH() {
        return RuntimeHelper.requireNonNull(constants$34.g_set_error_literal$MH,"g_set_error_literal");
    }
    public static void g_set_error_literal ( Addressable err,  int domain,  int code,  Addressable message) {
        var mh$ = g_set_error_literal$MH();
        try {
            mh$.invokeExact(err, domain, code, message);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_propagate_error$MH() {
        return RuntimeHelper.requireNonNull(constants$34.g_propagate_error$MH,"g_propagate_error");
    }
    public static void g_propagate_error ( Addressable dest,  Addressable src) {
        var mh$ = g_propagate_error$MH();
        try {
            mh$.invokeExact(dest, src);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_clear_error$MH() {
        return RuntimeHelper.requireNonNull(constants$35.g_clear_error$MH,"g_clear_error");
    }
    public static void g_clear_error ( Addressable err) {
        var mh$ = g_clear_error$MH();
        try {
            mh$.invokeExact(err);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_prefix_error$MH() {
        return RuntimeHelper.requireNonNull(constants$35.g_prefix_error$MH,"g_prefix_error");
    }
    public static void g_prefix_error ( Addressable err,  Addressable format, Object... x2) {
        var mh$ = g_prefix_error$MH();
        try {
            mh$.invokeExact(err, format, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_prefix_error_literal$MH() {
        return RuntimeHelper.requireNonNull(constants$35.g_prefix_error_literal$MH,"g_prefix_error_literal");
    }
    public static void g_prefix_error_literal ( Addressable err,  Addressable prefix) {
        var mh$ = g_prefix_error_literal$MH();
        try {
            mh$.invokeExact(err, prefix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_propagate_prefixed_error$MH() {
        return RuntimeHelper.requireNonNull(constants$35.g_propagate_prefixed_error$MH,"g_propagate_prefixed_error");
    }
    public static void g_propagate_prefixed_error ( Addressable dest,  Addressable src,  Addressable format, Object... x3) {
        var mh$ = g_propagate_prefixed_error$MH();
        try {
            mh$.invokeExact(dest, src, format, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_get_user_name$MH() {
        return RuntimeHelper.requireNonNull(constants$35.g_get_user_name$MH,"g_get_user_name");
    }
    public static MemoryAddress g_get_user_name () {
        var mh$ = g_get_user_name$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_get_real_name$MH() {
        return RuntimeHelper.requireNonNull(constants$35.g_get_real_name$MH,"g_get_real_name");
    }
    public static MemoryAddress g_get_real_name () {
        var mh$ = g_get_real_name$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_get_home_dir$MH() {
        return RuntimeHelper.requireNonNull(constants$36.g_get_home_dir$MH,"g_get_home_dir");
    }
    public static MemoryAddress g_get_home_dir () {
        var mh$ = g_get_home_dir$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_get_tmp_dir$MH() {
        return RuntimeHelper.requireNonNull(constants$36.g_get_tmp_dir$MH,"g_get_tmp_dir");
    }
    public static MemoryAddress g_get_tmp_dir () {
        var mh$ = g_get_tmp_dir$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_get_host_name$MH() {
        return RuntimeHelper.requireNonNull(constants$36.g_get_host_name$MH,"g_get_host_name");
    }
    public static MemoryAddress g_get_host_name () {
        var mh$ = g_get_host_name$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_get_prgname$MH() {
        return RuntimeHelper.requireNonNull(constants$36.g_get_prgname$MH,"g_get_prgname");
    }
    public static MemoryAddress g_get_prgname () {
        var mh$ = g_get_prgname$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_set_prgname$MH() {
        return RuntimeHelper.requireNonNull(constants$36.g_set_prgname$MH,"g_set_prgname");
    }
    public static void g_set_prgname ( Addressable prgname) {
        var mh$ = g_set_prgname$MH();
        try {
            mh$.invokeExact(prgname);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_get_application_name$MH() {
        return RuntimeHelper.requireNonNull(constants$36.g_get_application_name$MH,"g_get_application_name");
    }
    public static MemoryAddress g_get_application_name () {
        var mh$ = g_get_application_name$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_set_application_name$MH() {
        return RuntimeHelper.requireNonNull(constants$37.g_set_application_name$MH,"g_set_application_name");
    }
    public static void g_set_application_name ( Addressable application_name) {
        var mh$ = g_set_application_name$MH();
        try {
            mh$.invokeExact(application_name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_get_os_info$MH() {
        return RuntimeHelper.requireNonNull(constants$37.g_get_os_info$MH,"g_get_os_info");
    }
    public static MemoryAddress g_get_os_info ( Addressable key_name) {
        var mh$ = g_get_os_info$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(key_name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_reload_user_special_dirs_cache$MH() {
        return RuntimeHelper.requireNonNull(constants$37.g_reload_user_special_dirs_cache$MH,"g_reload_user_special_dirs_cache");
    }
    public static void g_reload_user_special_dirs_cache () {
        var mh$ = g_reload_user_special_dirs_cache$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_get_user_data_dir$MH() {
        return RuntimeHelper.requireNonNull(constants$37.g_get_user_data_dir$MH,"g_get_user_data_dir");
    }
    public static MemoryAddress g_get_user_data_dir () {
        var mh$ = g_get_user_data_dir$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_get_user_config_dir$MH() {
        return RuntimeHelper.requireNonNull(constants$37.g_get_user_config_dir$MH,"g_get_user_config_dir");
    }
    public static MemoryAddress g_get_user_config_dir () {
        var mh$ = g_get_user_config_dir$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_get_user_cache_dir$MH() {
        return RuntimeHelper.requireNonNull(constants$37.g_get_user_cache_dir$MH,"g_get_user_cache_dir");
    }
    public static MemoryAddress g_get_user_cache_dir () {
        var mh$ = g_get_user_cache_dir$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_get_user_state_dir$MH() {
        return RuntimeHelper.requireNonNull(constants$38.g_get_user_state_dir$MH,"g_get_user_state_dir");
    }
    public static MemoryAddress g_get_user_state_dir () {
        var mh$ = g_get_user_state_dir$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_get_system_data_dirs$MH() {
        return RuntimeHelper.requireNonNull(constants$38.g_get_system_data_dirs$MH,"g_get_system_data_dirs");
    }
    public static MemoryAddress g_get_system_data_dirs () {
        var mh$ = g_get_system_data_dirs$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_get_system_config_dirs$MH() {
        return RuntimeHelper.requireNonNull(constants$38.g_get_system_config_dirs$MH,"g_get_system_config_dirs");
    }
    public static MemoryAddress g_get_system_config_dirs () {
        var mh$ = g_get_system_config_dirs$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_get_user_runtime_dir$MH() {
        return RuntimeHelper.requireNonNull(constants$38.g_get_user_runtime_dir$MH,"g_get_user_runtime_dir");
    }
    public static MemoryAddress g_get_user_runtime_dir () {
        var mh$ = g_get_user_runtime_dir$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int G_USER_DIRECTORY_DESKTOP() {
        return (int)0L;
    }
    public static int G_USER_DIRECTORY_DOCUMENTS() {
        return (int)1L;
    }
    public static int G_USER_DIRECTORY_DOWNLOAD() {
        return (int)2L;
    }
    public static int G_USER_DIRECTORY_MUSIC() {
        return (int)3L;
    }
    public static int G_USER_DIRECTORY_PICTURES() {
        return (int)4L;
    }
    public static int G_USER_DIRECTORY_PUBLIC_SHARE() {
        return (int)5L;
    }
    public static int G_USER_DIRECTORY_TEMPLATES() {
        return (int)6L;
    }
    public static int G_USER_DIRECTORY_VIDEOS() {
        return (int)7L;
    }
    public static int G_USER_N_DIRECTORIES() {
        return (int)8L;
    }
    public static MethodHandle g_get_user_special_dir$MH() {
        return RuntimeHelper.requireNonNull(constants$38.g_get_user_special_dir$MH,"g_get_user_special_dir");
    }
    public static MemoryAddress g_get_user_special_dir ( int directory) {
        var mh$ = g_get_user_special_dir$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(directory);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_parse_debug_string$MH() {
        return RuntimeHelper.requireNonNull(constants$38.g_parse_debug_string$MH,"g_parse_debug_string");
    }
    public static int g_parse_debug_string ( Addressable string,  Addressable keys,  int nkeys) {
        var mh$ = g_parse_debug_string$MH();
        try {
            return (int)mh$.invokeExact(string, keys, nkeys);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_snprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$39.g_snprintf$MH,"g_snprintf");
    }
    public static int g_snprintf ( Addressable string,  long n,  Addressable format, Object... x3) {
        var mh$ = g_snprintf$MH();
        try {
            return (int)mh$.invokeExact(string, n, format, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_vsnprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$39.g_vsnprintf$MH,"g_vsnprintf");
    }
    public static int g_vsnprintf ( Addressable string,  long n,  Addressable format,  Addressable args) {
        var mh$ = g_vsnprintf$MH();
        try {
            return (int)mh$.invokeExact(string, n, format, args);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_nullify_pointer$MH() {
        return RuntimeHelper.requireNonNull(constants$39.g_nullify_pointer$MH,"g_nullify_pointer");
    }
    public static void g_nullify_pointer ( Addressable nullify_location) {
        var mh$ = g_nullify_pointer$MH();
        try {
            mh$.invokeExact(nullify_location);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int G_FORMAT_SIZE_DEFAULT() {
        return (int)0L;
    }
    public static int G_FORMAT_SIZE_LONG_FORMAT() {
        return (int)1L;
    }
    public static int G_FORMAT_SIZE_IEC_UNITS() {
        return (int)2L;
    }
    public static int G_FORMAT_SIZE_BITS() {
        return (int)4L;
    }
    public static MethodHandle g_format_size_full$MH() {
        return RuntimeHelper.requireNonNull(constants$39.g_format_size_full$MH,"g_format_size_full");
    }
    public static MemoryAddress g_format_size_full ( long size,  int flags) {
        var mh$ = g_format_size_full$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(size, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_format_size$MH() {
        return RuntimeHelper.requireNonNull(constants$39.g_format_size$MH,"g_format_size");
    }
    public static MemoryAddress g_format_size ( long size) {
        var mh$ = g_format_size$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_format_size_for_display$MH() {
        return RuntimeHelper.requireNonNull(constants$39.g_format_size_for_display$MH,"g_format_size_for_display");
    }
    public static MemoryAddress g_format_size_for_display ( long size) {
        var mh$ = g_format_size_for_display$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_atexit$MH() {
        return RuntimeHelper.requireNonNull(constants$40.g_atexit$MH,"g_atexit");
    }
    public static void g_atexit ( Addressable func) {
        var mh$ = g_atexit$MH();
        try {
            mh$.invokeExact(func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_find_program_in_path$MH() {
        return RuntimeHelper.requireNonNull(constants$40.g_find_program_in_path$MH,"g_find_program_in_path");
    }
    public static MemoryAddress g_find_program_in_path ( Addressable program) {
        var mh$ = g_find_program_in_path$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(program);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bit_nth_lsf$MH() {
        return RuntimeHelper.requireNonNull(constants$40.g_bit_nth_lsf$MH,"g_bit_nth_lsf");
    }
    public static int g_bit_nth_lsf ( long mask,  int nth_bit) {
        var mh$ = g_bit_nth_lsf$MH();
        try {
            return (int)mh$.invokeExact(mask, nth_bit);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bit_nth_msf$MH() {
        return RuntimeHelper.requireNonNull(constants$40.g_bit_nth_msf$MH,"g_bit_nth_msf");
    }
    public static int g_bit_nth_msf ( long mask,  int nth_bit) {
        var mh$ = g_bit_nth_msf$MH();
        try {
            return (int)mh$.invokeExact(mask, nth_bit);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bit_storage$MH() {
        return RuntimeHelper.requireNonNull(constants$41.g_bit_storage$MH,"g_bit_storage");
    }
    public static int g_bit_storage ( long number) {
        var mh$ = g_bit_storage$MH();
        try {
            return (int)mh$.invokeExact(number);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bit_nth_lsf_impl$MH() {
        return RuntimeHelper.requireNonNull(constants$41.g_bit_nth_lsf_impl$MH,"g_bit_nth_lsf_impl");
    }
    public static int g_bit_nth_lsf_impl ( long mask,  int nth_bit) {
        var mh$ = g_bit_nth_lsf_impl$MH();
        try {
            return (int)mh$.invokeExact(mask, nth_bit);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bit_nth_msf_impl$MH() {
        return RuntimeHelper.requireNonNull(constants$41.g_bit_nth_msf_impl$MH,"g_bit_nth_msf_impl");
    }
    public static int g_bit_nth_msf_impl ( long mask,  int nth_bit) {
        var mh$ = g_bit_nth_msf_impl$MH();
        try {
            return (int)mh$.invokeExact(mask, nth_bit);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bit_storage_impl$MH() {
        return RuntimeHelper.requireNonNull(constants$41.g_bit_storage_impl$MH,"g_bit_storage_impl");
    }
    public static int g_bit_storage_impl ( long number) {
        var mh$ = g_bit_storage_impl$MH();
        try {
            return (int)mh$.invokeExact(number);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfFloat _Float32 = Constants$root.C_FLOAT$LAYOUT;
    public static OfDouble _Float64 = Constants$root.C_DOUBLE$LAYOUT;
    public static OfDouble _Float32x = Constants$root.C_DOUBLE$LAYOUT;
    public static MethodHandle __ctype_get_mb_cur_max$MH() {
        return RuntimeHelper.requireNonNull(constants$41.__ctype_get_mb_cur_max$MH,"__ctype_get_mb_cur_max");
    }
    public static long __ctype_get_mb_cur_max () {
        var mh$ = __ctype_get_mb_cur_max$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atof$MH() {
        return RuntimeHelper.requireNonNull(constants$41.atof$MH,"atof");
    }
    public static double atof ( Addressable __nptr) {
        var mh$ = atof$MH();
        try {
            return (double)mh$.invokeExact(__nptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atoi$MH() {
        return RuntimeHelper.requireNonNull(constants$42.atoi$MH,"atoi");
    }
    public static int atoi ( Addressable __nptr) {
        var mh$ = atoi$MH();
        try {
            return (int)mh$.invokeExact(__nptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atol$MH() {
        return RuntimeHelper.requireNonNull(constants$42.atol$MH,"atol");
    }
    public static long atol ( Addressable __nptr) {
        var mh$ = atol$MH();
        try {
            return (long)mh$.invokeExact(__nptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atoll$MH() {
        return RuntimeHelper.requireNonNull(constants$42.atoll$MH,"atoll");
    }
    public static long atoll ( Addressable __nptr) {
        var mh$ = atoll$MH();
        try {
            return (long)mh$.invokeExact(__nptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtod$MH() {
        return RuntimeHelper.requireNonNull(constants$42.strtod$MH,"strtod");
    }
    public static double strtod ( Addressable __nptr,  Addressable __endptr) {
        var mh$ = strtod$MH();
        try {
            return (double)mh$.invokeExact(__nptr, __endptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtof$MH() {
        return RuntimeHelper.requireNonNull(constants$42.strtof$MH,"strtof");
    }
    public static float strtof ( Addressable __nptr,  Addressable __endptr) {
        var mh$ = strtof$MH();
        try {
            return (float)mh$.invokeExact(__nptr, __endptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtol$MH() {
        return RuntimeHelper.requireNonNull(constants$42.strtol$MH,"strtol");
    }
    public static long strtol ( Addressable __nptr,  Addressable __endptr,  int __base) {
        var mh$ = strtol$MH();
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtoul$MH() {
        return RuntimeHelper.requireNonNull(constants$43.strtoul$MH,"strtoul");
    }
    public static long strtoul ( Addressable __nptr,  Addressable __endptr,  int __base) {
        var mh$ = strtoul$MH();
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtoq$MH() {
        return RuntimeHelper.requireNonNull(constants$43.strtoq$MH,"strtoq");
    }
    public static long strtoq ( Addressable __nptr,  Addressable __endptr,  int __base) {
        var mh$ = strtoq$MH();
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtouq$MH() {
        return RuntimeHelper.requireNonNull(constants$43.strtouq$MH,"strtouq");
    }
    public static long strtouq ( Addressable __nptr,  Addressable __endptr,  int __base) {
        var mh$ = strtouq$MH();
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtoll$MH() {
        return RuntimeHelper.requireNonNull(constants$43.strtoll$MH,"strtoll");
    }
    public static long strtoll ( Addressable __nptr,  Addressable __endptr,  int __base) {
        var mh$ = strtoll$MH();
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtoull$MH() {
        return RuntimeHelper.requireNonNull(constants$43.strtoull$MH,"strtoull");
    }
    public static long strtoull ( Addressable __nptr,  Addressable __endptr,  int __base) {
        var mh$ = strtoull$MH();
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle l64a$MH() {
        return RuntimeHelper.requireNonNull(constants$43.l64a$MH,"l64a");
    }
    public static MemoryAddress l64a ( long __n) {
        var mh$ = l64a$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle a64l$MH() {
        return RuntimeHelper.requireNonNull(constants$44.a64l$MH,"a64l");
    }
    public static long a64l ( Addressable __s) {
        var mh$ = a64l$MH();
        try {
            return (long)mh$.invokeExact(__s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfLong quad_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong loff_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong off_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong ssize_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt daddr_t = Constants$root.C_INT$LAYOUT;
    public static OfAddress caddr_t = Constants$root.C_POINTER$LAYOUT;
    public static OfInt key_t = Constants$root.C_INT$LAYOUT;
    public static OfShort int16_t = Constants$root.C_SHORT$LAYOUT;
    public static OfInt int32_t = Constants$root.C_INT$LAYOUT;
    public static OfLong int64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong register_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static MethodHandle __bswap_16$MH() {
        return RuntimeHelper.requireNonNull(constants$44.__bswap_16$MH,"__bswap_16");
    }
    public static short __bswap_16 ( short __bsx) {
        var mh$ = __bswap_16$MH();
        try {
            return (short)mh$.invokeExact(__bsx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __bswap_32$MH() {
        return RuntimeHelper.requireNonNull(constants$44.__bswap_32$MH,"__bswap_32");
    }
    public static int __bswap_32 ( int __bsx) {
        var mh$ = __bswap_32$MH();
        try {
            return (int)mh$.invokeExact(__bsx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __bswap_64$MH() {
        return RuntimeHelper.requireNonNull(constants$44.__bswap_64$MH,"__bswap_64");
    }
    public static long __bswap_64 ( long __bsx) {
        var mh$ = __bswap_64$MH();
        try {
            return (long)mh$.invokeExact(__bsx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __uint16_identity$MH() {
        return RuntimeHelper.requireNonNull(constants$44.__uint16_identity$MH,"__uint16_identity");
    }
    public static short __uint16_identity ( short __x) {
        var mh$ = __uint16_identity$MH();
        try {
            return (short)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __uint32_identity$MH() {
        return RuntimeHelper.requireNonNull(constants$44.__uint32_identity$MH,"__uint32_identity");
    }
    public static int __uint32_identity ( int __x) {
        var mh$ = __uint32_identity$MH();
        try {
            return (int)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __uint64_identity$MH() {
        return RuntimeHelper.requireNonNull(constants$45.__uint64_identity$MH,"__uint64_identity");
    }
    public static long __uint64_identity ( long __x) {
        var mh$ = __uint64_identity$MH();
        try {
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfLong suseconds_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __fd_mask = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong fd_mask = Constants$root.C_LONG_LONG$LAYOUT;
    public static MethodHandle select$MH() {
        return RuntimeHelper.requireNonNull(constants$45.select$MH,"select");
    }
    public static int select ( int __nfds,  Addressable __readfds,  Addressable __writefds,  Addressable __exceptfds,  Addressable __timeout) {
        var mh$ = select$MH();
        try {
            return (int)mh$.invokeExact(__nfds, __readfds, __writefds, __exceptfds, __timeout);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pselect$MH() {
        return RuntimeHelper.requireNonNull(constants$45.pselect$MH,"pselect");
    }
    public static int pselect ( int __nfds,  Addressable __readfds,  Addressable __writefds,  Addressable __exceptfds,  Addressable __timeout,  Addressable __sigmask) {
        var mh$ = pselect$MH();
        try {
            return (int)mh$.invokeExact(__nfds, __readfds, __writefds, __exceptfds, __timeout, __sigmask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfLong blksize_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong blkcnt_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt pthread_once_t = Constants$root.C_INT$LAYOUT;
    public static OfInt pthread_spinlock_t = Constants$root.C_INT$LAYOUT;
    public static MethodHandle random$MH() {
        return RuntimeHelper.requireNonNull(constants$45.random$MH,"random");
    }
    public static long random () {
        var mh$ = random$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle srandom$MH() {
        return RuntimeHelper.requireNonNull(constants$45.srandom$MH,"srandom");
    }
    public static void srandom ( int __seed) {
        var mh$ = srandom$MH();
        try {
            mh$.invokeExact(__seed);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle initstate$MH() {
        return RuntimeHelper.requireNonNull(constants$45.initstate$MH,"initstate");
    }
    public static MemoryAddress initstate ( int __seed,  Addressable __statebuf,  long __statelen) {
        var mh$ = initstate$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__seed, __statebuf, __statelen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setstate$MH() {
        return RuntimeHelper.requireNonNull(constants$46.setstate$MH,"setstate");
    }
    public static MemoryAddress setstate ( Addressable __statebuf) {
        var mh$ = setstate$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__statebuf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle random_r$MH() {
        return RuntimeHelper.requireNonNull(constants$46.random_r$MH,"random_r");
    }
    public static int random_r ( Addressable __buf,  Addressable __result) {
        var mh$ = random_r$MH();
        try {
            return (int)mh$.invokeExact(__buf, __result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle srandom_r$MH() {
        return RuntimeHelper.requireNonNull(constants$46.srandom_r$MH,"srandom_r");
    }
    public static int srandom_r ( int __seed,  Addressable __buf) {
        var mh$ = srandom_r$MH();
        try {
            return (int)mh$.invokeExact(__seed, __buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle initstate_r$MH() {
        return RuntimeHelper.requireNonNull(constants$46.initstate_r$MH,"initstate_r");
    }
    public static int initstate_r ( int __seed,  Addressable __statebuf,  long __statelen,  Addressable __buf) {
        var mh$ = initstate_r$MH();
        try {
            return (int)mh$.invokeExact(__seed, __statebuf, __statelen, __buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setstate_r$MH() {
        return RuntimeHelper.requireNonNull(constants$46.setstate_r$MH,"setstate_r");
    }
    public static int setstate_r ( Addressable __statebuf,  Addressable __buf) {
        var mh$ = setstate_r$MH();
        try {
            return (int)mh$.invokeExact(__statebuf, __buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rand$MH() {
        return RuntimeHelper.requireNonNull(constants$46.rand$MH,"rand");
    }
    public static int rand () {
        var mh$ = rand$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle srand$MH() {
        return RuntimeHelper.requireNonNull(constants$47.srand$MH,"srand");
    }
    public static void srand ( int __seed) {
        var mh$ = srand$MH();
        try {
            mh$.invokeExact(__seed);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rand_r$MH() {
        return RuntimeHelper.requireNonNull(constants$47.rand_r$MH,"rand_r");
    }
    public static int rand_r ( Addressable __seed) {
        var mh$ = rand_r$MH();
        try {
            return (int)mh$.invokeExact(__seed);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle drand48$MH() {
        return RuntimeHelper.requireNonNull(constants$47.drand48$MH,"drand48");
    }
    public static double drand48 () {
        var mh$ = drand48$MH();
        try {
            return (double)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle erand48$MH() {
        return RuntimeHelper.requireNonNull(constants$47.erand48$MH,"erand48");
    }
    public static double erand48 ( Addressable __xsubi) {
        var mh$ = erand48$MH();
        try {
            return (double)mh$.invokeExact(__xsubi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lrand48$MH() {
        return RuntimeHelper.requireNonNull(constants$47.lrand48$MH,"lrand48");
    }
    public static long lrand48 () {
        var mh$ = lrand48$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nrand48$MH() {
        return RuntimeHelper.requireNonNull(constants$47.nrand48$MH,"nrand48");
    }
    public static long nrand48 ( Addressable __xsubi) {
        var mh$ = nrand48$MH();
        try {
            return (long)mh$.invokeExact(__xsubi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mrand48$MH() {
        return RuntimeHelper.requireNonNull(constants$48.mrand48$MH,"mrand48");
    }
    public static long mrand48 () {
        var mh$ = mrand48$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle jrand48$MH() {
        return RuntimeHelper.requireNonNull(constants$48.jrand48$MH,"jrand48");
    }
    public static long jrand48 ( Addressable __xsubi) {
        var mh$ = jrand48$MH();
        try {
            return (long)mh$.invokeExact(__xsubi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle srand48$MH() {
        return RuntimeHelper.requireNonNull(constants$48.srand48$MH,"srand48");
    }
    public static void srand48 ( long __seedval) {
        var mh$ = srand48$MH();
        try {
            mh$.invokeExact(__seedval);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle seed48$MH() {
        return RuntimeHelper.requireNonNull(constants$48.seed48$MH,"seed48");
    }
    public static MemoryAddress seed48 ( Addressable __seed16v) {
        var mh$ = seed48$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__seed16v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lcong48$MH() {
        return RuntimeHelper.requireNonNull(constants$48.lcong48$MH,"lcong48");
    }
    public static void lcong48 ( Addressable __param) {
        var mh$ = lcong48$MH();
        try {
            mh$.invokeExact(__param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle drand48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$48.drand48_r$MH,"drand48_r");
    }
    public static int drand48_r ( Addressable __buffer,  Addressable __result) {
        var mh$ = drand48_r$MH();
        try {
            return (int)mh$.invokeExact(__buffer, __result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle erand48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$49.erand48_r$MH,"erand48_r");
    }
    public static int erand48_r ( Addressable __xsubi,  Addressable __buffer,  Addressable __result) {
        var mh$ = erand48_r$MH();
        try {
            return (int)mh$.invokeExact(__xsubi, __buffer, __result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lrand48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$49.lrand48_r$MH,"lrand48_r");
    }
    public static int lrand48_r ( Addressable __buffer,  Addressable __result) {
        var mh$ = lrand48_r$MH();
        try {
            return (int)mh$.invokeExact(__buffer, __result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nrand48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$49.nrand48_r$MH,"nrand48_r");
    }
    public static int nrand48_r ( Addressable __xsubi,  Addressable __buffer,  Addressable __result) {
        var mh$ = nrand48_r$MH();
        try {
            return (int)mh$.invokeExact(__xsubi, __buffer, __result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mrand48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$49.mrand48_r$MH,"mrand48_r");
    }
    public static int mrand48_r ( Addressable __buffer,  Addressable __result) {
        var mh$ = mrand48_r$MH();
        try {
            return (int)mh$.invokeExact(__buffer, __result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle jrand48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$49.jrand48_r$MH,"jrand48_r");
    }
    public static int jrand48_r ( Addressable __xsubi,  Addressable __buffer,  Addressable __result) {
        var mh$ = jrand48_r$MH();
        try {
            return (int)mh$.invokeExact(__xsubi, __buffer, __result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle srand48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$49.srand48_r$MH,"srand48_r");
    }
    public static int srand48_r ( long __seedval,  Addressable __buffer) {
        var mh$ = srand48_r$MH();
        try {
            return (int)mh$.invokeExact(__seedval, __buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle seed48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$50.seed48_r$MH,"seed48_r");
    }
    public static int seed48_r ( Addressable __seed16v,  Addressable __buffer) {
        var mh$ = seed48_r$MH();
        try {
            return (int)mh$.invokeExact(__seed16v, __buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lcong48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$50.lcong48_r$MH,"lcong48_r");
    }
    public static int lcong48_r ( Addressable __param,  Addressable __buffer) {
        var mh$ = lcong48_r$MH();
        try {
            return (int)mh$.invokeExact(__param, __buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle malloc$MH() {
        return RuntimeHelper.requireNonNull(constants$50.malloc$MH,"malloc");
    }
    public static MemoryAddress malloc ( long __size) {
        var mh$ = malloc$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle calloc$MH() {
        return RuntimeHelper.requireNonNull(constants$50.calloc$MH,"calloc");
    }
    public static MemoryAddress calloc ( long __nmemb,  long __size) {
        var mh$ = calloc$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__nmemb, __size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle realloc$MH() {
        return RuntimeHelper.requireNonNull(constants$50.realloc$MH,"realloc");
    }
    public static MemoryAddress realloc ( Addressable __ptr,  long __size) {
        var mh$ = realloc$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__ptr, __size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle free$MH() {
        return RuntimeHelper.requireNonNull(constants$50.free$MH,"free");
    }
    public static void free ( Addressable __ptr) {
        var mh$ = free$MH();
        try {
            mh$.invokeExact(__ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle reallocarray$MH() {
        return RuntimeHelper.requireNonNull(constants$51.reallocarray$MH,"reallocarray");
    }
    public static MemoryAddress reallocarray ( Addressable __ptr,  long __nmemb,  long __size) {
        var mh$ = reallocarray$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__ptr, __nmemb, __size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle alloca$MH() {
        return RuntimeHelper.requireNonNull(constants$51.alloca$MH,"alloca");
    }
    public static MemoryAddress alloca ( long __size) {
        var mh$ = alloca$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle valloc$MH() {
        return RuntimeHelper.requireNonNull(constants$51.valloc$MH,"valloc");
    }
    public static MemoryAddress valloc ( long __size) {
        var mh$ = valloc$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle posix_memalign$MH() {
        return RuntimeHelper.requireNonNull(constants$51.posix_memalign$MH,"posix_memalign");
    }
    public static int posix_memalign ( Addressable __memptr,  long __alignment,  long __size) {
        var mh$ = posix_memalign$MH();
        try {
            return (int)mh$.invokeExact(__memptr, __alignment, __size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle aligned_alloc$MH() {
        return RuntimeHelper.requireNonNull(constants$51.aligned_alloc$MH,"aligned_alloc");
    }
    public static MemoryAddress aligned_alloc ( long __alignment,  long __size) {
        var mh$ = aligned_alloc$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__alignment, __size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle abort$MH() {
        return RuntimeHelper.requireNonNull(constants$51.abort$MH,"abort");
    }
    public static void abort () {
        var mh$ = abort$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atexit$MH() {
        return RuntimeHelper.requireNonNull(constants$52.atexit$MH,"atexit");
    }
    public static int atexit ( Addressable __func) {
        var mh$ = atexit$MH();
        try {
            return (int)mh$.invokeExact(__func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle at_quick_exit$MH() {
        return RuntimeHelper.requireNonNull(constants$52.at_quick_exit$MH,"at_quick_exit");
    }
    public static int at_quick_exit ( Addressable __func) {
        var mh$ = at_quick_exit$MH();
        try {
            return (int)mh$.invokeExact(__func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle on_exit$MH() {
        return RuntimeHelper.requireNonNull(constants$53.on_exit$MH,"on_exit");
    }
    public static int on_exit ( Addressable __func,  Addressable __arg) {
        var mh$ = on_exit$MH();
        try {
            return (int)mh$.invokeExact(__func, __arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle exit$MH() {
        return RuntimeHelper.requireNonNull(constants$53.exit$MH,"exit");
    }
    public static void exit ( int __status) {
        var mh$ = exit$MH();
        try {
            mh$.invokeExact(__status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle quick_exit$MH() {
        return RuntimeHelper.requireNonNull(constants$53.quick_exit$MH,"quick_exit");
    }
    public static void quick_exit ( int __status) {
        var mh$ = quick_exit$MH();
        try {
            mh$.invokeExact(__status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _Exit$MH() {
        return RuntimeHelper.requireNonNull(constants$53._Exit$MH,"_Exit");
    }
    public static void _Exit ( int __status) {
        var mh$ = _Exit$MH();
        try {
            mh$.invokeExact(__status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getenv$MH() {
        return RuntimeHelper.requireNonNull(constants$54.getenv$MH,"getenv");
    }
    public static MemoryAddress getenv ( Addressable __name) {
        var mh$ = getenv$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle putenv$MH() {
        return RuntimeHelper.requireNonNull(constants$54.putenv$MH,"putenv");
    }
    public static int putenv ( Addressable __string) {
        var mh$ = putenv$MH();
        try {
            return (int)mh$.invokeExact(__string);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setenv$MH() {
        return RuntimeHelper.requireNonNull(constants$54.setenv$MH,"setenv");
    }
    public static int setenv ( Addressable __name,  Addressable __value,  int __replace) {
        var mh$ = setenv$MH();
        try {
            return (int)mh$.invokeExact(__name, __value, __replace);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle unsetenv$MH() {
        return RuntimeHelper.requireNonNull(constants$54.unsetenv$MH,"unsetenv");
    }
    public static int unsetenv ( Addressable __name) {
        var mh$ = unsetenv$MH();
        try {
            return (int)mh$.invokeExact(__name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clearenv$MH() {
        return RuntimeHelper.requireNonNull(constants$54.clearenv$MH,"clearenv");
    }
    public static int clearenv () {
        var mh$ = clearenv$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mktemp$MH() {
        return RuntimeHelper.requireNonNull(constants$54.mktemp$MH,"mktemp");
    }
    public static MemoryAddress mktemp ( Addressable __template) {
        var mh$ = mktemp$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__template);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mkstemp$MH() {
        return RuntimeHelper.requireNonNull(constants$55.mkstemp$MH,"mkstemp");
    }
    public static int mkstemp ( Addressable __template) {
        var mh$ = mkstemp$MH();
        try {
            return (int)mh$.invokeExact(__template);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mkstemps$MH() {
        return RuntimeHelper.requireNonNull(constants$55.mkstemps$MH,"mkstemps");
    }
    public static int mkstemps ( Addressable __template,  int __suffixlen) {
        var mh$ = mkstemps$MH();
        try {
            return (int)mh$.invokeExact(__template, __suffixlen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mkdtemp$MH() {
        return RuntimeHelper.requireNonNull(constants$55.mkdtemp$MH,"mkdtemp");
    }
    public static MemoryAddress mkdtemp ( Addressable __template) {
        var mh$ = mkdtemp$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__template);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle system$MH() {
        return RuntimeHelper.requireNonNull(constants$55.system$MH,"system");
    }
    public static int system ( Addressable __command) {
        var mh$ = system$MH();
        try {
            return (int)mh$.invokeExact(__command);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle realpath$MH() {
        return RuntimeHelper.requireNonNull(constants$55.realpath$MH,"realpath");
    }
    public static MemoryAddress realpath ( Addressable __name,  Addressable __resolved) {
        var mh$ = realpath$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__name, __resolved);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle bsearch$MH() {
        return RuntimeHelper.requireNonNull(constants$56.bsearch$MH,"bsearch");
    }
    public static MemoryAddress bsearch ( Addressable __key,  Addressable __base,  long __nmemb,  long __size,  Addressable __compar) {
        var mh$ = bsearch$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__key, __base, __nmemb, __size, __compar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle qsort$MH() {
        return RuntimeHelper.requireNonNull(constants$56.qsort$MH,"qsort");
    }
    public static void qsort ( Addressable __base,  long __nmemb,  long __size,  Addressable __compar) {
        var mh$ = qsort$MH();
        try {
            mh$.invokeExact(__base, __nmemb, __size, __compar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle abs$MH() {
        return RuntimeHelper.requireNonNull(constants$56.abs$MH,"abs");
    }
    public static int abs ( int __x) {
        var mh$ = abs$MH();
        try {
            return (int)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle labs$MH() {
        return RuntimeHelper.requireNonNull(constants$56.labs$MH,"labs");
    }
    public static long labs ( long __x) {
        var mh$ = labs$MH();
        try {
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llabs$MH() {
        return RuntimeHelper.requireNonNull(constants$56.llabs$MH,"llabs");
    }
    public static long llabs ( long __x) {
        var mh$ = llabs$MH();
        try {
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle div$MH() {
        return RuntimeHelper.requireNonNull(constants$57.div$MH,"div");
    }
    public static MemorySegment div ( SegmentAllocator allocator,  int __numer,  int __denom) {
        var mh$ = div$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, __numer, __denom);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ldiv$MH() {
        return RuntimeHelper.requireNonNull(constants$57.ldiv$MH,"ldiv");
    }
    public static MemorySegment ldiv ( SegmentAllocator allocator,  long __numer,  long __denom) {
        var mh$ = ldiv$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, __numer, __denom);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lldiv$MH() {
        return RuntimeHelper.requireNonNull(constants$57.lldiv$MH,"lldiv");
    }
    public static MemorySegment lldiv ( SegmentAllocator allocator,  long __numer,  long __denom) {
        var mh$ = lldiv$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, __numer, __denom);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ecvt$MH() {
        return RuntimeHelper.requireNonNull(constants$57.ecvt$MH,"ecvt");
    }
    public static MemoryAddress ecvt ( double __value,  int __ndigit,  Addressable __decpt,  Addressable __sign) {
        var mh$ = ecvt$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__value, __ndigit, __decpt, __sign);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fcvt$MH() {
        return RuntimeHelper.requireNonNull(constants$57.fcvt$MH,"fcvt");
    }
    public static MemoryAddress fcvt ( double __value,  int __ndigit,  Addressable __decpt,  Addressable __sign) {
        var mh$ = fcvt$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__value, __ndigit, __decpt, __sign);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gcvt$MH() {
        return RuntimeHelper.requireNonNull(constants$57.gcvt$MH,"gcvt");
    }
    public static MemoryAddress gcvt ( double __value,  int __ndigit,  Addressable __buf) {
        var mh$ = gcvt$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__value, __ndigit, __buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ecvt_r$MH() {
        return RuntimeHelper.requireNonNull(constants$58.ecvt_r$MH,"ecvt_r");
    }
    public static int ecvt_r ( double __value,  int __ndigit,  Addressable __decpt,  Addressable __sign,  Addressable __buf,  long __len) {
        var mh$ = ecvt_r$MH();
        try {
            return (int)mh$.invokeExact(__value, __ndigit, __decpt, __sign, __buf, __len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fcvt_r$MH() {
        return RuntimeHelper.requireNonNull(constants$58.fcvt_r$MH,"fcvt_r");
    }
    public static int fcvt_r ( double __value,  int __ndigit,  Addressable __decpt,  Addressable __sign,  Addressable __buf,  long __len) {
        var mh$ = fcvt_r$MH();
        try {
            return (int)mh$.invokeExact(__value, __ndigit, __decpt, __sign, __buf, __len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mblen$MH() {
        return RuntimeHelper.requireNonNull(constants$58.mblen$MH,"mblen");
    }
    public static int mblen ( Addressable __s,  long __n) {
        var mh$ = mblen$MH();
        try {
            return (int)mh$.invokeExact(__s, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mbtowc$MH() {
        return RuntimeHelper.requireNonNull(constants$58.mbtowc$MH,"mbtowc");
    }
    public static int mbtowc ( Addressable __pwc,  Addressable __s,  long __n) {
        var mh$ = mbtowc$MH();
        try {
            return (int)mh$.invokeExact(__pwc, __s, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wctomb$MH() {
        return RuntimeHelper.requireNonNull(constants$58.wctomb$MH,"wctomb");
    }
    public static int wctomb ( Addressable __s,  int __wchar) {
        var mh$ = wctomb$MH();
        try {
            return (int)mh$.invokeExact(__s, __wchar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mbstowcs$MH() {
        return RuntimeHelper.requireNonNull(constants$58.mbstowcs$MH,"mbstowcs");
    }
    public static long mbstowcs ( Addressable __pwcs,  Addressable __s,  long __n) {
        var mh$ = mbstowcs$MH();
        try {
            return (long)mh$.invokeExact(__pwcs, __s, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcstombs$MH() {
        return RuntimeHelper.requireNonNull(constants$59.wcstombs$MH,"wcstombs");
    }
    public static long wcstombs ( Addressable __s,  Addressable __pwcs,  long __n) {
        var mh$ = wcstombs$MH();
        try {
            return (long)mh$.invokeExact(__s, __pwcs, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rpmatch$MH() {
        return RuntimeHelper.requireNonNull(constants$59.rpmatch$MH,"rpmatch");
    }
    public static int rpmatch ( Addressable __response) {
        var mh$ = rpmatch$MH();
        try {
            return (int)mh$.invokeExact(__response);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getsubopt$MH() {
        return RuntimeHelper.requireNonNull(constants$59.getsubopt$MH,"getsubopt");
    }
    public static int getsubopt ( Addressable __optionp,  Addressable __tokens,  Addressable __valuep) {
        var mh$ = getsubopt$MH();
        try {
            return (int)mh$.invokeExact(__optionp, __tokens, __valuep);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getloadavg$MH() {
        return RuntimeHelper.requireNonNull(constants$59.getloadavg$MH,"getloadavg");
    }
    public static int getloadavg ( Addressable __loadavg,  int __nelem) {
        var mh$ = getloadavg$MH();
        try {
            return (int)mh$.invokeExact(__loadavg, __nelem);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_thread_error_quark$MH() {
        return RuntimeHelper.requireNonNull(constants$59.g_thread_error_quark$MH,"g_thread_error_quark");
    }
    public static int g_thread_error_quark () {
        var mh$ = g_thread_error_quark$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int G_THREAD_ERROR_AGAIN() {
        return (int)0L;
    }
    public static int G_ONCE_STATUS_NOTCALLED() {
        return (int)0L;
    }
    public static int G_ONCE_STATUS_PROGRESS() {
        return (int)1L;
    }
    public static int G_ONCE_STATUS_READY() {
        return (int)2L;
    }
    public static MethodHandle g_thread_ref$MH() {
        return RuntimeHelper.requireNonNull(constants$60.g_thread_ref$MH,"g_thread_ref");
    }
    public static MemoryAddress g_thread_ref ( Addressable thread) {
        var mh$ = g_thread_ref$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(thread);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_thread_unref$MH() {
        return RuntimeHelper.requireNonNull(constants$60.g_thread_unref$MH,"g_thread_unref");
    }
    public static void g_thread_unref ( Addressable thread) {
        var mh$ = g_thread_unref$MH();
        try {
            mh$.invokeExact(thread);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_thread_new$MH() {
        return RuntimeHelper.requireNonNull(constants$60.g_thread_new$MH,"g_thread_new");
    }
    public static MemoryAddress g_thread_new ( Addressable name,  Addressable func,  Addressable data) {
        var mh$ = g_thread_new$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(name, func, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_thread_try_new$MH() {
        return RuntimeHelper.requireNonNull(constants$60.g_thread_try_new$MH,"g_thread_try_new");
    }
    public static MemoryAddress g_thread_try_new ( Addressable name,  Addressable func,  Addressable data,  Addressable error) {
        var mh$ = g_thread_try_new$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(name, func, data, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_thread_self$MH() {
        return RuntimeHelper.requireNonNull(constants$60.g_thread_self$MH,"g_thread_self");
    }
    public static MemoryAddress g_thread_self () {
        var mh$ = g_thread_self$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_thread_exit$MH() {
        return RuntimeHelper.requireNonNull(constants$61.g_thread_exit$MH,"g_thread_exit");
    }
    public static void g_thread_exit ( Addressable retval) {
        var mh$ = g_thread_exit$MH();
        try {
            mh$.invokeExact(retval);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_thread_join$MH() {
        return RuntimeHelper.requireNonNull(constants$61.g_thread_join$MH,"g_thread_join");
    }
    public static MemoryAddress g_thread_join ( Addressable thread) {
        var mh$ = g_thread_join$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(thread);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_thread_yield$MH() {
        return RuntimeHelper.requireNonNull(constants$61.g_thread_yield$MH,"g_thread_yield");
    }
    public static void g_thread_yield () {
        var mh$ = g_thread_yield$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_mutex_init$MH() {
        return RuntimeHelper.requireNonNull(constants$61.g_mutex_init$MH,"g_mutex_init");
    }
    public static void g_mutex_init ( Addressable mutex) {
        var mh$ = g_mutex_init$MH();
        try {
            mh$.invokeExact(mutex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_mutex_clear$MH() {
        return RuntimeHelper.requireNonNull(constants$61.g_mutex_clear$MH,"g_mutex_clear");
    }
    public static void g_mutex_clear ( Addressable mutex) {
        var mh$ = g_mutex_clear$MH();
        try {
            mh$.invokeExact(mutex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_mutex_lock$MH() {
        return RuntimeHelper.requireNonNull(constants$61.g_mutex_lock$MH,"g_mutex_lock");
    }
    public static void g_mutex_lock ( Addressable mutex) {
        var mh$ = g_mutex_lock$MH();
        try {
            mh$.invokeExact(mutex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_mutex_trylock$MH() {
        return RuntimeHelper.requireNonNull(constants$62.g_mutex_trylock$MH,"g_mutex_trylock");
    }
    public static int g_mutex_trylock ( Addressable mutex) {
        var mh$ = g_mutex_trylock$MH();
        try {
            return (int)mh$.invokeExact(mutex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_mutex_unlock$MH() {
        return RuntimeHelper.requireNonNull(constants$62.g_mutex_unlock$MH,"g_mutex_unlock");
    }
    public static void g_mutex_unlock ( Addressable mutex) {
        var mh$ = g_mutex_unlock$MH();
        try {
            mh$.invokeExact(mutex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_rw_lock_init$MH() {
        return RuntimeHelper.requireNonNull(constants$62.g_rw_lock_init$MH,"g_rw_lock_init");
    }
    public static void g_rw_lock_init ( Addressable rw_lock) {
        var mh$ = g_rw_lock_init$MH();
        try {
            mh$.invokeExact(rw_lock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_rw_lock_clear$MH() {
        return RuntimeHelper.requireNonNull(constants$62.g_rw_lock_clear$MH,"g_rw_lock_clear");
    }
    public static void g_rw_lock_clear ( Addressable rw_lock) {
        var mh$ = g_rw_lock_clear$MH();
        try {
            mh$.invokeExact(rw_lock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_rw_lock_writer_lock$MH() {
        return RuntimeHelper.requireNonNull(constants$62.g_rw_lock_writer_lock$MH,"g_rw_lock_writer_lock");
    }
    public static void g_rw_lock_writer_lock ( Addressable rw_lock) {
        var mh$ = g_rw_lock_writer_lock$MH();
        try {
            mh$.invokeExact(rw_lock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_rw_lock_writer_trylock$MH() {
        return RuntimeHelper.requireNonNull(constants$62.g_rw_lock_writer_trylock$MH,"g_rw_lock_writer_trylock");
    }
    public static int g_rw_lock_writer_trylock ( Addressable rw_lock) {
        var mh$ = g_rw_lock_writer_trylock$MH();
        try {
            return (int)mh$.invokeExact(rw_lock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_rw_lock_writer_unlock$MH() {
        return RuntimeHelper.requireNonNull(constants$63.g_rw_lock_writer_unlock$MH,"g_rw_lock_writer_unlock");
    }
    public static void g_rw_lock_writer_unlock ( Addressable rw_lock) {
        var mh$ = g_rw_lock_writer_unlock$MH();
        try {
            mh$.invokeExact(rw_lock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_rw_lock_reader_lock$MH() {
        return RuntimeHelper.requireNonNull(constants$63.g_rw_lock_reader_lock$MH,"g_rw_lock_reader_lock");
    }
    public static void g_rw_lock_reader_lock ( Addressable rw_lock) {
        var mh$ = g_rw_lock_reader_lock$MH();
        try {
            mh$.invokeExact(rw_lock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_rw_lock_reader_trylock$MH() {
        return RuntimeHelper.requireNonNull(constants$63.g_rw_lock_reader_trylock$MH,"g_rw_lock_reader_trylock");
    }
    public static int g_rw_lock_reader_trylock ( Addressable rw_lock) {
        var mh$ = g_rw_lock_reader_trylock$MH();
        try {
            return (int)mh$.invokeExact(rw_lock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_rw_lock_reader_unlock$MH() {
        return RuntimeHelper.requireNonNull(constants$63.g_rw_lock_reader_unlock$MH,"g_rw_lock_reader_unlock");
    }
    public static void g_rw_lock_reader_unlock ( Addressable rw_lock) {
        var mh$ = g_rw_lock_reader_unlock$MH();
        try {
            mh$.invokeExact(rw_lock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_rec_mutex_init$MH() {
        return RuntimeHelper.requireNonNull(constants$63.g_rec_mutex_init$MH,"g_rec_mutex_init");
    }
    public static void g_rec_mutex_init ( Addressable rec_mutex) {
        var mh$ = g_rec_mutex_init$MH();
        try {
            mh$.invokeExact(rec_mutex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_rec_mutex_clear$MH() {
        return RuntimeHelper.requireNonNull(constants$63.g_rec_mutex_clear$MH,"g_rec_mutex_clear");
    }
    public static void g_rec_mutex_clear ( Addressable rec_mutex) {
        var mh$ = g_rec_mutex_clear$MH();
        try {
            mh$.invokeExact(rec_mutex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_rec_mutex_lock$MH() {
        return RuntimeHelper.requireNonNull(constants$64.g_rec_mutex_lock$MH,"g_rec_mutex_lock");
    }
    public static void g_rec_mutex_lock ( Addressable rec_mutex) {
        var mh$ = g_rec_mutex_lock$MH();
        try {
            mh$.invokeExact(rec_mutex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_rec_mutex_trylock$MH() {
        return RuntimeHelper.requireNonNull(constants$64.g_rec_mutex_trylock$MH,"g_rec_mutex_trylock");
    }
    public static int g_rec_mutex_trylock ( Addressable rec_mutex) {
        var mh$ = g_rec_mutex_trylock$MH();
        try {
            return (int)mh$.invokeExact(rec_mutex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_rec_mutex_unlock$MH() {
        return RuntimeHelper.requireNonNull(constants$64.g_rec_mutex_unlock$MH,"g_rec_mutex_unlock");
    }
    public static void g_rec_mutex_unlock ( Addressable rec_mutex) {
        var mh$ = g_rec_mutex_unlock$MH();
        try {
            mh$.invokeExact(rec_mutex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_cond_init$MH() {
        return RuntimeHelper.requireNonNull(constants$64.g_cond_init$MH,"g_cond_init");
    }
    public static void g_cond_init ( Addressable cond) {
        var mh$ = g_cond_init$MH();
        try {
            mh$.invokeExact(cond);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_cond_clear$MH() {
        return RuntimeHelper.requireNonNull(constants$64.g_cond_clear$MH,"g_cond_clear");
    }
    public static void g_cond_clear ( Addressable cond) {
        var mh$ = g_cond_clear$MH();
        try {
            mh$.invokeExact(cond);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_cond_wait$MH() {
        return RuntimeHelper.requireNonNull(constants$64.g_cond_wait$MH,"g_cond_wait");
    }
    public static void g_cond_wait ( Addressable cond,  Addressable mutex) {
        var mh$ = g_cond_wait$MH();
        try {
            mh$.invokeExact(cond, mutex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_cond_signal$MH() {
        return RuntimeHelper.requireNonNull(constants$65.g_cond_signal$MH,"g_cond_signal");
    }
    public static void g_cond_signal ( Addressable cond) {
        var mh$ = g_cond_signal$MH();
        try {
            mh$.invokeExact(cond);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_cond_broadcast$MH() {
        return RuntimeHelper.requireNonNull(constants$65.g_cond_broadcast$MH,"g_cond_broadcast");
    }
    public static void g_cond_broadcast ( Addressable cond) {
        var mh$ = g_cond_broadcast$MH();
        try {
            mh$.invokeExact(cond);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_cond_wait_until$MH() {
        return RuntimeHelper.requireNonNull(constants$65.g_cond_wait_until$MH,"g_cond_wait_until");
    }
    public static int g_cond_wait_until ( Addressable cond,  Addressable mutex,  long end_time) {
        var mh$ = g_cond_wait_until$MH();
        try {
            return (int)mh$.invokeExact(cond, mutex, end_time);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_private_get$MH() {
        return RuntimeHelper.requireNonNull(constants$65.g_private_get$MH,"g_private_get");
    }
    public static MemoryAddress g_private_get ( Addressable key) {
        var mh$ = g_private_get$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(key);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_private_set$MH() {
        return RuntimeHelper.requireNonNull(constants$65.g_private_set$MH,"g_private_set");
    }
    public static void g_private_set ( Addressable key,  Addressable value) {
        var mh$ = g_private_set$MH();
        try {
            mh$.invokeExact(key, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_private_replace$MH() {
        return RuntimeHelper.requireNonNull(constants$65.g_private_replace$MH,"g_private_replace");
    }
    public static void g_private_replace ( Addressable key,  Addressable value) {
        var mh$ = g_private_replace$MH();
        try {
            mh$.invokeExact(key, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_once_impl$MH() {
        return RuntimeHelper.requireNonNull(constants$66.g_once_impl$MH,"g_once_impl");
    }
    public static MemoryAddress g_once_impl ( Addressable once,  Addressable func,  Addressable arg) {
        var mh$ = g_once_impl$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(once, func, arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_once_init_enter$MH() {
        return RuntimeHelper.requireNonNull(constants$66.g_once_init_enter$MH,"g_once_init_enter");
    }
    public static int g_once_init_enter ( Addressable location) {
        var mh$ = g_once_init_enter$MH();
        try {
            return (int)mh$.invokeExact(location);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_once_init_leave$MH() {
        return RuntimeHelper.requireNonNull(constants$66.g_once_init_leave$MH,"g_once_init_leave");
    }
    public static void g_once_init_leave ( Addressable location,  long result) {
        var mh$ = g_once_init_leave$MH();
        try {
            mh$.invokeExact(location, result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_get_num_processors$MH() {
        return RuntimeHelper.requireNonNull(constants$66.g_get_num_processors$MH,"g_get_num_processors");
    }
    public static int g_get_num_processors () {
        var mh$ = g_get_num_processors$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_mutex_locker_new$MH() {
        return RuntimeHelper.requireNonNull(constants$66.g_mutex_locker_new$MH,"g_mutex_locker_new");
    }
    public static MemoryAddress g_mutex_locker_new ( Addressable mutex) {
        var mh$ = g_mutex_locker_new$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(mutex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_mutex_locker_free$MH() {
        return RuntimeHelper.requireNonNull(constants$66.g_mutex_locker_free$MH,"g_mutex_locker_free");
    }
    public static void g_mutex_locker_free ( Addressable locker) {
        var mh$ = g_mutex_locker_free$MH();
        try {
            mh$.invokeExact(locker);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_rec_mutex_locker_new$MH() {
        return RuntimeHelper.requireNonNull(constants$67.g_rec_mutex_locker_new$MH,"g_rec_mutex_locker_new");
    }
    public static MemoryAddress g_rec_mutex_locker_new ( Addressable rec_mutex) {
        var mh$ = g_rec_mutex_locker_new$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(rec_mutex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_rec_mutex_locker_free$MH() {
        return RuntimeHelper.requireNonNull(constants$67.g_rec_mutex_locker_free$MH,"g_rec_mutex_locker_free");
    }
    public static void g_rec_mutex_locker_free ( Addressable locker) {
        var mh$ = g_rec_mutex_locker_free$MH();
        try {
            mh$.invokeExact(locker);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_rw_lock_writer_locker_new$MH() {
        return RuntimeHelper.requireNonNull(constants$67.g_rw_lock_writer_locker_new$MH,"g_rw_lock_writer_locker_new");
    }
    public static MemoryAddress g_rw_lock_writer_locker_new ( Addressable rw_lock) {
        var mh$ = g_rw_lock_writer_locker_new$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(rw_lock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_rw_lock_writer_locker_free$MH() {
        return RuntimeHelper.requireNonNull(constants$67.g_rw_lock_writer_locker_free$MH,"g_rw_lock_writer_locker_free");
    }
    public static void g_rw_lock_writer_locker_free ( Addressable locker) {
        var mh$ = g_rw_lock_writer_locker_free$MH();
        try {
            mh$.invokeExact(locker);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_rw_lock_reader_locker_new$MH() {
        return RuntimeHelper.requireNonNull(constants$67.g_rw_lock_reader_locker_new$MH,"g_rw_lock_reader_locker_new");
    }
    public static MemoryAddress g_rw_lock_reader_locker_new ( Addressable rw_lock) {
        var mh$ = g_rw_lock_reader_locker_new$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(rw_lock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_rw_lock_reader_locker_free$MH() {
        return RuntimeHelper.requireNonNull(constants$67.g_rw_lock_reader_locker_free$MH,"g_rw_lock_reader_locker_free");
    }
    public static void g_rw_lock_reader_locker_free ( Addressable locker) {
        var mh$ = g_rw_lock_reader_locker_free$MH();
        try {
            mh$.invokeExact(locker);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_async_queue_new$MH() {
        return RuntimeHelper.requireNonNull(constants$68.g_async_queue_new$MH,"g_async_queue_new");
    }
    public static MemoryAddress g_async_queue_new () {
        var mh$ = g_async_queue_new$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_async_queue_new_full$MH() {
        return RuntimeHelper.requireNonNull(constants$68.g_async_queue_new_full$MH,"g_async_queue_new_full");
    }
    public static MemoryAddress g_async_queue_new_full ( Addressable item_free_func) {
        var mh$ = g_async_queue_new_full$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(item_free_func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_async_queue_lock$MH() {
        return RuntimeHelper.requireNonNull(constants$68.g_async_queue_lock$MH,"g_async_queue_lock");
    }
    public static void g_async_queue_lock ( Addressable queue) {
        var mh$ = g_async_queue_lock$MH();
        try {
            mh$.invokeExact(queue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_async_queue_unlock$MH() {
        return RuntimeHelper.requireNonNull(constants$68.g_async_queue_unlock$MH,"g_async_queue_unlock");
    }
    public static void g_async_queue_unlock ( Addressable queue) {
        var mh$ = g_async_queue_unlock$MH();
        try {
            mh$.invokeExact(queue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_async_queue_ref$MH() {
        return RuntimeHelper.requireNonNull(constants$68.g_async_queue_ref$MH,"g_async_queue_ref");
    }
    public static MemoryAddress g_async_queue_ref ( Addressable queue) {
        var mh$ = g_async_queue_ref$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(queue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_async_queue_unref$MH() {
        return RuntimeHelper.requireNonNull(constants$68.g_async_queue_unref$MH,"g_async_queue_unref");
    }
    public static void g_async_queue_unref ( Addressable queue) {
        var mh$ = g_async_queue_unref$MH();
        try {
            mh$.invokeExact(queue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_async_queue_ref_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$69.g_async_queue_ref_unlocked$MH,"g_async_queue_ref_unlocked");
    }
    public static void g_async_queue_ref_unlocked ( Addressable queue) {
        var mh$ = g_async_queue_ref_unlocked$MH();
        try {
            mh$.invokeExact(queue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_async_queue_unref_and_unlock$MH() {
        return RuntimeHelper.requireNonNull(constants$69.g_async_queue_unref_and_unlock$MH,"g_async_queue_unref_and_unlock");
    }
    public static void g_async_queue_unref_and_unlock ( Addressable queue) {
        var mh$ = g_async_queue_unref_and_unlock$MH();
        try {
            mh$.invokeExact(queue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_async_queue_push$MH() {
        return RuntimeHelper.requireNonNull(constants$69.g_async_queue_push$MH,"g_async_queue_push");
    }
    public static void g_async_queue_push ( Addressable queue,  Addressable data) {
        var mh$ = g_async_queue_push$MH();
        try {
            mh$.invokeExact(queue, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_async_queue_push_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$69.g_async_queue_push_unlocked$MH,"g_async_queue_push_unlocked");
    }
    public static void g_async_queue_push_unlocked ( Addressable queue,  Addressable data) {
        var mh$ = g_async_queue_push_unlocked$MH();
        try {
            mh$.invokeExact(queue, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_async_queue_push_sorted$MH() {
        return RuntimeHelper.requireNonNull(constants$69.g_async_queue_push_sorted$MH,"g_async_queue_push_sorted");
    }
    public static void g_async_queue_push_sorted ( Addressable queue,  Addressable data,  Addressable func,  Addressable user_data) {
        var mh$ = g_async_queue_push_sorted$MH();
        try {
            mh$.invokeExact(queue, data, func, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_async_queue_push_sorted_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$69.g_async_queue_push_sorted_unlocked$MH,"g_async_queue_push_sorted_unlocked");
    }
    public static void g_async_queue_push_sorted_unlocked ( Addressable queue,  Addressable data,  Addressable func,  Addressable user_data) {
        var mh$ = g_async_queue_push_sorted_unlocked$MH();
        try {
            mh$.invokeExact(queue, data, func, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_async_queue_pop$MH() {
        return RuntimeHelper.requireNonNull(constants$70.g_async_queue_pop$MH,"g_async_queue_pop");
    }
    public static MemoryAddress g_async_queue_pop ( Addressable queue) {
        var mh$ = g_async_queue_pop$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(queue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_async_queue_pop_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$70.g_async_queue_pop_unlocked$MH,"g_async_queue_pop_unlocked");
    }
    public static MemoryAddress g_async_queue_pop_unlocked ( Addressable queue) {
        var mh$ = g_async_queue_pop_unlocked$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(queue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_async_queue_try_pop$MH() {
        return RuntimeHelper.requireNonNull(constants$70.g_async_queue_try_pop$MH,"g_async_queue_try_pop");
    }
    public static MemoryAddress g_async_queue_try_pop ( Addressable queue) {
        var mh$ = g_async_queue_try_pop$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(queue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_async_queue_try_pop_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$70.g_async_queue_try_pop_unlocked$MH,"g_async_queue_try_pop_unlocked");
    }
    public static MemoryAddress g_async_queue_try_pop_unlocked ( Addressable queue) {
        var mh$ = g_async_queue_try_pop_unlocked$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(queue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_async_queue_timeout_pop$MH() {
        return RuntimeHelper.requireNonNull(constants$70.g_async_queue_timeout_pop$MH,"g_async_queue_timeout_pop");
    }
    public static MemoryAddress g_async_queue_timeout_pop ( Addressable queue,  long timeout) {
        var mh$ = g_async_queue_timeout_pop$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(queue, timeout);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_async_queue_timeout_pop_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$70.g_async_queue_timeout_pop_unlocked$MH,"g_async_queue_timeout_pop_unlocked");
    }
    public static MemoryAddress g_async_queue_timeout_pop_unlocked ( Addressable queue,  long timeout) {
        var mh$ = g_async_queue_timeout_pop_unlocked$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(queue, timeout);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_async_queue_length$MH() {
        return RuntimeHelper.requireNonNull(constants$71.g_async_queue_length$MH,"g_async_queue_length");
    }
    public static int g_async_queue_length ( Addressable queue) {
        var mh$ = g_async_queue_length$MH();
        try {
            return (int)mh$.invokeExact(queue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_async_queue_length_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$71.g_async_queue_length_unlocked$MH,"g_async_queue_length_unlocked");
    }
    public static int g_async_queue_length_unlocked ( Addressable queue) {
        var mh$ = g_async_queue_length_unlocked$MH();
        try {
            return (int)mh$.invokeExact(queue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_async_queue_sort$MH() {
        return RuntimeHelper.requireNonNull(constants$71.g_async_queue_sort$MH,"g_async_queue_sort");
    }
    public static void g_async_queue_sort ( Addressable queue,  Addressable func,  Addressable user_data) {
        var mh$ = g_async_queue_sort$MH();
        try {
            mh$.invokeExact(queue, func, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_async_queue_sort_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$71.g_async_queue_sort_unlocked$MH,"g_async_queue_sort_unlocked");
    }
    public static void g_async_queue_sort_unlocked ( Addressable queue,  Addressable func,  Addressable user_data) {
        var mh$ = g_async_queue_sort_unlocked$MH();
        try {
            mh$.invokeExact(queue, func, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_async_queue_remove$MH() {
        return RuntimeHelper.requireNonNull(constants$71.g_async_queue_remove$MH,"g_async_queue_remove");
    }
    public static int g_async_queue_remove ( Addressable queue,  Addressable item) {
        var mh$ = g_async_queue_remove$MH();
        try {
            return (int)mh$.invokeExact(queue, item);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_async_queue_remove_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$71.g_async_queue_remove_unlocked$MH,"g_async_queue_remove_unlocked");
    }
    public static int g_async_queue_remove_unlocked ( Addressable queue,  Addressable item) {
        var mh$ = g_async_queue_remove_unlocked$MH();
        try {
            return (int)mh$.invokeExact(queue, item);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_async_queue_push_front$MH() {
        return RuntimeHelper.requireNonNull(constants$72.g_async_queue_push_front$MH,"g_async_queue_push_front");
    }
    public static void g_async_queue_push_front ( Addressable queue,  Addressable item) {
        var mh$ = g_async_queue_push_front$MH();
        try {
            mh$.invokeExact(queue, item);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_async_queue_push_front_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$72.g_async_queue_push_front_unlocked$MH,"g_async_queue_push_front_unlocked");
    }
    public static void g_async_queue_push_front_unlocked ( Addressable queue,  Addressable item) {
        var mh$ = g_async_queue_push_front_unlocked$MH();
        try {
            mh$.invokeExact(queue, item);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_async_queue_timed_pop$MH() {
        return RuntimeHelper.requireNonNull(constants$72.g_async_queue_timed_pop$MH,"g_async_queue_timed_pop");
    }
    public static MemoryAddress g_async_queue_timed_pop ( Addressable queue,  Addressable end_time) {
        var mh$ = g_async_queue_timed_pop$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(queue, end_time);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_async_queue_timed_pop_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$72.g_async_queue_timed_pop_unlocked$MH,"g_async_queue_timed_pop_unlocked");
    }
    public static MemoryAddress g_async_queue_timed_pop_unlocked ( Addressable queue,  Addressable end_time) {
        var mh$ = g_async_queue_timed_pop_unlocked$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(queue, end_time);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfInt sig_atomic_t = Constants$root.C_INT$LAYOUT;
    public static int SI_ASYNCNL() {
        return (int)-60L;
    }
    public static int SI_DETHREAD() {
        return (int)-7L;
    }
    public static int SI_TKILL() {
        return (int)-6L;
    }
    public static int SI_SIGIO() {
        return (int)-5L;
    }
    public static int SI_ASYNCIO() {
        return (int)-4L;
    }
    public static int SI_MESGQ() {
        return (int)-3L;
    }
    public static int SI_TIMER() {
        return (int)-2L;
    }
    public static int SI_QUEUE() {
        return (int)-1L;
    }
    public static int SI_USER() {
        return (int)0L;
    }
    public static int SI_KERNEL() {
        return (int)128L;
    }
    public static int ILL_ILLOPC() {
        return (int)1L;
    }
    public static int ILL_ILLOPN() {
        return (int)2L;
    }
    public static int ILL_ILLADR() {
        return (int)3L;
    }
    public static int ILL_ILLTRP() {
        return (int)4L;
    }
    public static int ILL_PRVOPC() {
        return (int)5L;
    }
    public static int ILL_PRVREG() {
        return (int)6L;
    }
    public static int ILL_COPROC() {
        return (int)7L;
    }
    public static int ILL_BADSTK() {
        return (int)8L;
    }
    public static int ILL_BADIADDR() {
        return (int)9L;
    }
    public static int FPE_INTDIV() {
        return (int)1L;
    }
    public static int FPE_INTOVF() {
        return (int)2L;
    }
    public static int FPE_FLTDIV() {
        return (int)3L;
    }
    public static int FPE_FLTOVF() {
        return (int)4L;
    }
    public static int FPE_FLTUND() {
        return (int)5L;
    }
    public static int FPE_FLTRES() {
        return (int)6L;
    }
    public static int FPE_FLTINV() {
        return (int)7L;
    }
}


