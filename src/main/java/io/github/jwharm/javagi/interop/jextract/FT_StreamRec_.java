// Generated by jextract

package io.github.jwharm.javagi.interop.jextract;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class FT_StreamRec_ {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("base"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("size"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("pos"),
        MemoryLayout.unionLayout(
            Constants$root.C_LONG_LONG$LAYOUT.withName("value"),
            Constants$root.C_POINTER$LAYOUT.withName("pointer")
        ).withName("descriptor"),
        MemoryLayout.unionLayout(
            Constants$root.C_LONG_LONG$LAYOUT.withName("value"),
            Constants$root.C_POINTER$LAYOUT.withName("pointer")
        ).withName("pathname"),
        Constants$root.C_POINTER$LAYOUT.withName("read"),
        Constants$root.C_POINTER$LAYOUT.withName("close"),
        Constants$root.C_POINTER$LAYOUT.withName("memory"),
        Constants$root.C_POINTER$LAYOUT.withName("cursor"),
        Constants$root.C_POINTER$LAYOUT.withName("limit")
    ).withName("FT_StreamRec_");
    public static MemoryLayout $LAYOUT() {
        return FT_StreamRec_.$struct$LAYOUT;
    }
    static final VarHandle base$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("base"));
    public static VarHandle base$VH() {
        return FT_StreamRec_.base$VH;
    }
    public static MemoryAddress base$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)FT_StreamRec_.base$VH.get(seg);
    }
    public static void base$set( MemorySegment seg, MemoryAddress x) {
        FT_StreamRec_.base$VH.set(seg, x);
    }
    public static MemoryAddress base$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)FT_StreamRec_.base$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void base$set(MemorySegment seg, long index, MemoryAddress x) {
        FT_StreamRec_.base$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle size$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("size"));
    public static VarHandle size$VH() {
        return FT_StreamRec_.size$VH;
    }
    public static long size$get(MemorySegment seg) {
        return (long)FT_StreamRec_.size$VH.get(seg);
    }
    public static void size$set( MemorySegment seg, long x) {
        FT_StreamRec_.size$VH.set(seg, x);
    }
    public static long size$get(MemorySegment seg, long index) {
        return (long)FT_StreamRec_.size$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void size$set(MemorySegment seg, long index, long x) {
        FT_StreamRec_.size$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pos$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pos"));
    public static VarHandle pos$VH() {
        return FT_StreamRec_.pos$VH;
    }
    public static long pos$get(MemorySegment seg) {
        return (long)FT_StreamRec_.pos$VH.get(seg);
    }
    public static void pos$set( MemorySegment seg, long x) {
        FT_StreamRec_.pos$VH.set(seg, x);
    }
    public static long pos$get(MemorySegment seg, long index) {
        return (long)FT_StreamRec_.pos$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pos$set(MemorySegment seg, long index, long x) {
        FT_StreamRec_.pos$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment descriptor$slice(MemorySegment seg) {
        return seg.asSlice(24, 8);
    }
    public static MemorySegment pathname$slice(MemorySegment seg) {
        return seg.asSlice(32, 8);
    }
    static final VarHandle read$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("read"));
    public static VarHandle read$VH() {
        return FT_StreamRec_.read$VH;
    }
    public static MemoryAddress read$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)FT_StreamRec_.read$VH.get(seg);
    }
    public static void read$set( MemorySegment seg, MemoryAddress x) {
        FT_StreamRec_.read$VH.set(seg, x);
    }
    public static MemoryAddress read$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)FT_StreamRec_.read$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void read$set(MemorySegment seg, long index, MemoryAddress x) {
        FT_StreamRec_.read$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static FT_Stream_IoFunc read (MemorySegment segment, MemorySession session) {
        return FT_Stream_IoFunc.ofAddress(read$get(segment), session);
    }
    static final VarHandle close$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("close"));
    public static VarHandle close$VH() {
        return FT_StreamRec_.close$VH;
    }
    public static MemoryAddress close$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)FT_StreamRec_.close$VH.get(seg);
    }
    public static void close$set( MemorySegment seg, MemoryAddress x) {
        FT_StreamRec_.close$VH.set(seg, x);
    }
    public static MemoryAddress close$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)FT_StreamRec_.close$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void close$set(MemorySegment seg, long index, MemoryAddress x) {
        FT_StreamRec_.close$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static FT_Stream_CloseFunc close (MemorySegment segment, MemorySession session) {
        return FT_Stream_CloseFunc.ofAddress(close$get(segment), session);
    }
    static final VarHandle memory$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("memory"));
    public static VarHandle memory$VH() {
        return FT_StreamRec_.memory$VH;
    }
    public static MemoryAddress memory$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)FT_StreamRec_.memory$VH.get(seg);
    }
    public static void memory$set( MemorySegment seg, MemoryAddress x) {
        FT_StreamRec_.memory$VH.set(seg, x);
    }
    public static MemoryAddress memory$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)FT_StreamRec_.memory$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void memory$set(MemorySegment seg, long index, MemoryAddress x) {
        FT_StreamRec_.memory$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle cursor$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("cursor"));
    public static VarHandle cursor$VH() {
        return FT_StreamRec_.cursor$VH;
    }
    public static MemoryAddress cursor$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)FT_StreamRec_.cursor$VH.get(seg);
    }
    public static void cursor$set( MemorySegment seg, MemoryAddress x) {
        FT_StreamRec_.cursor$VH.set(seg, x);
    }
    public static MemoryAddress cursor$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)FT_StreamRec_.cursor$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cursor$set(MemorySegment seg, long index, MemoryAddress x) {
        FT_StreamRec_.cursor$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle limit$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("limit"));
    public static VarHandle limit$VH() {
        return FT_StreamRec_.limit$VH;
    }
    public static MemoryAddress limit$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)FT_StreamRec_.limit$VH.get(seg);
    }
    public static void limit$set( MemorySegment seg, MemoryAddress x) {
        FT_StreamRec_.limit$VH.set(seg, x);
    }
    public static MemoryAddress limit$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)FT_StreamRec_.limit$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void limit$set(MemorySegment seg, long index, MemoryAddress x) {
        FT_StreamRec_.limit$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


