// Generated by jextract

package io.github.jwharm.javagi.interop.jextract;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class FT_FaceRec_ {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG_LONG$LAYOUT.withName("num_faces"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("face_index"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("face_flags"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("style_flags"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("num_glyphs"),
        Constants$root.C_POINTER$LAYOUT.withName("family_name"),
        Constants$root.C_POINTER$LAYOUT.withName("style_name"),
        Constants$root.C_INT$LAYOUT.withName("num_fixed_sizes"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("available_sizes"),
        Constants$root.C_INT$LAYOUT.withName("num_charmaps"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("charmaps"),
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("data"),
            Constants$root.C_POINTER$LAYOUT.withName("finalizer")
        ).withName("generic"),
        MemoryLayout.structLayout(
            Constants$root.C_LONG_LONG$LAYOUT.withName("xMin"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("yMin"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("xMax"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("yMax")
        ).withName("bbox"),
        Constants$root.C_SHORT$LAYOUT.withName("units_per_EM"),
        Constants$root.C_SHORT$LAYOUT.withName("ascender"),
        Constants$root.C_SHORT$LAYOUT.withName("descender"),
        Constants$root.C_SHORT$LAYOUT.withName("height"),
        Constants$root.C_SHORT$LAYOUT.withName("max_advance_width"),
        Constants$root.C_SHORT$LAYOUT.withName("max_advance_height"),
        Constants$root.C_SHORT$LAYOUT.withName("underline_position"),
        Constants$root.C_SHORT$LAYOUT.withName("underline_thickness"),
        Constants$root.C_POINTER$LAYOUT.withName("glyph"),
        Constants$root.C_POINTER$LAYOUT.withName("size"),
        Constants$root.C_POINTER$LAYOUT.withName("charmap"),
        Constants$root.C_POINTER$LAYOUT.withName("driver"),
        Constants$root.C_POINTER$LAYOUT.withName("memory"),
        Constants$root.C_POINTER$LAYOUT.withName("stream"),
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("head"),
            Constants$root.C_POINTER$LAYOUT.withName("tail")
        ).withName("sizes_list"),
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("data"),
            Constants$root.C_POINTER$LAYOUT.withName("finalizer")
        ).withName("autohint"),
        Constants$root.C_POINTER$LAYOUT.withName("extensions"),
        Constants$root.C_POINTER$LAYOUT.withName("internal")
    ).withName("FT_FaceRec_");
    public static MemoryLayout $LAYOUT() {
        return FT_FaceRec_.$struct$LAYOUT;
    }
    static final VarHandle num_faces$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("num_faces"));
    public static VarHandle num_faces$VH() {
        return FT_FaceRec_.num_faces$VH;
    }
    public static long num_faces$get(MemorySegment seg) {
        return (long)FT_FaceRec_.num_faces$VH.get(seg);
    }
    public static void num_faces$set( MemorySegment seg, long x) {
        FT_FaceRec_.num_faces$VH.set(seg, x);
    }
    public static long num_faces$get(MemorySegment seg, long index) {
        return (long)FT_FaceRec_.num_faces$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void num_faces$set(MemorySegment seg, long index, long x) {
        FT_FaceRec_.num_faces$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle face_index$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("face_index"));
    public static VarHandle face_index$VH() {
        return FT_FaceRec_.face_index$VH;
    }
    public static long face_index$get(MemorySegment seg) {
        return (long)FT_FaceRec_.face_index$VH.get(seg);
    }
    public static void face_index$set( MemorySegment seg, long x) {
        FT_FaceRec_.face_index$VH.set(seg, x);
    }
    public static long face_index$get(MemorySegment seg, long index) {
        return (long)FT_FaceRec_.face_index$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void face_index$set(MemorySegment seg, long index, long x) {
        FT_FaceRec_.face_index$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle face_flags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("face_flags"));
    public static VarHandle face_flags$VH() {
        return FT_FaceRec_.face_flags$VH;
    }
    public static long face_flags$get(MemorySegment seg) {
        return (long)FT_FaceRec_.face_flags$VH.get(seg);
    }
    public static void face_flags$set( MemorySegment seg, long x) {
        FT_FaceRec_.face_flags$VH.set(seg, x);
    }
    public static long face_flags$get(MemorySegment seg, long index) {
        return (long)FT_FaceRec_.face_flags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void face_flags$set(MemorySegment seg, long index, long x) {
        FT_FaceRec_.face_flags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle style_flags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("style_flags"));
    public static VarHandle style_flags$VH() {
        return FT_FaceRec_.style_flags$VH;
    }
    public static long style_flags$get(MemorySegment seg) {
        return (long)FT_FaceRec_.style_flags$VH.get(seg);
    }
    public static void style_flags$set( MemorySegment seg, long x) {
        FT_FaceRec_.style_flags$VH.set(seg, x);
    }
    public static long style_flags$get(MemorySegment seg, long index) {
        return (long)FT_FaceRec_.style_flags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void style_flags$set(MemorySegment seg, long index, long x) {
        FT_FaceRec_.style_flags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle num_glyphs$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("num_glyphs"));
    public static VarHandle num_glyphs$VH() {
        return FT_FaceRec_.num_glyphs$VH;
    }
    public static long num_glyphs$get(MemorySegment seg) {
        return (long)FT_FaceRec_.num_glyphs$VH.get(seg);
    }
    public static void num_glyphs$set( MemorySegment seg, long x) {
        FT_FaceRec_.num_glyphs$VH.set(seg, x);
    }
    public static long num_glyphs$get(MemorySegment seg, long index) {
        return (long)FT_FaceRec_.num_glyphs$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void num_glyphs$set(MemorySegment seg, long index, long x) {
        FT_FaceRec_.num_glyphs$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle family_name$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("family_name"));
    public static VarHandle family_name$VH() {
        return FT_FaceRec_.family_name$VH;
    }
    public static MemoryAddress family_name$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)FT_FaceRec_.family_name$VH.get(seg);
    }
    public static void family_name$set( MemorySegment seg, MemoryAddress x) {
        FT_FaceRec_.family_name$VH.set(seg, x);
    }
    public static MemoryAddress family_name$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)FT_FaceRec_.family_name$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void family_name$set(MemorySegment seg, long index, MemoryAddress x) {
        FT_FaceRec_.family_name$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle style_name$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("style_name"));
    public static VarHandle style_name$VH() {
        return FT_FaceRec_.style_name$VH;
    }
    public static MemoryAddress style_name$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)FT_FaceRec_.style_name$VH.get(seg);
    }
    public static void style_name$set( MemorySegment seg, MemoryAddress x) {
        FT_FaceRec_.style_name$VH.set(seg, x);
    }
    public static MemoryAddress style_name$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)FT_FaceRec_.style_name$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void style_name$set(MemorySegment seg, long index, MemoryAddress x) {
        FT_FaceRec_.style_name$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle num_fixed_sizes$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("num_fixed_sizes"));
    public static VarHandle num_fixed_sizes$VH() {
        return FT_FaceRec_.num_fixed_sizes$VH;
    }
    public static int num_fixed_sizes$get(MemorySegment seg) {
        return (int)FT_FaceRec_.num_fixed_sizes$VH.get(seg);
    }
    public static void num_fixed_sizes$set( MemorySegment seg, int x) {
        FT_FaceRec_.num_fixed_sizes$VH.set(seg, x);
    }
    public static int num_fixed_sizes$get(MemorySegment seg, long index) {
        return (int)FT_FaceRec_.num_fixed_sizes$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void num_fixed_sizes$set(MemorySegment seg, long index, int x) {
        FT_FaceRec_.num_fixed_sizes$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle available_sizes$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("available_sizes"));
    public static VarHandle available_sizes$VH() {
        return FT_FaceRec_.available_sizes$VH;
    }
    public static MemoryAddress available_sizes$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)FT_FaceRec_.available_sizes$VH.get(seg);
    }
    public static void available_sizes$set( MemorySegment seg, MemoryAddress x) {
        FT_FaceRec_.available_sizes$VH.set(seg, x);
    }
    public static MemoryAddress available_sizes$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)FT_FaceRec_.available_sizes$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void available_sizes$set(MemorySegment seg, long index, MemoryAddress x) {
        FT_FaceRec_.available_sizes$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle num_charmaps$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("num_charmaps"));
    public static VarHandle num_charmaps$VH() {
        return FT_FaceRec_.num_charmaps$VH;
    }
    public static int num_charmaps$get(MemorySegment seg) {
        return (int)FT_FaceRec_.num_charmaps$VH.get(seg);
    }
    public static void num_charmaps$set( MemorySegment seg, int x) {
        FT_FaceRec_.num_charmaps$VH.set(seg, x);
    }
    public static int num_charmaps$get(MemorySegment seg, long index) {
        return (int)FT_FaceRec_.num_charmaps$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void num_charmaps$set(MemorySegment seg, long index, int x) {
        FT_FaceRec_.num_charmaps$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle charmaps$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("charmaps"));
    public static VarHandle charmaps$VH() {
        return FT_FaceRec_.charmaps$VH;
    }
    public static MemoryAddress charmaps$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)FT_FaceRec_.charmaps$VH.get(seg);
    }
    public static void charmaps$set( MemorySegment seg, MemoryAddress x) {
        FT_FaceRec_.charmaps$VH.set(seg, x);
    }
    public static MemoryAddress charmaps$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)FT_FaceRec_.charmaps$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void charmaps$set(MemorySegment seg, long index, MemoryAddress x) {
        FT_FaceRec_.charmaps$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment generic$slice(MemorySegment seg) {
        return seg.asSlice(88, 16);
    }
    public static MemorySegment bbox$slice(MemorySegment seg) {
        return seg.asSlice(104, 32);
    }
    static final VarHandle units_per_EM$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("units_per_EM"));
    public static VarHandle units_per_EM$VH() {
        return FT_FaceRec_.units_per_EM$VH;
    }
    public static short units_per_EM$get(MemorySegment seg) {
        return (short)FT_FaceRec_.units_per_EM$VH.get(seg);
    }
    public static void units_per_EM$set( MemorySegment seg, short x) {
        FT_FaceRec_.units_per_EM$VH.set(seg, x);
    }
    public static short units_per_EM$get(MemorySegment seg, long index) {
        return (short)FT_FaceRec_.units_per_EM$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void units_per_EM$set(MemorySegment seg, long index, short x) {
        FT_FaceRec_.units_per_EM$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ascender$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ascender"));
    public static VarHandle ascender$VH() {
        return FT_FaceRec_.ascender$VH;
    }
    public static short ascender$get(MemorySegment seg) {
        return (short)FT_FaceRec_.ascender$VH.get(seg);
    }
    public static void ascender$set( MemorySegment seg, short x) {
        FT_FaceRec_.ascender$VH.set(seg, x);
    }
    public static short ascender$get(MemorySegment seg, long index) {
        return (short)FT_FaceRec_.ascender$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ascender$set(MemorySegment seg, long index, short x) {
        FT_FaceRec_.ascender$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle descender$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("descender"));
    public static VarHandle descender$VH() {
        return FT_FaceRec_.descender$VH;
    }
    public static short descender$get(MemorySegment seg) {
        return (short)FT_FaceRec_.descender$VH.get(seg);
    }
    public static void descender$set( MemorySegment seg, short x) {
        FT_FaceRec_.descender$VH.set(seg, x);
    }
    public static short descender$get(MemorySegment seg, long index) {
        return (short)FT_FaceRec_.descender$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void descender$set(MemorySegment seg, long index, short x) {
        FT_FaceRec_.descender$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle height$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("height"));
    public static VarHandle height$VH() {
        return FT_FaceRec_.height$VH;
    }
    public static short height$get(MemorySegment seg) {
        return (short)FT_FaceRec_.height$VH.get(seg);
    }
    public static void height$set( MemorySegment seg, short x) {
        FT_FaceRec_.height$VH.set(seg, x);
    }
    public static short height$get(MemorySegment seg, long index) {
        return (short)FT_FaceRec_.height$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void height$set(MemorySegment seg, long index, short x) {
        FT_FaceRec_.height$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle max_advance_width$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("max_advance_width"));
    public static VarHandle max_advance_width$VH() {
        return FT_FaceRec_.max_advance_width$VH;
    }
    public static short max_advance_width$get(MemorySegment seg) {
        return (short)FT_FaceRec_.max_advance_width$VH.get(seg);
    }
    public static void max_advance_width$set( MemorySegment seg, short x) {
        FT_FaceRec_.max_advance_width$VH.set(seg, x);
    }
    public static short max_advance_width$get(MemorySegment seg, long index) {
        return (short)FT_FaceRec_.max_advance_width$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void max_advance_width$set(MemorySegment seg, long index, short x) {
        FT_FaceRec_.max_advance_width$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle max_advance_height$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("max_advance_height"));
    public static VarHandle max_advance_height$VH() {
        return FT_FaceRec_.max_advance_height$VH;
    }
    public static short max_advance_height$get(MemorySegment seg) {
        return (short)FT_FaceRec_.max_advance_height$VH.get(seg);
    }
    public static void max_advance_height$set( MemorySegment seg, short x) {
        FT_FaceRec_.max_advance_height$VH.set(seg, x);
    }
    public static short max_advance_height$get(MemorySegment seg, long index) {
        return (short)FT_FaceRec_.max_advance_height$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void max_advance_height$set(MemorySegment seg, long index, short x) {
        FT_FaceRec_.max_advance_height$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle underline_position$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("underline_position"));
    public static VarHandle underline_position$VH() {
        return FT_FaceRec_.underline_position$VH;
    }
    public static short underline_position$get(MemorySegment seg) {
        return (short)FT_FaceRec_.underline_position$VH.get(seg);
    }
    public static void underline_position$set( MemorySegment seg, short x) {
        FT_FaceRec_.underline_position$VH.set(seg, x);
    }
    public static short underline_position$get(MemorySegment seg, long index) {
        return (short)FT_FaceRec_.underline_position$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void underline_position$set(MemorySegment seg, long index, short x) {
        FT_FaceRec_.underline_position$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle underline_thickness$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("underline_thickness"));
    public static VarHandle underline_thickness$VH() {
        return FT_FaceRec_.underline_thickness$VH;
    }
    public static short underline_thickness$get(MemorySegment seg) {
        return (short)FT_FaceRec_.underline_thickness$VH.get(seg);
    }
    public static void underline_thickness$set( MemorySegment seg, short x) {
        FT_FaceRec_.underline_thickness$VH.set(seg, x);
    }
    public static short underline_thickness$get(MemorySegment seg, long index) {
        return (short)FT_FaceRec_.underline_thickness$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void underline_thickness$set(MemorySegment seg, long index, short x) {
        FT_FaceRec_.underline_thickness$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle glyph$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("glyph"));
    public static VarHandle glyph$VH() {
        return FT_FaceRec_.glyph$VH;
    }
    public static MemoryAddress glyph$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)FT_FaceRec_.glyph$VH.get(seg);
    }
    public static void glyph$set( MemorySegment seg, MemoryAddress x) {
        FT_FaceRec_.glyph$VH.set(seg, x);
    }
    public static MemoryAddress glyph$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)FT_FaceRec_.glyph$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void glyph$set(MemorySegment seg, long index, MemoryAddress x) {
        FT_FaceRec_.glyph$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle size$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("size"));
    public static VarHandle size$VH() {
        return FT_FaceRec_.size$VH;
    }
    public static MemoryAddress size$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)FT_FaceRec_.size$VH.get(seg);
    }
    public static void size$set( MemorySegment seg, MemoryAddress x) {
        FT_FaceRec_.size$VH.set(seg, x);
    }
    public static MemoryAddress size$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)FT_FaceRec_.size$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void size$set(MemorySegment seg, long index, MemoryAddress x) {
        FT_FaceRec_.size$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle charmap$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("charmap"));
    public static VarHandle charmap$VH() {
        return FT_FaceRec_.charmap$VH;
    }
    public static MemoryAddress charmap$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)FT_FaceRec_.charmap$VH.get(seg);
    }
    public static void charmap$set( MemorySegment seg, MemoryAddress x) {
        FT_FaceRec_.charmap$VH.set(seg, x);
    }
    public static MemoryAddress charmap$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)FT_FaceRec_.charmap$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void charmap$set(MemorySegment seg, long index, MemoryAddress x) {
        FT_FaceRec_.charmap$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle driver$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("driver"));
    public static VarHandle driver$VH() {
        return FT_FaceRec_.driver$VH;
    }
    public static MemoryAddress driver$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)FT_FaceRec_.driver$VH.get(seg);
    }
    public static void driver$set( MemorySegment seg, MemoryAddress x) {
        FT_FaceRec_.driver$VH.set(seg, x);
    }
    public static MemoryAddress driver$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)FT_FaceRec_.driver$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void driver$set(MemorySegment seg, long index, MemoryAddress x) {
        FT_FaceRec_.driver$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle memory$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("memory"));
    public static VarHandle memory$VH() {
        return FT_FaceRec_.memory$VH;
    }
    public static MemoryAddress memory$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)FT_FaceRec_.memory$VH.get(seg);
    }
    public static void memory$set( MemorySegment seg, MemoryAddress x) {
        FT_FaceRec_.memory$VH.set(seg, x);
    }
    public static MemoryAddress memory$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)FT_FaceRec_.memory$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void memory$set(MemorySegment seg, long index, MemoryAddress x) {
        FT_FaceRec_.memory$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle stream$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("stream"));
    public static VarHandle stream$VH() {
        return FT_FaceRec_.stream$VH;
    }
    public static MemoryAddress stream$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)FT_FaceRec_.stream$VH.get(seg);
    }
    public static void stream$set( MemorySegment seg, MemoryAddress x) {
        FT_FaceRec_.stream$VH.set(seg, x);
    }
    public static MemoryAddress stream$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)FT_FaceRec_.stream$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void stream$set(MemorySegment seg, long index, MemoryAddress x) {
        FT_FaceRec_.stream$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment sizes_list$slice(MemorySegment seg) {
        return seg.asSlice(200, 16);
    }
    public static MemorySegment autohint$slice(MemorySegment seg) {
        return seg.asSlice(216, 16);
    }
    static final VarHandle extensions$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("extensions"));
    public static VarHandle extensions$VH() {
        return FT_FaceRec_.extensions$VH;
    }
    public static MemoryAddress extensions$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)FT_FaceRec_.extensions$VH.get(seg);
    }
    public static void extensions$set( MemorySegment seg, MemoryAddress x) {
        FT_FaceRec_.extensions$VH.set(seg, x);
    }
    public static MemoryAddress extensions$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)FT_FaceRec_.extensions$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void extensions$set(MemorySegment seg, long index, MemoryAddress x) {
        FT_FaceRec_.extensions$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle internal$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("internal"));
    public static VarHandle internal$VH() {
        return FT_FaceRec_.internal$VH;
    }
    public static MemoryAddress internal$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)FT_FaceRec_.internal$VH.get(seg);
    }
    public static void internal$set( MemorySegment seg, MemoryAddress x) {
        FT_FaceRec_.internal$VH.set(seg, x);
    }
    public static MemoryAddress internal$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)FT_FaceRec_.internal$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void internal$set(MemorySegment seg, long index, MemoryAddress x) {
        FT_FaceRec_.internal$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


