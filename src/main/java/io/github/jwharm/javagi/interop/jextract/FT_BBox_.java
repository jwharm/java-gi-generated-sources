// Generated by jextract

package io.github.jwharm.javagi.interop.jextract;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class FT_BBox_ {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG_LONG$LAYOUT.withName("xMin"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("yMin"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("xMax"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("yMax")
    ).withName("FT_BBox_");
    public static MemoryLayout $LAYOUT() {
        return FT_BBox_.$struct$LAYOUT;
    }
    static final VarHandle xMin$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("xMin"));
    public static VarHandle xMin$VH() {
        return FT_BBox_.xMin$VH;
    }
    public static long xMin$get(MemorySegment seg) {
        return (long)FT_BBox_.xMin$VH.get(seg);
    }
    public static void xMin$set( MemorySegment seg, long x) {
        FT_BBox_.xMin$VH.set(seg, x);
    }
    public static long xMin$get(MemorySegment seg, long index) {
        return (long)FT_BBox_.xMin$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void xMin$set(MemorySegment seg, long index, long x) {
        FT_BBox_.xMin$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle yMin$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("yMin"));
    public static VarHandle yMin$VH() {
        return FT_BBox_.yMin$VH;
    }
    public static long yMin$get(MemorySegment seg) {
        return (long)FT_BBox_.yMin$VH.get(seg);
    }
    public static void yMin$set( MemorySegment seg, long x) {
        FT_BBox_.yMin$VH.set(seg, x);
    }
    public static long yMin$get(MemorySegment seg, long index) {
        return (long)FT_BBox_.yMin$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void yMin$set(MemorySegment seg, long index, long x) {
        FT_BBox_.yMin$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle xMax$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("xMax"));
    public static VarHandle xMax$VH() {
        return FT_BBox_.xMax$VH;
    }
    public static long xMax$get(MemorySegment seg) {
        return (long)FT_BBox_.xMax$VH.get(seg);
    }
    public static void xMax$set( MemorySegment seg, long x) {
        FT_BBox_.xMax$VH.set(seg, x);
    }
    public static long xMax$get(MemorySegment seg, long index) {
        return (long)FT_BBox_.xMax$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void xMax$set(MemorySegment seg, long index, long x) {
        FT_BBox_.xMax$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle yMax$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("yMax"));
    public static VarHandle yMax$VH() {
        return FT_BBox_.yMax$VH;
    }
    public static long yMax$get(MemorySegment seg) {
        return (long)FT_BBox_.yMax$VH.get(seg);
    }
    public static void yMax$set( MemorySegment seg, long x) {
        FT_BBox_.yMax$VH.set(seg, x);
    }
    public static long yMax$get(MemorySegment seg, long index) {
        return (long)FT_BBox_.yMax$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void yMax$set(MemorySegment seg, long index, long x) {
        FT_BBox_.yMax$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


