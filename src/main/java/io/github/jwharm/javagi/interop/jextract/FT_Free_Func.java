// Generated by jextract

package io.github.jwharm.javagi.interop.jextract;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public interface FT_Free_Func {

    void apply(java.lang.foreign.MemoryAddress memory, java.lang.foreign.MemoryAddress block);
    static MemorySegment allocate(FT_Free_Func fi, MemorySession session) {
        return RuntimeHelper.upcallStub(FT_Free_Func.class, fi, constants$2658.FT_Free_Func$FUNC, session);
    }
    static FT_Free_Func ofAddress(MemoryAddress addr, MemorySession session) {
        MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
        return (java.lang.foreign.MemoryAddress _memory, java.lang.foreign.MemoryAddress _block) -> {
            try {
                constants$2658.FT_Free_Func$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)_memory, (java.lang.foreign.Addressable)_block);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


