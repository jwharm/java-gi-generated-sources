// Generated by jextract

package io.github.jwharm.javagi.interop.jextract;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class FT_Raster_Funcs_ {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_INT$LAYOUT.withName("glyph_format"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("raster_new"),
        Constants$root.C_POINTER$LAYOUT.withName("raster_reset"),
        Constants$root.C_POINTER$LAYOUT.withName("raster_set_mode"),
        Constants$root.C_POINTER$LAYOUT.withName("raster_render"),
        Constants$root.C_POINTER$LAYOUT.withName("raster_done")
    ).withName("FT_Raster_Funcs_");
    public static MemoryLayout $LAYOUT() {
        return FT_Raster_Funcs_.$struct$LAYOUT;
    }
    static final VarHandle glyph_format$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("glyph_format"));
    public static VarHandle glyph_format$VH() {
        return FT_Raster_Funcs_.glyph_format$VH;
    }
    public static int glyph_format$get(MemorySegment seg) {
        return (int)FT_Raster_Funcs_.glyph_format$VH.get(seg);
    }
    public static void glyph_format$set( MemorySegment seg, int x) {
        FT_Raster_Funcs_.glyph_format$VH.set(seg, x);
    }
    public static int glyph_format$get(MemorySegment seg, long index) {
        return (int)FT_Raster_Funcs_.glyph_format$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void glyph_format$set(MemorySegment seg, long index, int x) {
        FT_Raster_Funcs_.glyph_format$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle raster_new$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("raster_new"));
    public static VarHandle raster_new$VH() {
        return FT_Raster_Funcs_.raster_new$VH;
    }
    public static MemoryAddress raster_new$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)FT_Raster_Funcs_.raster_new$VH.get(seg);
    }
    public static void raster_new$set( MemorySegment seg, MemoryAddress x) {
        FT_Raster_Funcs_.raster_new$VH.set(seg, x);
    }
    public static MemoryAddress raster_new$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)FT_Raster_Funcs_.raster_new$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void raster_new$set(MemorySegment seg, long index, MemoryAddress x) {
        FT_Raster_Funcs_.raster_new$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static FT_Raster_NewFunc raster_new (MemorySegment segment, MemorySession session) {
        return FT_Raster_NewFunc.ofAddress(raster_new$get(segment), session);
    }
    static final VarHandle raster_reset$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("raster_reset"));
    public static VarHandle raster_reset$VH() {
        return FT_Raster_Funcs_.raster_reset$VH;
    }
    public static MemoryAddress raster_reset$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)FT_Raster_Funcs_.raster_reset$VH.get(seg);
    }
    public static void raster_reset$set( MemorySegment seg, MemoryAddress x) {
        FT_Raster_Funcs_.raster_reset$VH.set(seg, x);
    }
    public static MemoryAddress raster_reset$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)FT_Raster_Funcs_.raster_reset$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void raster_reset$set(MemorySegment seg, long index, MemoryAddress x) {
        FT_Raster_Funcs_.raster_reset$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static FT_Raster_ResetFunc raster_reset (MemorySegment segment, MemorySession session) {
        return FT_Raster_ResetFunc.ofAddress(raster_reset$get(segment), session);
    }
    static final VarHandle raster_set_mode$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("raster_set_mode"));
    public static VarHandle raster_set_mode$VH() {
        return FT_Raster_Funcs_.raster_set_mode$VH;
    }
    public static MemoryAddress raster_set_mode$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)FT_Raster_Funcs_.raster_set_mode$VH.get(seg);
    }
    public static void raster_set_mode$set( MemorySegment seg, MemoryAddress x) {
        FT_Raster_Funcs_.raster_set_mode$VH.set(seg, x);
    }
    public static MemoryAddress raster_set_mode$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)FT_Raster_Funcs_.raster_set_mode$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void raster_set_mode$set(MemorySegment seg, long index, MemoryAddress x) {
        FT_Raster_Funcs_.raster_set_mode$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static FT_Raster_SetModeFunc raster_set_mode (MemorySegment segment, MemorySession session) {
        return FT_Raster_SetModeFunc.ofAddress(raster_set_mode$get(segment), session);
    }
    static final VarHandle raster_render$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("raster_render"));
    public static VarHandle raster_render$VH() {
        return FT_Raster_Funcs_.raster_render$VH;
    }
    public static MemoryAddress raster_render$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)FT_Raster_Funcs_.raster_render$VH.get(seg);
    }
    public static void raster_render$set( MemorySegment seg, MemoryAddress x) {
        FT_Raster_Funcs_.raster_render$VH.set(seg, x);
    }
    public static MemoryAddress raster_render$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)FT_Raster_Funcs_.raster_render$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void raster_render$set(MemorySegment seg, long index, MemoryAddress x) {
        FT_Raster_Funcs_.raster_render$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static FT_Raster_RenderFunc raster_render (MemorySegment segment, MemorySession session) {
        return FT_Raster_RenderFunc.ofAddress(raster_render$get(segment), session);
    }
    static final VarHandle raster_done$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("raster_done"));
    public static VarHandle raster_done$VH() {
        return FT_Raster_Funcs_.raster_done$VH;
    }
    public static MemoryAddress raster_done$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)FT_Raster_Funcs_.raster_done$VH.get(seg);
    }
    public static void raster_done$set( MemorySegment seg, MemoryAddress x) {
        FT_Raster_Funcs_.raster_done$VH.set(seg, x);
    }
    public static MemoryAddress raster_done$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)FT_Raster_Funcs_.raster_done$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void raster_done$set(MemorySegment seg, long index, MemoryAddress x) {
        FT_Raster_Funcs_.raster_done$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static FT_Raster_DoneFunc raster_done (MemorySegment segment, MemorySession session) {
        return FT_Raster_DoneFunc.ofAddress(raster_done$get(segment), session);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


