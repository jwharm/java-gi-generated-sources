// Generated by jextract

package io.github.jwharm.javagi.interop.jextract;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class ifaddr {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            Constants$root.C_SHORT$LAYOUT.withName("sa_family"),
            MemoryLayout.sequenceLayout(14, Constants$root.C_CHAR$LAYOUT).withName("sa_data")
        ).withName("ifa_addr"),
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_SHORT$LAYOUT.withName("sa_family"),
                MemoryLayout.sequenceLayout(14, Constants$root.C_CHAR$LAYOUT).withName("sa_data")
            ).withName("ifu_broadaddr"),
            MemoryLayout.structLayout(
                Constants$root.C_SHORT$LAYOUT.withName("sa_family"),
                MemoryLayout.sequenceLayout(14, Constants$root.C_CHAR$LAYOUT).withName("sa_data")
            ).withName("ifu_dstaddr")
        ).withName("ifa_ifu"),
        Constants$root.C_POINTER$LAYOUT.withName("ifa_ifp"),
        Constants$root.C_POINTER$LAYOUT.withName("ifa_next")
    ).withName("ifaddr");
    public static MemoryLayout $LAYOUT() {
        return ifaddr.$struct$LAYOUT;
    }
    public static MemorySegment ifa_addr$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    public static class ifa_ifu {

        static final  GroupLayout ifa_ifu$union$LAYOUT = MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_SHORT$LAYOUT.withName("sa_family"),
                MemoryLayout.sequenceLayout(14, Constants$root.C_CHAR$LAYOUT).withName("sa_data")
            ).withName("ifu_broadaddr"),
            MemoryLayout.structLayout(
                Constants$root.C_SHORT$LAYOUT.withName("sa_family"),
                MemoryLayout.sequenceLayout(14, Constants$root.C_CHAR$LAYOUT).withName("sa_data")
            ).withName("ifu_dstaddr")
        );
        public static MemoryLayout $LAYOUT() {
            return ifa_ifu.ifa_ifu$union$LAYOUT;
        }
        public static MemorySegment ifu_broadaddr$slice(MemorySegment seg) {
            return seg.asSlice(0, 16);
        }
        public static MemorySegment ifu_dstaddr$slice(MemorySegment seg) {
            return seg.asSlice(0, 16);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
    }

    public static MemorySegment ifa_ifu$slice(MemorySegment seg) {
        return seg.asSlice(16, 16);
    }
    static final VarHandle ifa_ifp$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ifa_ifp"));
    public static VarHandle ifa_ifp$VH() {
        return ifaddr.ifa_ifp$VH;
    }
    public static MemoryAddress ifa_ifp$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)ifaddr.ifa_ifp$VH.get(seg);
    }
    public static void ifa_ifp$set( MemorySegment seg, MemoryAddress x) {
        ifaddr.ifa_ifp$VH.set(seg, x);
    }
    public static MemoryAddress ifa_ifp$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)ifaddr.ifa_ifp$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ifa_ifp$set(MemorySegment seg, long index, MemoryAddress x) {
        ifaddr.ifa_ifp$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ifa_next$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ifa_next"));
    public static VarHandle ifa_next$VH() {
        return ifaddr.ifa_next$VH;
    }
    public static MemoryAddress ifa_next$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)ifaddr.ifa_next$VH.get(seg);
    }
    public static void ifa_next$set( MemorySegment seg, MemoryAddress x) {
        ifaddr.ifa_next$VH.set(seg, x);
    }
    public static MemoryAddress ifa_next$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)ifaddr.ifa_next$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ifa_next$set(MemorySegment seg, long index, MemoryAddress x) {
        ifaddr.ifa_next$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


