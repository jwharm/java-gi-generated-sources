// Generated by jextract

package io.github.jwharm.javagi.interop.jextract;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class hb_ot_math_glyph_part_t {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_INT$LAYOUT.withName("glyph"),
        Constants$root.C_INT$LAYOUT.withName("start_connector_length"),
        Constants$root.C_INT$LAYOUT.withName("end_connector_length"),
        Constants$root.C_INT$LAYOUT.withName("full_advance"),
        Constants$root.C_INT$LAYOUT.withName("flags")
    ).withName("hb_ot_math_glyph_part_t");
    public static MemoryLayout $LAYOUT() {
        return hb_ot_math_glyph_part_t.$struct$LAYOUT;
    }
    static final VarHandle glyph$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("glyph"));
    public static VarHandle glyph$VH() {
        return hb_ot_math_glyph_part_t.glyph$VH;
    }
    public static int glyph$get(MemorySegment seg) {
        return (int)hb_ot_math_glyph_part_t.glyph$VH.get(seg);
    }
    public static void glyph$set( MemorySegment seg, int x) {
        hb_ot_math_glyph_part_t.glyph$VH.set(seg, x);
    }
    public static int glyph$get(MemorySegment seg, long index) {
        return (int)hb_ot_math_glyph_part_t.glyph$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void glyph$set(MemorySegment seg, long index, int x) {
        hb_ot_math_glyph_part_t.glyph$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle start_connector_length$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("start_connector_length"));
    public static VarHandle start_connector_length$VH() {
        return hb_ot_math_glyph_part_t.start_connector_length$VH;
    }
    public static int start_connector_length$get(MemorySegment seg) {
        return (int)hb_ot_math_glyph_part_t.start_connector_length$VH.get(seg);
    }
    public static void start_connector_length$set( MemorySegment seg, int x) {
        hb_ot_math_glyph_part_t.start_connector_length$VH.set(seg, x);
    }
    public static int start_connector_length$get(MemorySegment seg, long index) {
        return (int)hb_ot_math_glyph_part_t.start_connector_length$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void start_connector_length$set(MemorySegment seg, long index, int x) {
        hb_ot_math_glyph_part_t.start_connector_length$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle end_connector_length$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("end_connector_length"));
    public static VarHandle end_connector_length$VH() {
        return hb_ot_math_glyph_part_t.end_connector_length$VH;
    }
    public static int end_connector_length$get(MemorySegment seg) {
        return (int)hb_ot_math_glyph_part_t.end_connector_length$VH.get(seg);
    }
    public static void end_connector_length$set( MemorySegment seg, int x) {
        hb_ot_math_glyph_part_t.end_connector_length$VH.set(seg, x);
    }
    public static int end_connector_length$get(MemorySegment seg, long index) {
        return (int)hb_ot_math_glyph_part_t.end_connector_length$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void end_connector_length$set(MemorySegment seg, long index, int x) {
        hb_ot_math_glyph_part_t.end_connector_length$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle full_advance$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("full_advance"));
    public static VarHandle full_advance$VH() {
        return hb_ot_math_glyph_part_t.full_advance$VH;
    }
    public static int full_advance$get(MemorySegment seg) {
        return (int)hb_ot_math_glyph_part_t.full_advance$VH.get(seg);
    }
    public static void full_advance$set( MemorySegment seg, int x) {
        hb_ot_math_glyph_part_t.full_advance$VH.set(seg, x);
    }
    public static int full_advance$get(MemorySegment seg, long index) {
        return (int)hb_ot_math_glyph_part_t.full_advance$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void full_advance$set(MemorySegment seg, long index, int x) {
        hb_ot_math_glyph_part_t.full_advance$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle flags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("flags"));
    public static VarHandle flags$VH() {
        return hb_ot_math_glyph_part_t.flags$VH;
    }
    public static int flags$get(MemorySegment seg) {
        return (int)hb_ot_math_glyph_part_t.flags$VH.get(seg);
    }
    public static void flags$set( MemorySegment seg, int x) {
        hb_ot_math_glyph_part_t.flags$VH.set(seg, x);
    }
    public static int flags$get(MemorySegment seg, long index) {
        return (int)hb_ot_math_glyph_part_t.flags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void flags$set(MemorySegment seg, long index, int x) {
        hb_ot_math_glyph_part_t.flags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


