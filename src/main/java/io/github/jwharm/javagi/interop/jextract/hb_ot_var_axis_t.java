// Generated by jextract

package io.github.jwharm.javagi.interop.jextract;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class hb_ot_var_axis_t {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_INT$LAYOUT.withName("tag"),
        Constants$root.C_INT$LAYOUT.withName("name_id"),
        Constants$root.C_FLOAT$LAYOUT.withName("min_value"),
        Constants$root.C_FLOAT$LAYOUT.withName("default_value"),
        Constants$root.C_FLOAT$LAYOUT.withName("max_value")
    ).withName("hb_ot_var_axis_t");
    public static MemoryLayout $LAYOUT() {
        return hb_ot_var_axis_t.$struct$LAYOUT;
    }
    static final VarHandle tag$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("tag"));
    public static VarHandle tag$VH() {
        return hb_ot_var_axis_t.tag$VH;
    }
    public static int tag$get(MemorySegment seg) {
        return (int)hb_ot_var_axis_t.tag$VH.get(seg);
    }
    public static void tag$set( MemorySegment seg, int x) {
        hb_ot_var_axis_t.tag$VH.set(seg, x);
    }
    public static int tag$get(MemorySegment seg, long index) {
        return (int)hb_ot_var_axis_t.tag$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void tag$set(MemorySegment seg, long index, int x) {
        hb_ot_var_axis_t.tag$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle name_id$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("name_id"));
    public static VarHandle name_id$VH() {
        return hb_ot_var_axis_t.name_id$VH;
    }
    public static int name_id$get(MemorySegment seg) {
        return (int)hb_ot_var_axis_t.name_id$VH.get(seg);
    }
    public static void name_id$set( MemorySegment seg, int x) {
        hb_ot_var_axis_t.name_id$VH.set(seg, x);
    }
    public static int name_id$get(MemorySegment seg, long index) {
        return (int)hb_ot_var_axis_t.name_id$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void name_id$set(MemorySegment seg, long index, int x) {
        hb_ot_var_axis_t.name_id$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle min_value$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("min_value"));
    public static VarHandle min_value$VH() {
        return hb_ot_var_axis_t.min_value$VH;
    }
    public static float min_value$get(MemorySegment seg) {
        return (float)hb_ot_var_axis_t.min_value$VH.get(seg);
    }
    public static void min_value$set( MemorySegment seg, float x) {
        hb_ot_var_axis_t.min_value$VH.set(seg, x);
    }
    public static float min_value$get(MemorySegment seg, long index) {
        return (float)hb_ot_var_axis_t.min_value$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void min_value$set(MemorySegment seg, long index, float x) {
        hb_ot_var_axis_t.min_value$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle default_value$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("default_value"));
    public static VarHandle default_value$VH() {
        return hb_ot_var_axis_t.default_value$VH;
    }
    public static float default_value$get(MemorySegment seg) {
        return (float)hb_ot_var_axis_t.default_value$VH.get(seg);
    }
    public static void default_value$set( MemorySegment seg, float x) {
        hb_ot_var_axis_t.default_value$VH.set(seg, x);
    }
    public static float default_value$get(MemorySegment seg, long index) {
        return (float)hb_ot_var_axis_t.default_value$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void default_value$set(MemorySegment seg, long index, float x) {
        hb_ot_var_axis_t.default_value$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle max_value$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("max_value"));
    public static VarHandle max_value$VH() {
        return hb_ot_var_axis_t.max_value$VH;
    }
    public static float max_value$get(MemorySegment seg) {
        return (float)hb_ot_var_axis_t.max_value$VH.get(seg);
    }
    public static void max_value$set( MemorySegment seg, float x) {
        hb_ot_var_axis_t.max_value$VH.set(seg, x);
    }
    public static float max_value$get(MemorySegment seg, long index) {
        return (float)hb_ot_var_axis_t.max_value$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void max_value$set(MemorySegment seg, long index, float x) {
        hb_ot_var_axis_t.max_value$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


