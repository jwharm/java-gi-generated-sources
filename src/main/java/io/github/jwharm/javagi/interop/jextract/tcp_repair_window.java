// Generated by jextract

package io.github.jwharm.javagi.interop.jextract;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class tcp_repair_window {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_INT$LAYOUT.withName("snd_wl1"),
        Constants$root.C_INT$LAYOUT.withName("snd_wnd"),
        Constants$root.C_INT$LAYOUT.withName("max_window"),
        Constants$root.C_INT$LAYOUT.withName("rcv_wnd"),
        Constants$root.C_INT$LAYOUT.withName("rcv_wup")
    ).withName("tcp_repair_window");
    public static MemoryLayout $LAYOUT() {
        return tcp_repair_window.$struct$LAYOUT;
    }
    static final VarHandle snd_wl1$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("snd_wl1"));
    public static VarHandle snd_wl1$VH() {
        return tcp_repair_window.snd_wl1$VH;
    }
    public static int snd_wl1$get(MemorySegment seg) {
        return (int)tcp_repair_window.snd_wl1$VH.get(seg);
    }
    public static void snd_wl1$set( MemorySegment seg, int x) {
        tcp_repair_window.snd_wl1$VH.set(seg, x);
    }
    public static int snd_wl1$get(MemorySegment seg, long index) {
        return (int)tcp_repair_window.snd_wl1$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void snd_wl1$set(MemorySegment seg, long index, int x) {
        tcp_repair_window.snd_wl1$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle snd_wnd$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("snd_wnd"));
    public static VarHandle snd_wnd$VH() {
        return tcp_repair_window.snd_wnd$VH;
    }
    public static int snd_wnd$get(MemorySegment seg) {
        return (int)tcp_repair_window.snd_wnd$VH.get(seg);
    }
    public static void snd_wnd$set( MemorySegment seg, int x) {
        tcp_repair_window.snd_wnd$VH.set(seg, x);
    }
    public static int snd_wnd$get(MemorySegment seg, long index) {
        return (int)tcp_repair_window.snd_wnd$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void snd_wnd$set(MemorySegment seg, long index, int x) {
        tcp_repair_window.snd_wnd$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle max_window$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("max_window"));
    public static VarHandle max_window$VH() {
        return tcp_repair_window.max_window$VH;
    }
    public static int max_window$get(MemorySegment seg) {
        return (int)tcp_repair_window.max_window$VH.get(seg);
    }
    public static void max_window$set( MemorySegment seg, int x) {
        tcp_repair_window.max_window$VH.set(seg, x);
    }
    public static int max_window$get(MemorySegment seg, long index) {
        return (int)tcp_repair_window.max_window$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void max_window$set(MemorySegment seg, long index, int x) {
        tcp_repair_window.max_window$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle rcv_wnd$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("rcv_wnd"));
    public static VarHandle rcv_wnd$VH() {
        return tcp_repair_window.rcv_wnd$VH;
    }
    public static int rcv_wnd$get(MemorySegment seg) {
        return (int)tcp_repair_window.rcv_wnd$VH.get(seg);
    }
    public static void rcv_wnd$set( MemorySegment seg, int x) {
        tcp_repair_window.rcv_wnd$VH.set(seg, x);
    }
    public static int rcv_wnd$get(MemorySegment seg, long index) {
        return (int)tcp_repair_window.rcv_wnd$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void rcv_wnd$set(MemorySegment seg, long index, int x) {
        tcp_repair_window.rcv_wnd$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle rcv_wup$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("rcv_wup"));
    public static VarHandle rcv_wup$VH() {
        return tcp_repair_window.rcv_wup$VH;
    }
    public static int rcv_wup$get(MemorySegment seg) {
        return (int)tcp_repair_window.rcv_wup$VH.get(seg);
    }
    public static void rcv_wup$set( MemorySegment seg, int x) {
        tcp_repair_window.rcv_wup$VH.set(seg, x);
    }
    public static int rcv_wup$get(MemorySegment seg, long index) {
        return (int)tcp_repair_window.rcv_wup$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void rcv_wup$set(MemorySegment seg, long index, int x) {
        tcp_repair_window.rcv_wup$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


