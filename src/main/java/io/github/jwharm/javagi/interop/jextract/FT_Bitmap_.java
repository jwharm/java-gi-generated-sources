// Generated by jextract

package io.github.jwharm.javagi.interop.jextract;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class FT_Bitmap_ {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_INT$LAYOUT.withName("rows"),
        Constants$root.C_INT$LAYOUT.withName("width"),
        Constants$root.C_INT$LAYOUT.withName("pitch"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("buffer"),
        Constants$root.C_SHORT$LAYOUT.withName("num_grays"),
        Constants$root.C_CHAR$LAYOUT.withName("pixel_mode"),
        Constants$root.C_CHAR$LAYOUT.withName("palette_mode"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("palette")
    ).withName("FT_Bitmap_");
    public static MemoryLayout $LAYOUT() {
        return FT_Bitmap_.$struct$LAYOUT;
    }
    static final VarHandle rows$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("rows"));
    public static VarHandle rows$VH() {
        return FT_Bitmap_.rows$VH;
    }
    public static int rows$get(MemorySegment seg) {
        return (int)FT_Bitmap_.rows$VH.get(seg);
    }
    public static void rows$set( MemorySegment seg, int x) {
        FT_Bitmap_.rows$VH.set(seg, x);
    }
    public static int rows$get(MemorySegment seg, long index) {
        return (int)FT_Bitmap_.rows$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void rows$set(MemorySegment seg, long index, int x) {
        FT_Bitmap_.rows$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle width$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("width"));
    public static VarHandle width$VH() {
        return FT_Bitmap_.width$VH;
    }
    public static int width$get(MemorySegment seg) {
        return (int)FT_Bitmap_.width$VH.get(seg);
    }
    public static void width$set( MemorySegment seg, int x) {
        FT_Bitmap_.width$VH.set(seg, x);
    }
    public static int width$get(MemorySegment seg, long index) {
        return (int)FT_Bitmap_.width$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void width$set(MemorySegment seg, long index, int x) {
        FT_Bitmap_.width$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pitch$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pitch"));
    public static VarHandle pitch$VH() {
        return FT_Bitmap_.pitch$VH;
    }
    public static int pitch$get(MemorySegment seg) {
        return (int)FT_Bitmap_.pitch$VH.get(seg);
    }
    public static void pitch$set( MemorySegment seg, int x) {
        FT_Bitmap_.pitch$VH.set(seg, x);
    }
    public static int pitch$get(MemorySegment seg, long index) {
        return (int)FT_Bitmap_.pitch$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pitch$set(MemorySegment seg, long index, int x) {
        FT_Bitmap_.pitch$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle buffer$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("buffer"));
    public static VarHandle buffer$VH() {
        return FT_Bitmap_.buffer$VH;
    }
    public static MemoryAddress buffer$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)FT_Bitmap_.buffer$VH.get(seg);
    }
    public static void buffer$set( MemorySegment seg, MemoryAddress x) {
        FT_Bitmap_.buffer$VH.set(seg, x);
    }
    public static MemoryAddress buffer$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)FT_Bitmap_.buffer$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void buffer$set(MemorySegment seg, long index, MemoryAddress x) {
        FT_Bitmap_.buffer$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle num_grays$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("num_grays"));
    public static VarHandle num_grays$VH() {
        return FT_Bitmap_.num_grays$VH;
    }
    public static short num_grays$get(MemorySegment seg) {
        return (short)FT_Bitmap_.num_grays$VH.get(seg);
    }
    public static void num_grays$set( MemorySegment seg, short x) {
        FT_Bitmap_.num_grays$VH.set(seg, x);
    }
    public static short num_grays$get(MemorySegment seg, long index) {
        return (short)FT_Bitmap_.num_grays$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void num_grays$set(MemorySegment seg, long index, short x) {
        FT_Bitmap_.num_grays$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pixel_mode$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pixel_mode"));
    public static VarHandle pixel_mode$VH() {
        return FT_Bitmap_.pixel_mode$VH;
    }
    public static byte pixel_mode$get(MemorySegment seg) {
        return (byte)FT_Bitmap_.pixel_mode$VH.get(seg);
    }
    public static void pixel_mode$set( MemorySegment seg, byte x) {
        FT_Bitmap_.pixel_mode$VH.set(seg, x);
    }
    public static byte pixel_mode$get(MemorySegment seg, long index) {
        return (byte)FT_Bitmap_.pixel_mode$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pixel_mode$set(MemorySegment seg, long index, byte x) {
        FT_Bitmap_.pixel_mode$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle palette_mode$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("palette_mode"));
    public static VarHandle palette_mode$VH() {
        return FT_Bitmap_.palette_mode$VH;
    }
    public static byte palette_mode$get(MemorySegment seg) {
        return (byte)FT_Bitmap_.palette_mode$VH.get(seg);
    }
    public static void palette_mode$set( MemorySegment seg, byte x) {
        FT_Bitmap_.palette_mode$VH.set(seg, x);
    }
    public static byte palette_mode$get(MemorySegment seg, long index) {
        return (byte)FT_Bitmap_.palette_mode$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void palette_mode$set(MemorySegment seg, long index, byte x) {
        FT_Bitmap_.palette_mode$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle palette$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("palette"));
    public static VarHandle palette$VH() {
        return FT_Bitmap_.palette$VH;
    }
    public static MemoryAddress palette$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)FT_Bitmap_.palette$VH.get(seg);
    }
    public static void palette$set( MemorySegment seg, MemoryAddress x) {
        FT_Bitmap_.palette$VH.set(seg, x);
    }
    public static MemoryAddress palette$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)FT_Bitmap_.palette$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void palette$set(MemorySegment seg, long index, MemoryAddress x) {
        FT_Bitmap_.palette$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


