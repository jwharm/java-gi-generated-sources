// Generated by jextract

package io.github.jwharm.javagi.interop.jextract;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class FT_Size_RequestRec_ {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_INT$LAYOUT.withName("type"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_LONG_LONG$LAYOUT.withName("width"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("height"),
        Constants$root.C_INT$LAYOUT.withName("horiResolution"),
        Constants$root.C_INT$LAYOUT.withName("vertResolution")
    ).withName("FT_Size_RequestRec_");
    public static MemoryLayout $LAYOUT() {
        return FT_Size_RequestRec_.$struct$LAYOUT;
    }
    static final VarHandle type$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("type"));
    public static VarHandle type$VH() {
        return FT_Size_RequestRec_.type$VH;
    }
    public static int type$get(MemorySegment seg) {
        return (int)FT_Size_RequestRec_.type$VH.get(seg);
    }
    public static void type$set( MemorySegment seg, int x) {
        FT_Size_RequestRec_.type$VH.set(seg, x);
    }
    public static int type$get(MemorySegment seg, long index) {
        return (int)FT_Size_RequestRec_.type$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void type$set(MemorySegment seg, long index, int x) {
        FT_Size_RequestRec_.type$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle width$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("width"));
    public static VarHandle width$VH() {
        return FT_Size_RequestRec_.width$VH;
    }
    public static long width$get(MemorySegment seg) {
        return (long)FT_Size_RequestRec_.width$VH.get(seg);
    }
    public static void width$set( MemorySegment seg, long x) {
        FT_Size_RequestRec_.width$VH.set(seg, x);
    }
    public static long width$get(MemorySegment seg, long index) {
        return (long)FT_Size_RequestRec_.width$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void width$set(MemorySegment seg, long index, long x) {
        FT_Size_RequestRec_.width$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle height$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("height"));
    public static VarHandle height$VH() {
        return FT_Size_RequestRec_.height$VH;
    }
    public static long height$get(MemorySegment seg) {
        return (long)FT_Size_RequestRec_.height$VH.get(seg);
    }
    public static void height$set( MemorySegment seg, long x) {
        FT_Size_RequestRec_.height$VH.set(seg, x);
    }
    public static long height$get(MemorySegment seg, long index) {
        return (long)FT_Size_RequestRec_.height$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void height$set(MemorySegment seg, long index, long x) {
        FT_Size_RequestRec_.height$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle horiResolution$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("horiResolution"));
    public static VarHandle horiResolution$VH() {
        return FT_Size_RequestRec_.horiResolution$VH;
    }
    public static int horiResolution$get(MemorySegment seg) {
        return (int)FT_Size_RequestRec_.horiResolution$VH.get(seg);
    }
    public static void horiResolution$set( MemorySegment seg, int x) {
        FT_Size_RequestRec_.horiResolution$VH.set(seg, x);
    }
    public static int horiResolution$get(MemorySegment seg, long index) {
        return (int)FT_Size_RequestRec_.horiResolution$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void horiResolution$set(MemorySegment seg, long index, int x) {
        FT_Size_RequestRec_.horiResolution$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle vertResolution$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("vertResolution"));
    public static VarHandle vertResolution$VH() {
        return FT_Size_RequestRec_.vertResolution$VH;
    }
    public static int vertResolution$get(MemorySegment seg) {
        return (int)FT_Size_RequestRec_.vertResolution$VH.get(seg);
    }
    public static void vertResolution$set( MemorySegment seg, int x) {
        FT_Size_RequestRec_.vertResolution$VH.set(seg, x);
    }
    public static int vertResolution$get(MemorySegment seg, long index) {
        return (int)FT_Size_RequestRec_.vertResolution$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void vertResolution$set(MemorySegment seg, long index, int x) {
        FT_Size_RequestRec_.vertResolution$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


