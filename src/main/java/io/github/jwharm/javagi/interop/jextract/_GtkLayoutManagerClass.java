// Generated by jextract

package io.github.jwharm.javagi.interop.jextract;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _GtkLayoutManagerClass {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG_LONG$LAYOUT.withName("g_type")
            ).withName("g_type_class"),
            Constants$root.C_POINTER$LAYOUT.withName("construct_properties"),
            Constants$root.C_POINTER$LAYOUT.withName("constructor"),
            Constants$root.C_POINTER$LAYOUT.withName("set_property"),
            Constants$root.C_POINTER$LAYOUT.withName("get_property"),
            Constants$root.C_POINTER$LAYOUT.withName("dispose"),
            Constants$root.C_POINTER$LAYOUT.withName("finalize"),
            Constants$root.C_POINTER$LAYOUT.withName("dispatch_properties_changed"),
            Constants$root.C_POINTER$LAYOUT.withName("notify"),
            Constants$root.C_POINTER$LAYOUT.withName("constructed"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("flags"),
            MemoryLayout.sequenceLayout(6, Constants$root.C_POINTER$LAYOUT).withName("pdummy")
        ).withName("parent_class"),
        Constants$root.C_POINTER$LAYOUT.withName("get_request_mode"),
        Constants$root.C_POINTER$LAYOUT.withName("measure"),
        Constants$root.C_POINTER$LAYOUT.withName("allocate"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("layout_child_type"),
        Constants$root.C_POINTER$LAYOUT.withName("create_layout_child"),
        Constants$root.C_POINTER$LAYOUT.withName("root"),
        Constants$root.C_POINTER$LAYOUT.withName("unroot"),
        MemoryLayout.sequenceLayout(16, Constants$root.C_POINTER$LAYOUT).withName("_padding")
    ).withName("_GtkLayoutManagerClass");
    public static MemoryLayout $LAYOUT() {
        return _GtkLayoutManagerClass.$struct$LAYOUT;
    }
    public static MemorySegment parent_class$slice(MemorySegment seg) {
        return seg.asSlice(0, 136);
    }
    static final FunctionDescriptor get_request_mode$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_request_mode$MH = RuntimeHelper.downcallHandle(
        _GtkLayoutManagerClass.get_request_mode$FUNC
    );
    public interface get_request_mode {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(get_request_mode fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_request_mode.class, fi, _GtkLayoutManagerClass.get_request_mode$FUNC, session);
        }
        static get_request_mode ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)_GtkLayoutManagerClass.get_request_mode$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_request_mode$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_request_mode"));
    public static VarHandle get_request_mode$VH() {
        return _GtkLayoutManagerClass.get_request_mode$VH;
    }
    public static MemoryAddress get_request_mode$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkLayoutManagerClass.get_request_mode$VH.get(seg);
    }
    public static void get_request_mode$set( MemorySegment seg, MemoryAddress x) {
        _GtkLayoutManagerClass.get_request_mode$VH.set(seg, x);
    }
    public static MemoryAddress get_request_mode$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkLayoutManagerClass.get_request_mode$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_request_mode$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkLayoutManagerClass.get_request_mode$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_request_mode get_request_mode (MemorySegment segment, MemorySession session) {
        return get_request_mode.ofAddress(get_request_mode$get(segment), session);
    }
    static final FunctionDescriptor measure$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle measure$MH = RuntimeHelper.downcallHandle(
        _GtkLayoutManagerClass.measure$FUNC
    );
    public interface measure {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, int _x2, int _x3, java.lang.foreign.MemoryAddress _x4, java.lang.foreign.MemoryAddress _x5, java.lang.foreign.MemoryAddress _x6, java.lang.foreign.MemoryAddress _x7);
        static MemorySegment allocate(measure fi, MemorySession session) {
            return RuntimeHelper.upcallStub(measure.class, fi, _GtkLayoutManagerClass.measure$FUNC, session);
        }
        static measure ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, int __x2, int __x3, java.lang.foreign.MemoryAddress __x4, java.lang.foreign.MemoryAddress __x5, java.lang.foreign.MemoryAddress __x6, java.lang.foreign.MemoryAddress __x7) -> {
                try {
                    _GtkLayoutManagerClass.measure$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, __x2, __x3, (java.lang.foreign.Addressable)__x4, (java.lang.foreign.Addressable)__x5, (java.lang.foreign.Addressable)__x6, (java.lang.foreign.Addressable)__x7);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle measure$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("measure"));
    public static VarHandle measure$VH() {
        return _GtkLayoutManagerClass.measure$VH;
    }
    public static MemoryAddress measure$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkLayoutManagerClass.measure$VH.get(seg);
    }
    public static void measure$set( MemorySegment seg, MemoryAddress x) {
        _GtkLayoutManagerClass.measure$VH.set(seg, x);
    }
    public static MemoryAddress measure$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkLayoutManagerClass.measure$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void measure$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkLayoutManagerClass.measure$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static measure measure (MemorySegment segment, MemorySession session) {
        return measure.ofAddress(measure$get(segment), session);
    }
    static final FunctionDescriptor allocate$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle allocate$MH = RuntimeHelper.downcallHandle(
        _GtkLayoutManagerClass.allocate$FUNC
    );
    public interface allocate {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, int _x2, int _x3, int _x4);
        static MemorySegment allocate(allocate fi, MemorySession session) {
            return RuntimeHelper.upcallStub(allocate.class, fi, _GtkLayoutManagerClass.allocate$FUNC, session);
        }
        static allocate ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, int __x2, int __x3, int __x4) -> {
                try {
                    _GtkLayoutManagerClass.allocate$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle allocate$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("allocate"));
    public static VarHandle allocate$VH() {
        return _GtkLayoutManagerClass.allocate$VH;
    }
    public static MemoryAddress allocate$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkLayoutManagerClass.allocate$VH.get(seg);
    }
    public static void allocate$set( MemorySegment seg, MemoryAddress x) {
        _GtkLayoutManagerClass.allocate$VH.set(seg, x);
    }
    public static MemoryAddress allocate$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkLayoutManagerClass.allocate$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void allocate$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkLayoutManagerClass.allocate$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static allocate allocate (MemorySegment segment, MemorySession session) {
        return allocate.ofAddress(allocate$get(segment), session);
    }
    static final VarHandle layout_child_type$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("layout_child_type"));
    public static VarHandle layout_child_type$VH() {
        return _GtkLayoutManagerClass.layout_child_type$VH;
    }
    public static long layout_child_type$get(MemorySegment seg) {
        return (long)_GtkLayoutManagerClass.layout_child_type$VH.get(seg);
    }
    public static void layout_child_type$set( MemorySegment seg, long x) {
        _GtkLayoutManagerClass.layout_child_type$VH.set(seg, x);
    }
    public static long layout_child_type$get(MemorySegment seg, long index) {
        return (long)_GtkLayoutManagerClass.layout_child_type$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void layout_child_type$set(MemorySegment seg, long index, long x) {
        _GtkLayoutManagerClass.layout_child_type$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final FunctionDescriptor create_layout_child$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle create_layout_child$MH = RuntimeHelper.downcallHandle(
        _GtkLayoutManagerClass.create_layout_child$FUNC
    );
    public interface create_layout_child {

        java.lang.foreign.Addressable apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(create_layout_child fi, MemorySession session) {
            return RuntimeHelper.upcallStub(create_layout_child.class, fi, _GtkLayoutManagerClass.create_layout_child$FUNC, session);
        }
        static create_layout_child ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    return (java.lang.foreign.Addressable)(java.lang.foreign.MemoryAddress)_GtkLayoutManagerClass.create_layout_child$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle create_layout_child$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("create_layout_child"));
    public static VarHandle create_layout_child$VH() {
        return _GtkLayoutManagerClass.create_layout_child$VH;
    }
    public static MemoryAddress create_layout_child$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkLayoutManagerClass.create_layout_child$VH.get(seg);
    }
    public static void create_layout_child$set( MemorySegment seg, MemoryAddress x) {
        _GtkLayoutManagerClass.create_layout_child$VH.set(seg, x);
    }
    public static MemoryAddress create_layout_child$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkLayoutManagerClass.create_layout_child$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void create_layout_child$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkLayoutManagerClass.create_layout_child$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static create_layout_child create_layout_child (MemorySegment segment, MemorySession session) {
        return create_layout_child.ofAddress(create_layout_child$get(segment), session);
    }
    static final FunctionDescriptor root$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle root$MH = RuntimeHelper.downcallHandle(
        _GtkLayoutManagerClass.root$FUNC
    );
    public interface root {

        void apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(root fi, MemorySession session) {
            return RuntimeHelper.upcallStub(root.class, fi, _GtkLayoutManagerClass.root$FUNC, session);
        }
        static root ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    _GtkLayoutManagerClass.root$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle root$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("root"));
    public static VarHandle root$VH() {
        return _GtkLayoutManagerClass.root$VH;
    }
    public static MemoryAddress root$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkLayoutManagerClass.root$VH.get(seg);
    }
    public static void root$set( MemorySegment seg, MemoryAddress x) {
        _GtkLayoutManagerClass.root$VH.set(seg, x);
    }
    public static MemoryAddress root$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkLayoutManagerClass.root$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void root$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkLayoutManagerClass.root$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static root root (MemorySegment segment, MemorySession session) {
        return root.ofAddress(root$get(segment), session);
    }
    static final FunctionDescriptor unroot$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle unroot$MH = RuntimeHelper.downcallHandle(
        _GtkLayoutManagerClass.unroot$FUNC
    );
    public interface unroot {

        void apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(unroot fi, MemorySession session) {
            return RuntimeHelper.upcallStub(unroot.class, fi, _GtkLayoutManagerClass.unroot$FUNC, session);
        }
        static unroot ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    _GtkLayoutManagerClass.unroot$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle unroot$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("unroot"));
    public static VarHandle unroot$VH() {
        return _GtkLayoutManagerClass.unroot$VH;
    }
    public static MemoryAddress unroot$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkLayoutManagerClass.unroot$VH.get(seg);
    }
    public static void unroot$set( MemorySegment seg, MemoryAddress x) {
        _GtkLayoutManagerClass.unroot$VH.set(seg, x);
    }
    public static MemoryAddress unroot$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkLayoutManagerClass.unroot$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void unroot$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkLayoutManagerClass.unroot$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static unroot unroot (MemorySegment segment, MemorySession session) {
        return unroot.ofAddress(unroot$get(segment), session);
    }
    public static MemorySegment _padding$slice(MemorySegment seg) {
        return seg.asSlice(192, 128);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


