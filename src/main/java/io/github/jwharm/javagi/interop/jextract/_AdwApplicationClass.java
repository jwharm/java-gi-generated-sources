// Generated by jextract

package io.github.jwharm.javagi.interop.jextract;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _AdwApplicationClass {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            MemoryLayout.structLayout(
                MemoryLayout.structLayout(
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG_LONG$LAYOUT.withName("g_type")
                    ).withName("g_type_class"),
                    Constants$root.C_POINTER$LAYOUT.withName("construct_properties"),
                    Constants$root.C_POINTER$LAYOUT.withName("constructor"),
                    Constants$root.C_POINTER$LAYOUT.withName("set_property"),
                    Constants$root.C_POINTER$LAYOUT.withName("get_property"),
                    Constants$root.C_POINTER$LAYOUT.withName("dispose"),
                    Constants$root.C_POINTER$LAYOUT.withName("finalize"),
                    Constants$root.C_POINTER$LAYOUT.withName("dispatch_properties_changed"),
                    Constants$root.C_POINTER$LAYOUT.withName("notify"),
                    Constants$root.C_POINTER$LAYOUT.withName("constructed"),
                    Constants$root.C_LONG_LONG$LAYOUT.withName("flags"),
                    MemoryLayout.sequenceLayout(6, Constants$root.C_POINTER$LAYOUT).withName("pdummy")
                ).withName("parent_class"),
                Constants$root.C_POINTER$LAYOUT.withName("startup"),
                Constants$root.C_POINTER$LAYOUT.withName("activate"),
                Constants$root.C_POINTER$LAYOUT.withName("open"),
                Constants$root.C_POINTER$LAYOUT.withName("command_line"),
                Constants$root.C_POINTER$LAYOUT.withName("local_command_line"),
                Constants$root.C_POINTER$LAYOUT.withName("before_emit"),
                Constants$root.C_POINTER$LAYOUT.withName("after_emit"),
                Constants$root.C_POINTER$LAYOUT.withName("add_platform_data"),
                Constants$root.C_POINTER$LAYOUT.withName("quit_mainloop"),
                Constants$root.C_POINTER$LAYOUT.withName("run_mainloop"),
                Constants$root.C_POINTER$LAYOUT.withName("shutdown"),
                Constants$root.C_POINTER$LAYOUT.withName("dbus_register"),
                Constants$root.C_POINTER$LAYOUT.withName("dbus_unregister"),
                Constants$root.C_POINTER$LAYOUT.withName("handle_local_options"),
                Constants$root.C_POINTER$LAYOUT.withName("name_lost"),
                MemoryLayout.sequenceLayout(7, Constants$root.C_POINTER$LAYOUT).withName("padding")
            ).withName("parent_class"),
            Constants$root.C_POINTER$LAYOUT.withName("window_added"),
            Constants$root.C_POINTER$LAYOUT.withName("window_removed"),
            MemoryLayout.sequenceLayout(8, Constants$root.C_POINTER$LAYOUT).withName("padding")
        ).withName("parent_class"),
        MemoryLayout.sequenceLayout(4, Constants$root.C_POINTER$LAYOUT).withName("padding")
    ).withName("_AdwApplicationClass");
    public static MemoryLayout $LAYOUT() {
        return _AdwApplicationClass.$struct$LAYOUT;
    }
    public static MemorySegment parent_class$slice(MemorySegment seg) {
        return seg.asSlice(0, 392);
    }
    public static MemorySegment padding$slice(MemorySegment seg) {
        return seg.asSlice(392, 32);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


