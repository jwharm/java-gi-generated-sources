// Generated by jextract

package io.github.jwharm.javagi.interop.jextract;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _GdkPixbufModule {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("module_name"),
        Constants$root.C_POINTER$LAYOUT.withName("module_path"),
        Constants$root.C_POINTER$LAYOUT.withName("module"),
        Constants$root.C_POINTER$LAYOUT.withName("info"),
        Constants$root.C_POINTER$LAYOUT.withName("load"),
        Constants$root.C_POINTER$LAYOUT.withName("load_xpm_data"),
        Constants$root.C_POINTER$LAYOUT.withName("begin_load"),
        Constants$root.C_POINTER$LAYOUT.withName("stop_load"),
        Constants$root.C_POINTER$LAYOUT.withName("load_increment"),
        Constants$root.C_POINTER$LAYOUT.withName("load_animation"),
        Constants$root.C_POINTER$LAYOUT.withName("save"),
        Constants$root.C_POINTER$LAYOUT.withName("save_to_callback"),
        Constants$root.C_POINTER$LAYOUT.withName("is_save_option_supported"),
        Constants$root.C_POINTER$LAYOUT.withName("_reserved1"),
        Constants$root.C_POINTER$LAYOUT.withName("_reserved2"),
        Constants$root.C_POINTER$LAYOUT.withName("_reserved3"),
        Constants$root.C_POINTER$LAYOUT.withName("_reserved4")
    ).withName("_GdkPixbufModule");
    public static MemoryLayout $LAYOUT() {
        return _GdkPixbufModule.$struct$LAYOUT;
    }
    static final VarHandle module_name$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("module_name"));
    public static VarHandle module_name$VH() {
        return _GdkPixbufModule.module_name$VH;
    }
    public static MemoryAddress module_name$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GdkPixbufModule.module_name$VH.get(seg);
    }
    public static void module_name$set( MemorySegment seg, MemoryAddress x) {
        _GdkPixbufModule.module_name$VH.set(seg, x);
    }
    public static MemoryAddress module_name$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GdkPixbufModule.module_name$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void module_name$set(MemorySegment seg, long index, MemoryAddress x) {
        _GdkPixbufModule.module_name$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle module_path$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("module_path"));
    public static VarHandle module_path$VH() {
        return _GdkPixbufModule.module_path$VH;
    }
    public static MemoryAddress module_path$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GdkPixbufModule.module_path$VH.get(seg);
    }
    public static void module_path$set( MemorySegment seg, MemoryAddress x) {
        _GdkPixbufModule.module_path$VH.set(seg, x);
    }
    public static MemoryAddress module_path$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GdkPixbufModule.module_path$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void module_path$set(MemorySegment seg, long index, MemoryAddress x) {
        _GdkPixbufModule.module_path$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle module$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("module"));
    public static VarHandle module$VH() {
        return _GdkPixbufModule.module$VH;
    }
    public static MemoryAddress module$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GdkPixbufModule.module$VH.get(seg);
    }
    public static void module$set( MemorySegment seg, MemoryAddress x) {
        _GdkPixbufModule.module$VH.set(seg, x);
    }
    public static MemoryAddress module$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GdkPixbufModule.module$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void module$set(MemorySegment seg, long index, MemoryAddress x) {
        _GdkPixbufModule.module$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle info$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("info"));
    public static VarHandle info$VH() {
        return _GdkPixbufModule.info$VH;
    }
    public static MemoryAddress info$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GdkPixbufModule.info$VH.get(seg);
    }
    public static void info$set( MemorySegment seg, MemoryAddress x) {
        _GdkPixbufModule.info$VH.set(seg, x);
    }
    public static MemoryAddress info$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GdkPixbufModule.info$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void info$set(MemorySegment seg, long index, MemoryAddress x) {
        _GdkPixbufModule.info$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle load$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("load"));
    public static VarHandle load$VH() {
        return _GdkPixbufModule.load$VH;
    }
    public static MemoryAddress load$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GdkPixbufModule.load$VH.get(seg);
    }
    public static void load$set( MemorySegment seg, MemoryAddress x) {
        _GdkPixbufModule.load$VH.set(seg, x);
    }
    public static MemoryAddress load$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GdkPixbufModule.load$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void load$set(MemorySegment seg, long index, MemoryAddress x) {
        _GdkPixbufModule.load$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GdkPixbufModuleLoadFunc load (MemorySegment segment, MemorySession session) {
        return GdkPixbufModuleLoadFunc.ofAddress(load$get(segment), session);
    }
    static final VarHandle load_xpm_data$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("load_xpm_data"));
    public static VarHandle load_xpm_data$VH() {
        return _GdkPixbufModule.load_xpm_data$VH;
    }
    public static MemoryAddress load_xpm_data$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GdkPixbufModule.load_xpm_data$VH.get(seg);
    }
    public static void load_xpm_data$set( MemorySegment seg, MemoryAddress x) {
        _GdkPixbufModule.load_xpm_data$VH.set(seg, x);
    }
    public static MemoryAddress load_xpm_data$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GdkPixbufModule.load_xpm_data$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void load_xpm_data$set(MemorySegment seg, long index, MemoryAddress x) {
        _GdkPixbufModule.load_xpm_data$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GdkPixbufModuleLoadXpmDataFunc load_xpm_data (MemorySegment segment, MemorySession session) {
        return GdkPixbufModuleLoadXpmDataFunc.ofAddress(load_xpm_data$get(segment), session);
    }
    static final VarHandle begin_load$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("begin_load"));
    public static VarHandle begin_load$VH() {
        return _GdkPixbufModule.begin_load$VH;
    }
    public static MemoryAddress begin_load$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GdkPixbufModule.begin_load$VH.get(seg);
    }
    public static void begin_load$set( MemorySegment seg, MemoryAddress x) {
        _GdkPixbufModule.begin_load$VH.set(seg, x);
    }
    public static MemoryAddress begin_load$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GdkPixbufModule.begin_load$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void begin_load$set(MemorySegment seg, long index, MemoryAddress x) {
        _GdkPixbufModule.begin_load$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GdkPixbufModuleBeginLoadFunc begin_load (MemorySegment segment, MemorySession session) {
        return GdkPixbufModuleBeginLoadFunc.ofAddress(begin_load$get(segment), session);
    }
    static final VarHandle stop_load$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("stop_load"));
    public static VarHandle stop_load$VH() {
        return _GdkPixbufModule.stop_load$VH;
    }
    public static MemoryAddress stop_load$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GdkPixbufModule.stop_load$VH.get(seg);
    }
    public static void stop_load$set( MemorySegment seg, MemoryAddress x) {
        _GdkPixbufModule.stop_load$VH.set(seg, x);
    }
    public static MemoryAddress stop_load$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GdkPixbufModule.stop_load$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void stop_load$set(MemorySegment seg, long index, MemoryAddress x) {
        _GdkPixbufModule.stop_load$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GdkPixbufModuleStopLoadFunc stop_load (MemorySegment segment, MemorySession session) {
        return GdkPixbufModuleStopLoadFunc.ofAddress(stop_load$get(segment), session);
    }
    static final VarHandle load_increment$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("load_increment"));
    public static VarHandle load_increment$VH() {
        return _GdkPixbufModule.load_increment$VH;
    }
    public static MemoryAddress load_increment$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GdkPixbufModule.load_increment$VH.get(seg);
    }
    public static void load_increment$set( MemorySegment seg, MemoryAddress x) {
        _GdkPixbufModule.load_increment$VH.set(seg, x);
    }
    public static MemoryAddress load_increment$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GdkPixbufModule.load_increment$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void load_increment$set(MemorySegment seg, long index, MemoryAddress x) {
        _GdkPixbufModule.load_increment$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GdkPixbufModuleIncrementLoadFunc load_increment (MemorySegment segment, MemorySession session) {
        return GdkPixbufModuleIncrementLoadFunc.ofAddress(load_increment$get(segment), session);
    }
    static final VarHandle load_animation$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("load_animation"));
    public static VarHandle load_animation$VH() {
        return _GdkPixbufModule.load_animation$VH;
    }
    public static MemoryAddress load_animation$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GdkPixbufModule.load_animation$VH.get(seg);
    }
    public static void load_animation$set( MemorySegment seg, MemoryAddress x) {
        _GdkPixbufModule.load_animation$VH.set(seg, x);
    }
    public static MemoryAddress load_animation$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GdkPixbufModule.load_animation$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void load_animation$set(MemorySegment seg, long index, MemoryAddress x) {
        _GdkPixbufModule.load_animation$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GdkPixbufModuleLoadAnimationFunc load_animation (MemorySegment segment, MemorySession session) {
        return GdkPixbufModuleLoadAnimationFunc.ofAddress(load_animation$get(segment), session);
    }
    static final VarHandle save$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("save"));
    public static VarHandle save$VH() {
        return _GdkPixbufModule.save$VH;
    }
    public static MemoryAddress save$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GdkPixbufModule.save$VH.get(seg);
    }
    public static void save$set( MemorySegment seg, MemoryAddress x) {
        _GdkPixbufModule.save$VH.set(seg, x);
    }
    public static MemoryAddress save$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GdkPixbufModule.save$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void save$set(MemorySegment seg, long index, MemoryAddress x) {
        _GdkPixbufModule.save$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GdkPixbufModuleSaveFunc save (MemorySegment segment, MemorySession session) {
        return GdkPixbufModuleSaveFunc.ofAddress(save$get(segment), session);
    }
    static final VarHandle save_to_callback$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("save_to_callback"));
    public static VarHandle save_to_callback$VH() {
        return _GdkPixbufModule.save_to_callback$VH;
    }
    public static MemoryAddress save_to_callback$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GdkPixbufModule.save_to_callback$VH.get(seg);
    }
    public static void save_to_callback$set( MemorySegment seg, MemoryAddress x) {
        _GdkPixbufModule.save_to_callback$VH.set(seg, x);
    }
    public static MemoryAddress save_to_callback$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GdkPixbufModule.save_to_callback$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void save_to_callback$set(MemorySegment seg, long index, MemoryAddress x) {
        _GdkPixbufModule.save_to_callback$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GdkPixbufModuleSaveCallbackFunc save_to_callback (MemorySegment segment, MemorySession session) {
        return GdkPixbufModuleSaveCallbackFunc.ofAddress(save_to_callback$get(segment), session);
    }
    static final VarHandle is_save_option_supported$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("is_save_option_supported"));
    public static VarHandle is_save_option_supported$VH() {
        return _GdkPixbufModule.is_save_option_supported$VH;
    }
    public static MemoryAddress is_save_option_supported$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GdkPixbufModule.is_save_option_supported$VH.get(seg);
    }
    public static void is_save_option_supported$set( MemorySegment seg, MemoryAddress x) {
        _GdkPixbufModule.is_save_option_supported$VH.set(seg, x);
    }
    public static MemoryAddress is_save_option_supported$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GdkPixbufModule.is_save_option_supported$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void is_save_option_supported$set(MemorySegment seg, long index, MemoryAddress x) {
        _GdkPixbufModule.is_save_option_supported$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GdkPixbufModuleSaveOptionSupportedFunc is_save_option_supported (MemorySegment segment, MemorySession session) {
        return GdkPixbufModuleSaveOptionSupportedFunc.ofAddress(is_save_option_supported$get(segment), session);
    }
    static final FunctionDescriptor _reserved1$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _reserved1$MH = RuntimeHelper.downcallHandle(
        _GdkPixbufModule._reserved1$FUNC
    );
    public interface _reserved1 {

        void apply();
        static MemorySegment allocate(_reserved1 fi, MemorySession session) {
            return RuntimeHelper.upcallStub(_reserved1.class, fi, _GdkPixbufModule._reserved1$FUNC, session);
        }
        static _reserved1 ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return () -> {
                try {
                    _GdkPixbufModule._reserved1$MH.invokeExact((Addressable)symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _reserved1$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_reserved1"));
    public static VarHandle _reserved1$VH() {
        return _GdkPixbufModule._reserved1$VH;
    }
    public static MemoryAddress _reserved1$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GdkPixbufModule._reserved1$VH.get(seg);
    }
    public static void _reserved1$set( MemorySegment seg, MemoryAddress x) {
        _GdkPixbufModule._reserved1$VH.set(seg, x);
    }
    public static MemoryAddress _reserved1$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GdkPixbufModule._reserved1$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _reserved1$set(MemorySegment seg, long index, MemoryAddress x) {
        _GdkPixbufModule._reserved1$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _reserved1 _reserved1 (MemorySegment segment, MemorySession session) {
        return _reserved1.ofAddress(_reserved1$get(segment), session);
    }
    static final FunctionDescriptor _reserved2$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _reserved2$MH = RuntimeHelper.downcallHandle(
        _GdkPixbufModule._reserved2$FUNC
    );
    public interface _reserved2 {

        void apply();
        static MemorySegment allocate(_reserved2 fi, MemorySession session) {
            return RuntimeHelper.upcallStub(_reserved2.class, fi, _GdkPixbufModule._reserved2$FUNC, session);
        }
        static _reserved2 ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return () -> {
                try {
                    _GdkPixbufModule._reserved2$MH.invokeExact((Addressable)symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _reserved2$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_reserved2"));
    public static VarHandle _reserved2$VH() {
        return _GdkPixbufModule._reserved2$VH;
    }
    public static MemoryAddress _reserved2$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GdkPixbufModule._reserved2$VH.get(seg);
    }
    public static void _reserved2$set( MemorySegment seg, MemoryAddress x) {
        _GdkPixbufModule._reserved2$VH.set(seg, x);
    }
    public static MemoryAddress _reserved2$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GdkPixbufModule._reserved2$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _reserved2$set(MemorySegment seg, long index, MemoryAddress x) {
        _GdkPixbufModule._reserved2$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _reserved2 _reserved2 (MemorySegment segment, MemorySession session) {
        return _reserved2.ofAddress(_reserved2$get(segment), session);
    }
    static final FunctionDescriptor _reserved3$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _reserved3$MH = RuntimeHelper.downcallHandle(
        _GdkPixbufModule._reserved3$FUNC
    );
    public interface _reserved3 {

        void apply();
        static MemorySegment allocate(_reserved3 fi, MemorySession session) {
            return RuntimeHelper.upcallStub(_reserved3.class, fi, _GdkPixbufModule._reserved3$FUNC, session);
        }
        static _reserved3 ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return () -> {
                try {
                    _GdkPixbufModule._reserved3$MH.invokeExact((Addressable)symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _reserved3$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_reserved3"));
    public static VarHandle _reserved3$VH() {
        return _GdkPixbufModule._reserved3$VH;
    }
    public static MemoryAddress _reserved3$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GdkPixbufModule._reserved3$VH.get(seg);
    }
    public static void _reserved3$set( MemorySegment seg, MemoryAddress x) {
        _GdkPixbufModule._reserved3$VH.set(seg, x);
    }
    public static MemoryAddress _reserved3$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GdkPixbufModule._reserved3$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _reserved3$set(MemorySegment seg, long index, MemoryAddress x) {
        _GdkPixbufModule._reserved3$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _reserved3 _reserved3 (MemorySegment segment, MemorySession session) {
        return _reserved3.ofAddress(_reserved3$get(segment), session);
    }
    static final FunctionDescriptor _reserved4$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _reserved4$MH = RuntimeHelper.downcallHandle(
        _GdkPixbufModule._reserved4$FUNC
    );
    public interface _reserved4 {

        void apply();
        static MemorySegment allocate(_reserved4 fi, MemorySession session) {
            return RuntimeHelper.upcallStub(_reserved4.class, fi, _GdkPixbufModule._reserved4$FUNC, session);
        }
        static _reserved4 ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return () -> {
                try {
                    _GdkPixbufModule._reserved4$MH.invokeExact((Addressable)symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _reserved4$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_reserved4"));
    public static VarHandle _reserved4$VH() {
        return _GdkPixbufModule._reserved4$VH;
    }
    public static MemoryAddress _reserved4$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GdkPixbufModule._reserved4$VH.get(seg);
    }
    public static void _reserved4$set( MemorySegment seg, MemoryAddress x) {
        _GdkPixbufModule._reserved4$VH.set(seg, x);
    }
    public static MemoryAddress _reserved4$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GdkPixbufModule._reserved4$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _reserved4$set(MemorySegment seg, long index, MemoryAddress x) {
        _GdkPixbufModule._reserved4$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _reserved4 _reserved4 (MemorySegment segment, MemorySession session) {
        return _reserved4.ofAddress(_reserved4$get(segment), session);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


