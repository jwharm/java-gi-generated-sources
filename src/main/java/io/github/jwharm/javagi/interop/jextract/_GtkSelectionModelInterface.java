// Generated by jextract

package io.github.jwharm.javagi.interop.jextract;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _GtkSelectionModelInterface {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            Constants$root.C_LONG_LONG$LAYOUT.withName("g_type"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("g_instance_type")
        ).withName("g_iface"),
        Constants$root.C_POINTER$LAYOUT.withName("is_selected"),
        Constants$root.C_POINTER$LAYOUT.withName("get_selection_in_range"),
        Constants$root.C_POINTER$LAYOUT.withName("select_item"),
        Constants$root.C_POINTER$LAYOUT.withName("unselect_item"),
        Constants$root.C_POINTER$LAYOUT.withName("select_range"),
        Constants$root.C_POINTER$LAYOUT.withName("unselect_range"),
        Constants$root.C_POINTER$LAYOUT.withName("select_all"),
        Constants$root.C_POINTER$LAYOUT.withName("unselect_all"),
        Constants$root.C_POINTER$LAYOUT.withName("set_selection")
    ).withName("_GtkSelectionModelInterface");
    public static MemoryLayout $LAYOUT() {
        return _GtkSelectionModelInterface.$struct$LAYOUT;
    }
    public static MemorySegment g_iface$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    static final FunctionDescriptor is_selected$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle is_selected$MH = RuntimeHelper.downcallHandle(
        _GtkSelectionModelInterface.is_selected$FUNC
    );
    public interface is_selected {

        int apply(java.lang.foreign.MemoryAddress _x0, int _x1);
        static MemorySegment allocate(is_selected fi, MemorySession session) {
            return RuntimeHelper.upcallStub(is_selected.class, fi, _GtkSelectionModelInterface.is_selected$FUNC, session);
        }
        static is_selected ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1) -> {
                try {
                    return (int)_GtkSelectionModelInterface.is_selected$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle is_selected$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("is_selected"));
    public static VarHandle is_selected$VH() {
        return _GtkSelectionModelInterface.is_selected$VH;
    }
    public static MemoryAddress is_selected$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkSelectionModelInterface.is_selected$VH.get(seg);
    }
    public static void is_selected$set( MemorySegment seg, MemoryAddress x) {
        _GtkSelectionModelInterface.is_selected$VH.set(seg, x);
    }
    public static MemoryAddress is_selected$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkSelectionModelInterface.is_selected$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void is_selected$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkSelectionModelInterface.is_selected$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static is_selected is_selected (MemorySegment segment, MemorySession session) {
        return is_selected.ofAddress(is_selected$get(segment), session);
    }
    static final FunctionDescriptor get_selection_in_range$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle get_selection_in_range$MH = RuntimeHelper.downcallHandle(
        _GtkSelectionModelInterface.get_selection_in_range$FUNC
    );
    public interface get_selection_in_range {

        java.lang.foreign.Addressable apply(java.lang.foreign.MemoryAddress _x0, int _x1, int _x2);
        static MemorySegment allocate(get_selection_in_range fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_selection_in_range.class, fi, _GtkSelectionModelInterface.get_selection_in_range$FUNC, session);
        }
        static get_selection_in_range ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1, int __x2) -> {
                try {
                    return (java.lang.foreign.Addressable)(java.lang.foreign.MemoryAddress)_GtkSelectionModelInterface.get_selection_in_range$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_selection_in_range$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_selection_in_range"));
    public static VarHandle get_selection_in_range$VH() {
        return _GtkSelectionModelInterface.get_selection_in_range$VH;
    }
    public static MemoryAddress get_selection_in_range$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkSelectionModelInterface.get_selection_in_range$VH.get(seg);
    }
    public static void get_selection_in_range$set( MemorySegment seg, MemoryAddress x) {
        _GtkSelectionModelInterface.get_selection_in_range$VH.set(seg, x);
    }
    public static MemoryAddress get_selection_in_range$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkSelectionModelInterface.get_selection_in_range$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_selection_in_range$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkSelectionModelInterface.get_selection_in_range$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_selection_in_range get_selection_in_range (MemorySegment segment, MemorySession session) {
        return get_selection_in_range.ofAddress(get_selection_in_range$get(segment), session);
    }
    static final FunctionDescriptor select_item$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle select_item$MH = RuntimeHelper.downcallHandle(
        _GtkSelectionModelInterface.select_item$FUNC
    );
    public interface select_item {

        int apply(java.lang.foreign.MemoryAddress _x0, int _x1, int _x2);
        static MemorySegment allocate(select_item fi, MemorySession session) {
            return RuntimeHelper.upcallStub(select_item.class, fi, _GtkSelectionModelInterface.select_item$FUNC, session);
        }
        static select_item ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1, int __x2) -> {
                try {
                    return (int)_GtkSelectionModelInterface.select_item$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle select_item$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("select_item"));
    public static VarHandle select_item$VH() {
        return _GtkSelectionModelInterface.select_item$VH;
    }
    public static MemoryAddress select_item$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkSelectionModelInterface.select_item$VH.get(seg);
    }
    public static void select_item$set( MemorySegment seg, MemoryAddress x) {
        _GtkSelectionModelInterface.select_item$VH.set(seg, x);
    }
    public static MemoryAddress select_item$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkSelectionModelInterface.select_item$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void select_item$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkSelectionModelInterface.select_item$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static select_item select_item (MemorySegment segment, MemorySession session) {
        return select_item.ofAddress(select_item$get(segment), session);
    }
    static final FunctionDescriptor unselect_item$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle unselect_item$MH = RuntimeHelper.downcallHandle(
        _GtkSelectionModelInterface.unselect_item$FUNC
    );
    public interface unselect_item {

        int apply(java.lang.foreign.MemoryAddress _x0, int _x1);
        static MemorySegment allocate(unselect_item fi, MemorySession session) {
            return RuntimeHelper.upcallStub(unselect_item.class, fi, _GtkSelectionModelInterface.unselect_item$FUNC, session);
        }
        static unselect_item ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1) -> {
                try {
                    return (int)_GtkSelectionModelInterface.unselect_item$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle unselect_item$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("unselect_item"));
    public static VarHandle unselect_item$VH() {
        return _GtkSelectionModelInterface.unselect_item$VH;
    }
    public static MemoryAddress unselect_item$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkSelectionModelInterface.unselect_item$VH.get(seg);
    }
    public static void unselect_item$set( MemorySegment seg, MemoryAddress x) {
        _GtkSelectionModelInterface.unselect_item$VH.set(seg, x);
    }
    public static MemoryAddress unselect_item$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkSelectionModelInterface.unselect_item$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void unselect_item$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkSelectionModelInterface.unselect_item$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static unselect_item unselect_item (MemorySegment segment, MemorySession session) {
        return unselect_item.ofAddress(unselect_item$get(segment), session);
    }
    static final FunctionDescriptor select_range$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle select_range$MH = RuntimeHelper.downcallHandle(
        _GtkSelectionModelInterface.select_range$FUNC
    );
    public interface select_range {

        int apply(java.lang.foreign.MemoryAddress _x0, int _x1, int _x2, int _x3);
        static MemorySegment allocate(select_range fi, MemorySession session) {
            return RuntimeHelper.upcallStub(select_range.class, fi, _GtkSelectionModelInterface.select_range$FUNC, session);
        }
        static select_range ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1, int __x2, int __x3) -> {
                try {
                    return (int)_GtkSelectionModelInterface.select_range$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle select_range$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("select_range"));
    public static VarHandle select_range$VH() {
        return _GtkSelectionModelInterface.select_range$VH;
    }
    public static MemoryAddress select_range$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkSelectionModelInterface.select_range$VH.get(seg);
    }
    public static void select_range$set( MemorySegment seg, MemoryAddress x) {
        _GtkSelectionModelInterface.select_range$VH.set(seg, x);
    }
    public static MemoryAddress select_range$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkSelectionModelInterface.select_range$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void select_range$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkSelectionModelInterface.select_range$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static select_range select_range (MemorySegment segment, MemorySession session) {
        return select_range.ofAddress(select_range$get(segment), session);
    }
    static final FunctionDescriptor unselect_range$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle unselect_range$MH = RuntimeHelper.downcallHandle(
        _GtkSelectionModelInterface.unselect_range$FUNC
    );
    public interface unselect_range {

        int apply(java.lang.foreign.MemoryAddress _x0, int _x1, int _x2);
        static MemorySegment allocate(unselect_range fi, MemorySession session) {
            return RuntimeHelper.upcallStub(unselect_range.class, fi, _GtkSelectionModelInterface.unselect_range$FUNC, session);
        }
        static unselect_range ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1, int __x2) -> {
                try {
                    return (int)_GtkSelectionModelInterface.unselect_range$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle unselect_range$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("unselect_range"));
    public static VarHandle unselect_range$VH() {
        return _GtkSelectionModelInterface.unselect_range$VH;
    }
    public static MemoryAddress unselect_range$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkSelectionModelInterface.unselect_range$VH.get(seg);
    }
    public static void unselect_range$set( MemorySegment seg, MemoryAddress x) {
        _GtkSelectionModelInterface.unselect_range$VH.set(seg, x);
    }
    public static MemoryAddress unselect_range$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkSelectionModelInterface.unselect_range$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void unselect_range$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkSelectionModelInterface.unselect_range$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static unselect_range unselect_range (MemorySegment segment, MemorySession session) {
        return unselect_range.ofAddress(unselect_range$get(segment), session);
    }
    static final FunctionDescriptor select_all$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle select_all$MH = RuntimeHelper.downcallHandle(
        _GtkSelectionModelInterface.select_all$FUNC
    );
    public interface select_all {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(select_all fi, MemorySession session) {
            return RuntimeHelper.upcallStub(select_all.class, fi, _GtkSelectionModelInterface.select_all$FUNC, session);
        }
        static select_all ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)_GtkSelectionModelInterface.select_all$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle select_all$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("select_all"));
    public static VarHandle select_all$VH() {
        return _GtkSelectionModelInterface.select_all$VH;
    }
    public static MemoryAddress select_all$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkSelectionModelInterface.select_all$VH.get(seg);
    }
    public static void select_all$set( MemorySegment seg, MemoryAddress x) {
        _GtkSelectionModelInterface.select_all$VH.set(seg, x);
    }
    public static MemoryAddress select_all$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkSelectionModelInterface.select_all$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void select_all$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkSelectionModelInterface.select_all$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static select_all select_all (MemorySegment segment, MemorySession session) {
        return select_all.ofAddress(select_all$get(segment), session);
    }
    static final FunctionDescriptor unselect_all$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle unselect_all$MH = RuntimeHelper.downcallHandle(
        _GtkSelectionModelInterface.unselect_all$FUNC
    );
    public interface unselect_all {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(unselect_all fi, MemorySession session) {
            return RuntimeHelper.upcallStub(unselect_all.class, fi, _GtkSelectionModelInterface.unselect_all$FUNC, session);
        }
        static unselect_all ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)_GtkSelectionModelInterface.unselect_all$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle unselect_all$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("unselect_all"));
    public static VarHandle unselect_all$VH() {
        return _GtkSelectionModelInterface.unselect_all$VH;
    }
    public static MemoryAddress unselect_all$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkSelectionModelInterface.unselect_all$VH.get(seg);
    }
    public static void unselect_all$set( MemorySegment seg, MemoryAddress x) {
        _GtkSelectionModelInterface.unselect_all$VH.set(seg, x);
    }
    public static MemoryAddress unselect_all$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkSelectionModelInterface.unselect_all$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void unselect_all$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkSelectionModelInterface.unselect_all$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static unselect_all unselect_all (MemorySegment segment, MemorySession session) {
        return unselect_all.ofAddress(unselect_all$get(segment), session);
    }
    static final FunctionDescriptor set_selection$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle set_selection$MH = RuntimeHelper.downcallHandle(
        _GtkSelectionModelInterface.set_selection$FUNC
    );
    public interface set_selection {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(set_selection fi, MemorySession session) {
            return RuntimeHelper.upcallStub(set_selection.class, fi, _GtkSelectionModelInterface.set_selection$FUNC, session);
        }
        static set_selection ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    return (int)_GtkSelectionModelInterface.set_selection$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle set_selection$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("set_selection"));
    public static VarHandle set_selection$VH() {
        return _GtkSelectionModelInterface.set_selection$VH;
    }
    public static MemoryAddress set_selection$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkSelectionModelInterface.set_selection$VH.get(seg);
    }
    public static void set_selection$set( MemorySegment seg, MemoryAddress x) {
        _GtkSelectionModelInterface.set_selection$VH.set(seg, x);
    }
    public static MemoryAddress set_selection$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkSelectionModelInterface.set_selection$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void set_selection$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkSelectionModelInterface.set_selection$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static set_selection set_selection (MemorySegment segment, MemorySession session) {
        return set_selection.ofAddress(set_selection$get(segment), session);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


