// Generated by jextract

package io.github.jwharm.javagi.interop.jextract;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class FT_Outline_ {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_SHORT$LAYOUT.withName("n_contours"),
        Constants$root.C_SHORT$LAYOUT.withName("n_points"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("points"),
        Constants$root.C_POINTER$LAYOUT.withName("tags"),
        Constants$root.C_POINTER$LAYOUT.withName("contours"),
        Constants$root.C_INT$LAYOUT.withName("flags"),
        MemoryLayout.paddingLayout(32)
    ).withName("FT_Outline_");
    public static MemoryLayout $LAYOUT() {
        return FT_Outline_.$struct$LAYOUT;
    }
    static final VarHandle n_contours$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("n_contours"));
    public static VarHandle n_contours$VH() {
        return FT_Outline_.n_contours$VH;
    }
    public static short n_contours$get(MemorySegment seg) {
        return (short)FT_Outline_.n_contours$VH.get(seg);
    }
    public static void n_contours$set( MemorySegment seg, short x) {
        FT_Outline_.n_contours$VH.set(seg, x);
    }
    public static short n_contours$get(MemorySegment seg, long index) {
        return (short)FT_Outline_.n_contours$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void n_contours$set(MemorySegment seg, long index, short x) {
        FT_Outline_.n_contours$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle n_points$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("n_points"));
    public static VarHandle n_points$VH() {
        return FT_Outline_.n_points$VH;
    }
    public static short n_points$get(MemorySegment seg) {
        return (short)FT_Outline_.n_points$VH.get(seg);
    }
    public static void n_points$set( MemorySegment seg, short x) {
        FT_Outline_.n_points$VH.set(seg, x);
    }
    public static short n_points$get(MemorySegment seg, long index) {
        return (short)FT_Outline_.n_points$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void n_points$set(MemorySegment seg, long index, short x) {
        FT_Outline_.n_points$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle points$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("points"));
    public static VarHandle points$VH() {
        return FT_Outline_.points$VH;
    }
    public static MemoryAddress points$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)FT_Outline_.points$VH.get(seg);
    }
    public static void points$set( MemorySegment seg, MemoryAddress x) {
        FT_Outline_.points$VH.set(seg, x);
    }
    public static MemoryAddress points$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)FT_Outline_.points$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void points$set(MemorySegment seg, long index, MemoryAddress x) {
        FT_Outline_.points$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle tags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("tags"));
    public static VarHandle tags$VH() {
        return FT_Outline_.tags$VH;
    }
    public static MemoryAddress tags$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)FT_Outline_.tags$VH.get(seg);
    }
    public static void tags$set( MemorySegment seg, MemoryAddress x) {
        FT_Outline_.tags$VH.set(seg, x);
    }
    public static MemoryAddress tags$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)FT_Outline_.tags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void tags$set(MemorySegment seg, long index, MemoryAddress x) {
        FT_Outline_.tags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle contours$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("contours"));
    public static VarHandle contours$VH() {
        return FT_Outline_.contours$VH;
    }
    public static MemoryAddress contours$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)FT_Outline_.contours$VH.get(seg);
    }
    public static void contours$set( MemorySegment seg, MemoryAddress x) {
        FT_Outline_.contours$VH.set(seg, x);
    }
    public static MemoryAddress contours$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)FT_Outline_.contours$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void contours$set(MemorySegment seg, long index, MemoryAddress x) {
        FT_Outline_.contours$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle flags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("flags"));
    public static VarHandle flags$VH() {
        return FT_Outline_.flags$VH;
    }
    public static int flags$get(MemorySegment seg) {
        return (int)FT_Outline_.flags$VH.get(seg);
    }
    public static void flags$set( MemorySegment seg, int x) {
        FT_Outline_.flags$VH.set(seg, x);
    }
    public static int flags$get(MemorySegment seg, long index) {
        return (int)FT_Outline_.flags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void flags$set(MemorySegment seg, long index, int x) {
        FT_Outline_.flags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


