// Generated by jextract

package io.github.jwharm.javagi.interop.jextract;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class FT_GlyphSlotRec_ {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("library"),
        Constants$root.C_POINTER$LAYOUT.withName("face"),
        Constants$root.C_POINTER$LAYOUT.withName("next"),
        Constants$root.C_INT$LAYOUT.withName("glyph_index"),
        MemoryLayout.paddingLayout(32),
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("data"),
            Constants$root.C_POINTER$LAYOUT.withName("finalizer")
        ).withName("generic"),
        MemoryLayout.structLayout(
            Constants$root.C_LONG_LONG$LAYOUT.withName("width"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("height"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("horiBearingX"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("horiBearingY"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("horiAdvance"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("vertBearingX"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("vertBearingY"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("vertAdvance")
        ).withName("metrics"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("linearHoriAdvance"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("linearVertAdvance"),
        MemoryLayout.structLayout(
            Constants$root.C_LONG_LONG$LAYOUT.withName("x"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("y")
        ).withName("advance"),
        Constants$root.C_INT$LAYOUT.withName("format"),
        MemoryLayout.paddingLayout(32),
        MemoryLayout.structLayout(
            Constants$root.C_INT$LAYOUT.withName("rows"),
            Constants$root.C_INT$LAYOUT.withName("width"),
            Constants$root.C_INT$LAYOUT.withName("pitch"),
            MemoryLayout.paddingLayout(32),
            Constants$root.C_POINTER$LAYOUT.withName("buffer"),
            Constants$root.C_SHORT$LAYOUT.withName("num_grays"),
            Constants$root.C_CHAR$LAYOUT.withName("pixel_mode"),
            Constants$root.C_CHAR$LAYOUT.withName("palette_mode"),
            MemoryLayout.paddingLayout(32),
            Constants$root.C_POINTER$LAYOUT.withName("palette")
        ).withName("bitmap"),
        Constants$root.C_INT$LAYOUT.withName("bitmap_left"),
        Constants$root.C_INT$LAYOUT.withName("bitmap_top"),
        MemoryLayout.structLayout(
            Constants$root.C_SHORT$LAYOUT.withName("n_contours"),
            Constants$root.C_SHORT$LAYOUT.withName("n_points"),
            MemoryLayout.paddingLayout(32),
            Constants$root.C_POINTER$LAYOUT.withName("points"),
            Constants$root.C_POINTER$LAYOUT.withName("tags"),
            Constants$root.C_POINTER$LAYOUT.withName("contours"),
            Constants$root.C_INT$LAYOUT.withName("flags"),
            MemoryLayout.paddingLayout(32)
        ).withName("outline"),
        Constants$root.C_INT$LAYOUT.withName("num_subglyphs"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("subglyphs"),
        Constants$root.C_POINTER$LAYOUT.withName("control_data"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("control_len"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("lsb_delta"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("rsb_delta"),
        Constants$root.C_POINTER$LAYOUT.withName("other"),
        Constants$root.C_POINTER$LAYOUT.withName("internal")
    ).withName("FT_GlyphSlotRec_");
    public static MemoryLayout $LAYOUT() {
        return FT_GlyphSlotRec_.$struct$LAYOUT;
    }
    static final VarHandle library$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("library"));
    public static VarHandle library$VH() {
        return FT_GlyphSlotRec_.library$VH;
    }
    public static MemoryAddress library$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)FT_GlyphSlotRec_.library$VH.get(seg);
    }
    public static void library$set( MemorySegment seg, MemoryAddress x) {
        FT_GlyphSlotRec_.library$VH.set(seg, x);
    }
    public static MemoryAddress library$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)FT_GlyphSlotRec_.library$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void library$set(MemorySegment seg, long index, MemoryAddress x) {
        FT_GlyphSlotRec_.library$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle face$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("face"));
    public static VarHandle face$VH() {
        return FT_GlyphSlotRec_.face$VH;
    }
    public static MemoryAddress face$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)FT_GlyphSlotRec_.face$VH.get(seg);
    }
    public static void face$set( MemorySegment seg, MemoryAddress x) {
        FT_GlyphSlotRec_.face$VH.set(seg, x);
    }
    public static MemoryAddress face$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)FT_GlyphSlotRec_.face$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void face$set(MemorySegment seg, long index, MemoryAddress x) {
        FT_GlyphSlotRec_.face$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle next$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("next"));
    public static VarHandle next$VH() {
        return FT_GlyphSlotRec_.next$VH;
    }
    public static MemoryAddress next$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)FT_GlyphSlotRec_.next$VH.get(seg);
    }
    public static void next$set( MemorySegment seg, MemoryAddress x) {
        FT_GlyphSlotRec_.next$VH.set(seg, x);
    }
    public static MemoryAddress next$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)FT_GlyphSlotRec_.next$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void next$set(MemorySegment seg, long index, MemoryAddress x) {
        FT_GlyphSlotRec_.next$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle glyph_index$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("glyph_index"));
    public static VarHandle glyph_index$VH() {
        return FT_GlyphSlotRec_.glyph_index$VH;
    }
    public static int glyph_index$get(MemorySegment seg) {
        return (int)FT_GlyphSlotRec_.glyph_index$VH.get(seg);
    }
    public static void glyph_index$set( MemorySegment seg, int x) {
        FT_GlyphSlotRec_.glyph_index$VH.set(seg, x);
    }
    public static int glyph_index$get(MemorySegment seg, long index) {
        return (int)FT_GlyphSlotRec_.glyph_index$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void glyph_index$set(MemorySegment seg, long index, int x) {
        FT_GlyphSlotRec_.glyph_index$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment generic$slice(MemorySegment seg) {
        return seg.asSlice(32, 16);
    }
    public static MemorySegment metrics$slice(MemorySegment seg) {
        return seg.asSlice(48, 64);
    }
    static final VarHandle linearHoriAdvance$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("linearHoriAdvance"));
    public static VarHandle linearHoriAdvance$VH() {
        return FT_GlyphSlotRec_.linearHoriAdvance$VH;
    }
    public static long linearHoriAdvance$get(MemorySegment seg) {
        return (long)FT_GlyphSlotRec_.linearHoriAdvance$VH.get(seg);
    }
    public static void linearHoriAdvance$set( MemorySegment seg, long x) {
        FT_GlyphSlotRec_.linearHoriAdvance$VH.set(seg, x);
    }
    public static long linearHoriAdvance$get(MemorySegment seg, long index) {
        return (long)FT_GlyphSlotRec_.linearHoriAdvance$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void linearHoriAdvance$set(MemorySegment seg, long index, long x) {
        FT_GlyphSlotRec_.linearHoriAdvance$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle linearVertAdvance$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("linearVertAdvance"));
    public static VarHandle linearVertAdvance$VH() {
        return FT_GlyphSlotRec_.linearVertAdvance$VH;
    }
    public static long linearVertAdvance$get(MemorySegment seg) {
        return (long)FT_GlyphSlotRec_.linearVertAdvance$VH.get(seg);
    }
    public static void linearVertAdvance$set( MemorySegment seg, long x) {
        FT_GlyphSlotRec_.linearVertAdvance$VH.set(seg, x);
    }
    public static long linearVertAdvance$get(MemorySegment seg, long index) {
        return (long)FT_GlyphSlotRec_.linearVertAdvance$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void linearVertAdvance$set(MemorySegment seg, long index, long x) {
        FT_GlyphSlotRec_.linearVertAdvance$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment advance$slice(MemorySegment seg) {
        return seg.asSlice(128, 16);
    }
    static final VarHandle format$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("format"));
    public static VarHandle format$VH() {
        return FT_GlyphSlotRec_.format$VH;
    }
    public static int format$get(MemorySegment seg) {
        return (int)FT_GlyphSlotRec_.format$VH.get(seg);
    }
    public static void format$set( MemorySegment seg, int x) {
        FT_GlyphSlotRec_.format$VH.set(seg, x);
    }
    public static int format$get(MemorySegment seg, long index) {
        return (int)FT_GlyphSlotRec_.format$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void format$set(MemorySegment seg, long index, int x) {
        FT_GlyphSlotRec_.format$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment bitmap$slice(MemorySegment seg) {
        return seg.asSlice(152, 40);
    }
    static final VarHandle bitmap_left$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("bitmap_left"));
    public static VarHandle bitmap_left$VH() {
        return FT_GlyphSlotRec_.bitmap_left$VH;
    }
    public static int bitmap_left$get(MemorySegment seg) {
        return (int)FT_GlyphSlotRec_.bitmap_left$VH.get(seg);
    }
    public static void bitmap_left$set( MemorySegment seg, int x) {
        FT_GlyphSlotRec_.bitmap_left$VH.set(seg, x);
    }
    public static int bitmap_left$get(MemorySegment seg, long index) {
        return (int)FT_GlyphSlotRec_.bitmap_left$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void bitmap_left$set(MemorySegment seg, long index, int x) {
        FT_GlyphSlotRec_.bitmap_left$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle bitmap_top$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("bitmap_top"));
    public static VarHandle bitmap_top$VH() {
        return FT_GlyphSlotRec_.bitmap_top$VH;
    }
    public static int bitmap_top$get(MemorySegment seg) {
        return (int)FT_GlyphSlotRec_.bitmap_top$VH.get(seg);
    }
    public static void bitmap_top$set( MemorySegment seg, int x) {
        FT_GlyphSlotRec_.bitmap_top$VH.set(seg, x);
    }
    public static int bitmap_top$get(MemorySegment seg, long index) {
        return (int)FT_GlyphSlotRec_.bitmap_top$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void bitmap_top$set(MemorySegment seg, long index, int x) {
        FT_GlyphSlotRec_.bitmap_top$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment outline$slice(MemorySegment seg) {
        return seg.asSlice(200, 40);
    }
    static final VarHandle num_subglyphs$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("num_subglyphs"));
    public static VarHandle num_subglyphs$VH() {
        return FT_GlyphSlotRec_.num_subglyphs$VH;
    }
    public static int num_subglyphs$get(MemorySegment seg) {
        return (int)FT_GlyphSlotRec_.num_subglyphs$VH.get(seg);
    }
    public static void num_subglyphs$set( MemorySegment seg, int x) {
        FT_GlyphSlotRec_.num_subglyphs$VH.set(seg, x);
    }
    public static int num_subglyphs$get(MemorySegment seg, long index) {
        return (int)FT_GlyphSlotRec_.num_subglyphs$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void num_subglyphs$set(MemorySegment seg, long index, int x) {
        FT_GlyphSlotRec_.num_subglyphs$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle subglyphs$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("subglyphs"));
    public static VarHandle subglyphs$VH() {
        return FT_GlyphSlotRec_.subglyphs$VH;
    }
    public static MemoryAddress subglyphs$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)FT_GlyphSlotRec_.subglyphs$VH.get(seg);
    }
    public static void subglyphs$set( MemorySegment seg, MemoryAddress x) {
        FT_GlyphSlotRec_.subglyphs$VH.set(seg, x);
    }
    public static MemoryAddress subglyphs$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)FT_GlyphSlotRec_.subglyphs$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void subglyphs$set(MemorySegment seg, long index, MemoryAddress x) {
        FT_GlyphSlotRec_.subglyphs$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle control_data$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("control_data"));
    public static VarHandle control_data$VH() {
        return FT_GlyphSlotRec_.control_data$VH;
    }
    public static MemoryAddress control_data$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)FT_GlyphSlotRec_.control_data$VH.get(seg);
    }
    public static void control_data$set( MemorySegment seg, MemoryAddress x) {
        FT_GlyphSlotRec_.control_data$VH.set(seg, x);
    }
    public static MemoryAddress control_data$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)FT_GlyphSlotRec_.control_data$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void control_data$set(MemorySegment seg, long index, MemoryAddress x) {
        FT_GlyphSlotRec_.control_data$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle control_len$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("control_len"));
    public static VarHandle control_len$VH() {
        return FT_GlyphSlotRec_.control_len$VH;
    }
    public static long control_len$get(MemorySegment seg) {
        return (long)FT_GlyphSlotRec_.control_len$VH.get(seg);
    }
    public static void control_len$set( MemorySegment seg, long x) {
        FT_GlyphSlotRec_.control_len$VH.set(seg, x);
    }
    public static long control_len$get(MemorySegment seg, long index) {
        return (long)FT_GlyphSlotRec_.control_len$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void control_len$set(MemorySegment seg, long index, long x) {
        FT_GlyphSlotRec_.control_len$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle lsb_delta$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("lsb_delta"));
    public static VarHandle lsb_delta$VH() {
        return FT_GlyphSlotRec_.lsb_delta$VH;
    }
    public static long lsb_delta$get(MemorySegment seg) {
        return (long)FT_GlyphSlotRec_.lsb_delta$VH.get(seg);
    }
    public static void lsb_delta$set( MemorySegment seg, long x) {
        FT_GlyphSlotRec_.lsb_delta$VH.set(seg, x);
    }
    public static long lsb_delta$get(MemorySegment seg, long index) {
        return (long)FT_GlyphSlotRec_.lsb_delta$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lsb_delta$set(MemorySegment seg, long index, long x) {
        FT_GlyphSlotRec_.lsb_delta$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle rsb_delta$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("rsb_delta"));
    public static VarHandle rsb_delta$VH() {
        return FT_GlyphSlotRec_.rsb_delta$VH;
    }
    public static long rsb_delta$get(MemorySegment seg) {
        return (long)FT_GlyphSlotRec_.rsb_delta$VH.get(seg);
    }
    public static void rsb_delta$set( MemorySegment seg, long x) {
        FT_GlyphSlotRec_.rsb_delta$VH.set(seg, x);
    }
    public static long rsb_delta$get(MemorySegment seg, long index) {
        return (long)FT_GlyphSlotRec_.rsb_delta$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void rsb_delta$set(MemorySegment seg, long index, long x) {
        FT_GlyphSlotRec_.rsb_delta$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle other$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("other"));
    public static VarHandle other$VH() {
        return FT_GlyphSlotRec_.other$VH;
    }
    public static MemoryAddress other$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)FT_GlyphSlotRec_.other$VH.get(seg);
    }
    public static void other$set( MemorySegment seg, MemoryAddress x) {
        FT_GlyphSlotRec_.other$VH.set(seg, x);
    }
    public static MemoryAddress other$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)FT_GlyphSlotRec_.other$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void other$set(MemorySegment seg, long index, MemoryAddress x) {
        FT_GlyphSlotRec_.other$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle internal$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("internal"));
    public static VarHandle internal$VH() {
        return FT_GlyphSlotRec_.internal$VH;
    }
    public static MemoryAddress internal$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)FT_GlyphSlotRec_.internal$VH.get(seg);
    }
    public static void internal$set( MemorySegment seg, MemoryAddress x) {
        FT_GlyphSlotRec_.internal$VH.set(seg, x);
    }
    public static MemoryAddress internal$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)FT_GlyphSlotRec_.internal$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void internal$set(MemorySegment seg, long index, MemoryAddress x) {
        FT_GlyphSlotRec_.internal$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


