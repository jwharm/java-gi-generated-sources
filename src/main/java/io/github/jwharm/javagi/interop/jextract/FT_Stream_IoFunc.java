// Generated by jextract

package io.github.jwharm.javagi.interop.jextract;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public interface FT_Stream_IoFunc {

    long apply(java.lang.foreign.MemoryAddress stream, long offset, java.lang.foreign.MemoryAddress buffer, long count);
    static MemorySegment allocate(FT_Stream_IoFunc fi, MemorySession session) {
        return RuntimeHelper.upcallStub(FT_Stream_IoFunc.class, fi, constants$2658.FT_Stream_IoFunc$FUNC, session);
    }
    static FT_Stream_IoFunc ofAddress(MemoryAddress addr, MemorySession session) {
        MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
        return (java.lang.foreign.MemoryAddress _stream, long _offset, java.lang.foreign.MemoryAddress _buffer, long _count) -> {
            try {
                return (long)constants$2659.FT_Stream_IoFunc$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)_stream, _offset, (java.lang.foreign.Addressable)_buffer, _count);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


