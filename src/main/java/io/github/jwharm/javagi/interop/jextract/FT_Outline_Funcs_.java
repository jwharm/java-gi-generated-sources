// Generated by jextract

package io.github.jwharm.javagi.interop.jextract;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class FT_Outline_Funcs_ {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("move_to"),
        Constants$root.C_POINTER$LAYOUT.withName("line_to"),
        Constants$root.C_POINTER$LAYOUT.withName("conic_to"),
        Constants$root.C_POINTER$LAYOUT.withName("cubic_to"),
        Constants$root.C_INT$LAYOUT.withName("shift"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_LONG_LONG$LAYOUT.withName("delta")
    ).withName("FT_Outline_Funcs_");
    public static MemoryLayout $LAYOUT() {
        return FT_Outline_Funcs_.$struct$LAYOUT;
    }
    static final VarHandle move_to$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("move_to"));
    public static VarHandle move_to$VH() {
        return FT_Outline_Funcs_.move_to$VH;
    }
    public static MemoryAddress move_to$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)FT_Outline_Funcs_.move_to$VH.get(seg);
    }
    public static void move_to$set( MemorySegment seg, MemoryAddress x) {
        FT_Outline_Funcs_.move_to$VH.set(seg, x);
    }
    public static MemoryAddress move_to$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)FT_Outline_Funcs_.move_to$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void move_to$set(MemorySegment seg, long index, MemoryAddress x) {
        FT_Outline_Funcs_.move_to$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static FT_Outline_MoveToFunc move_to (MemorySegment segment, MemorySession session) {
        return FT_Outline_MoveToFunc.ofAddress(move_to$get(segment), session);
    }
    static final VarHandle line_to$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("line_to"));
    public static VarHandle line_to$VH() {
        return FT_Outline_Funcs_.line_to$VH;
    }
    public static MemoryAddress line_to$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)FT_Outline_Funcs_.line_to$VH.get(seg);
    }
    public static void line_to$set( MemorySegment seg, MemoryAddress x) {
        FT_Outline_Funcs_.line_to$VH.set(seg, x);
    }
    public static MemoryAddress line_to$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)FT_Outline_Funcs_.line_to$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void line_to$set(MemorySegment seg, long index, MemoryAddress x) {
        FT_Outline_Funcs_.line_to$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static FT_Outline_LineToFunc line_to (MemorySegment segment, MemorySession session) {
        return FT_Outline_LineToFunc.ofAddress(line_to$get(segment), session);
    }
    static final VarHandle conic_to$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("conic_to"));
    public static VarHandle conic_to$VH() {
        return FT_Outline_Funcs_.conic_to$VH;
    }
    public static MemoryAddress conic_to$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)FT_Outline_Funcs_.conic_to$VH.get(seg);
    }
    public static void conic_to$set( MemorySegment seg, MemoryAddress x) {
        FT_Outline_Funcs_.conic_to$VH.set(seg, x);
    }
    public static MemoryAddress conic_to$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)FT_Outline_Funcs_.conic_to$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void conic_to$set(MemorySegment seg, long index, MemoryAddress x) {
        FT_Outline_Funcs_.conic_to$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static FT_Outline_ConicToFunc conic_to (MemorySegment segment, MemorySession session) {
        return FT_Outline_ConicToFunc.ofAddress(conic_to$get(segment), session);
    }
    static final VarHandle cubic_to$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("cubic_to"));
    public static VarHandle cubic_to$VH() {
        return FT_Outline_Funcs_.cubic_to$VH;
    }
    public static MemoryAddress cubic_to$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)FT_Outline_Funcs_.cubic_to$VH.get(seg);
    }
    public static void cubic_to$set( MemorySegment seg, MemoryAddress x) {
        FT_Outline_Funcs_.cubic_to$VH.set(seg, x);
    }
    public static MemoryAddress cubic_to$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)FT_Outline_Funcs_.cubic_to$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cubic_to$set(MemorySegment seg, long index, MemoryAddress x) {
        FT_Outline_Funcs_.cubic_to$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static FT_Outline_CubicToFunc cubic_to (MemorySegment segment, MemorySession session) {
        return FT_Outline_CubicToFunc.ofAddress(cubic_to$get(segment), session);
    }
    static final VarHandle shift$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("shift"));
    public static VarHandle shift$VH() {
        return FT_Outline_Funcs_.shift$VH;
    }
    public static int shift$get(MemorySegment seg) {
        return (int)FT_Outline_Funcs_.shift$VH.get(seg);
    }
    public static void shift$set( MemorySegment seg, int x) {
        FT_Outline_Funcs_.shift$VH.set(seg, x);
    }
    public static int shift$get(MemorySegment seg, long index) {
        return (int)FT_Outline_Funcs_.shift$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void shift$set(MemorySegment seg, long index, int x) {
        FT_Outline_Funcs_.shift$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle delta$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("delta"));
    public static VarHandle delta$VH() {
        return FT_Outline_Funcs_.delta$VH;
    }
    public static long delta$get(MemorySegment seg) {
        return (long)FT_Outline_Funcs_.delta$VH.get(seg);
    }
    public static void delta$set( MemorySegment seg, long x) {
        FT_Outline_Funcs_.delta$VH.set(seg, x);
    }
    public static long delta$get(MemorySegment seg, long index) {
        return (long)FT_Outline_Funcs_.delta$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void delta$set(MemorySegment seg, long index, long x) {
        FT_Outline_Funcs_.delta$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


