// Generated by jextract

package io.github.jwharm.javagi.interop.jextract;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public interface FT_Alloc_Func {

    java.lang.foreign.Addressable apply(java.lang.foreign.MemoryAddress memory, long size);
    static MemorySegment allocate(FT_Alloc_Func fi, MemorySession session) {
        return RuntimeHelper.upcallStub(FT_Alloc_Func.class, fi, constants$2657.FT_Alloc_Func$FUNC, session);
    }
    static FT_Alloc_Func ofAddress(MemoryAddress addr, MemorySession session) {
        MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
        return (java.lang.foreign.MemoryAddress _memory, long _size) -> {
            try {
                return (java.lang.foreign.Addressable)(java.lang.foreign.MemoryAddress)constants$2658.FT_Alloc_Func$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)_memory, _size);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


