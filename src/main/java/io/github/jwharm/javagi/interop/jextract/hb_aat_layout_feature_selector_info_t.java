// Generated by jextract

package io.github.jwharm.javagi.interop.jextract;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class hb_aat_layout_feature_selector_info_t {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_INT$LAYOUT.withName("name_id"),
        Constants$root.C_INT$LAYOUT.withName("enable"),
        Constants$root.C_INT$LAYOUT.withName("disable"),
        Constants$root.C_INT$LAYOUT.withName("reserved")
    ).withName("hb_aat_layout_feature_selector_info_t");
    public static MemoryLayout $LAYOUT() {
        return hb_aat_layout_feature_selector_info_t.$struct$LAYOUT;
    }
    static final VarHandle name_id$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("name_id"));
    public static VarHandle name_id$VH() {
        return hb_aat_layout_feature_selector_info_t.name_id$VH;
    }
    public static int name_id$get(MemorySegment seg) {
        return (int)hb_aat_layout_feature_selector_info_t.name_id$VH.get(seg);
    }
    public static void name_id$set( MemorySegment seg, int x) {
        hb_aat_layout_feature_selector_info_t.name_id$VH.set(seg, x);
    }
    public static int name_id$get(MemorySegment seg, long index) {
        return (int)hb_aat_layout_feature_selector_info_t.name_id$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void name_id$set(MemorySegment seg, long index, int x) {
        hb_aat_layout_feature_selector_info_t.name_id$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle enable$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("enable"));
    public static VarHandle enable$VH() {
        return hb_aat_layout_feature_selector_info_t.enable$VH;
    }
    public static int enable$get(MemorySegment seg) {
        return (int)hb_aat_layout_feature_selector_info_t.enable$VH.get(seg);
    }
    public static void enable$set( MemorySegment seg, int x) {
        hb_aat_layout_feature_selector_info_t.enable$VH.set(seg, x);
    }
    public static int enable$get(MemorySegment seg, long index) {
        return (int)hb_aat_layout_feature_selector_info_t.enable$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void enable$set(MemorySegment seg, long index, int x) {
        hb_aat_layout_feature_selector_info_t.enable$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle disable$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("disable"));
    public static VarHandle disable$VH() {
        return hb_aat_layout_feature_selector_info_t.disable$VH;
    }
    public static int disable$get(MemorySegment seg) {
        return (int)hb_aat_layout_feature_selector_info_t.disable$VH.get(seg);
    }
    public static void disable$set( MemorySegment seg, int x) {
        hb_aat_layout_feature_selector_info_t.disable$VH.set(seg, x);
    }
    public static int disable$get(MemorySegment seg, long index) {
        return (int)hb_aat_layout_feature_selector_info_t.disable$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void disable$set(MemorySegment seg, long index, int x) {
        hb_aat_layout_feature_selector_info_t.disable$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle reserved$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("reserved"));
    public static VarHandle reserved$VH() {
        return hb_aat_layout_feature_selector_info_t.reserved$VH;
    }
    public static int reserved$get(MemorySegment seg) {
        return (int)hb_aat_layout_feature_selector_info_t.reserved$VH.get(seg);
    }
    public static void reserved$set( MemorySegment seg, int x) {
        hb_aat_layout_feature_selector_info_t.reserved$VH.set(seg, x);
    }
    public static int reserved$get(MemorySegment seg, long index) {
        return (int)hb_aat_layout_feature_selector_info_t.reserved$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void reserved$set(MemorySegment seg, long index, int x) {
        hb_aat_layout_feature_selector_info_t.reserved$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


