// Generated by jextract

package io.github.jwharm.javagi.interop.jextract;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _GdkPixbufAnimationClass {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG_LONG$LAYOUT.withName("g_type")
            ).withName("g_type_class"),
            Constants$root.C_POINTER$LAYOUT.withName("construct_properties"),
            Constants$root.C_POINTER$LAYOUT.withName("constructor"),
            Constants$root.C_POINTER$LAYOUT.withName("set_property"),
            Constants$root.C_POINTER$LAYOUT.withName("get_property"),
            Constants$root.C_POINTER$LAYOUT.withName("dispose"),
            Constants$root.C_POINTER$LAYOUT.withName("finalize"),
            Constants$root.C_POINTER$LAYOUT.withName("dispatch_properties_changed"),
            Constants$root.C_POINTER$LAYOUT.withName("notify"),
            Constants$root.C_POINTER$LAYOUT.withName("constructed"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("flags"),
            MemoryLayout.sequenceLayout(6, Constants$root.C_POINTER$LAYOUT).withName("pdummy")
        ).withName("parent_class"),
        Constants$root.C_POINTER$LAYOUT.withName("is_static_image"),
        Constants$root.C_POINTER$LAYOUT.withName("get_static_image"),
        Constants$root.C_POINTER$LAYOUT.withName("get_size"),
        Constants$root.C_POINTER$LAYOUT.withName("get_iter")
    ).withName("_GdkPixbufAnimationClass");
    public static MemoryLayout $LAYOUT() {
        return _GdkPixbufAnimationClass.$struct$LAYOUT;
    }
    public static MemorySegment parent_class$slice(MemorySegment seg) {
        return seg.asSlice(0, 136);
    }
    static final FunctionDescriptor is_static_image$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle is_static_image$MH = RuntimeHelper.downcallHandle(
        _GdkPixbufAnimationClass.is_static_image$FUNC
    );
    public interface is_static_image {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(is_static_image fi, MemorySession session) {
            return RuntimeHelper.upcallStub(is_static_image.class, fi, _GdkPixbufAnimationClass.is_static_image$FUNC, session);
        }
        static is_static_image ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)_GdkPixbufAnimationClass.is_static_image$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle is_static_image$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("is_static_image"));
    public static VarHandle is_static_image$VH() {
        return _GdkPixbufAnimationClass.is_static_image$VH;
    }
    public static MemoryAddress is_static_image$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GdkPixbufAnimationClass.is_static_image$VH.get(seg);
    }
    public static void is_static_image$set( MemorySegment seg, MemoryAddress x) {
        _GdkPixbufAnimationClass.is_static_image$VH.set(seg, x);
    }
    public static MemoryAddress is_static_image$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GdkPixbufAnimationClass.is_static_image$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void is_static_image$set(MemorySegment seg, long index, MemoryAddress x) {
        _GdkPixbufAnimationClass.is_static_image$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static is_static_image is_static_image (MemorySegment segment, MemorySession session) {
        return is_static_image.ofAddress(is_static_image$get(segment), session);
    }
    static final FunctionDescriptor get_static_image$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_static_image$MH = RuntimeHelper.downcallHandle(
        _GdkPixbufAnimationClass.get_static_image$FUNC
    );
    public interface get_static_image {

        java.lang.foreign.Addressable apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(get_static_image fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_static_image.class, fi, _GdkPixbufAnimationClass.get_static_image$FUNC, session);
        }
        static get_static_image ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (java.lang.foreign.Addressable)(java.lang.foreign.MemoryAddress)_GdkPixbufAnimationClass.get_static_image$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_static_image$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_static_image"));
    public static VarHandle get_static_image$VH() {
        return _GdkPixbufAnimationClass.get_static_image$VH;
    }
    public static MemoryAddress get_static_image$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GdkPixbufAnimationClass.get_static_image$VH.get(seg);
    }
    public static void get_static_image$set( MemorySegment seg, MemoryAddress x) {
        _GdkPixbufAnimationClass.get_static_image$VH.set(seg, x);
    }
    public static MemoryAddress get_static_image$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GdkPixbufAnimationClass.get_static_image$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_static_image$set(MemorySegment seg, long index, MemoryAddress x) {
        _GdkPixbufAnimationClass.get_static_image$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_static_image get_static_image (MemorySegment segment, MemorySession session) {
        return get_static_image.ofAddress(get_static_image$get(segment), session);
    }
    static final FunctionDescriptor get_size$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_size$MH = RuntimeHelper.downcallHandle(
        _GdkPixbufAnimationClass.get_size$FUNC
    );
    public interface get_size {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(get_size fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_size.class, fi, _GdkPixbufAnimationClass.get_size$FUNC, session);
        }
        static get_size ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    _GdkPixbufAnimationClass.get_size$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_size$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_size"));
    public static VarHandle get_size$VH() {
        return _GdkPixbufAnimationClass.get_size$VH;
    }
    public static MemoryAddress get_size$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GdkPixbufAnimationClass.get_size$VH.get(seg);
    }
    public static void get_size$set( MemorySegment seg, MemoryAddress x) {
        _GdkPixbufAnimationClass.get_size$VH.set(seg, x);
    }
    public static MemoryAddress get_size$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GdkPixbufAnimationClass.get_size$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_size$set(MemorySegment seg, long index, MemoryAddress x) {
        _GdkPixbufAnimationClass.get_size$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_size get_size (MemorySegment segment, MemorySession session) {
        return get_size.ofAddress(get_size$get(segment), session);
    }
    static final FunctionDescriptor get_iter$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_iter$MH = RuntimeHelper.downcallHandle(
        _GdkPixbufAnimationClass.get_iter$FUNC
    );
    public interface get_iter {

        java.lang.foreign.Addressable apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(get_iter fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_iter.class, fi, _GdkPixbufAnimationClass.get_iter$FUNC, session);
        }
        static get_iter ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (java.lang.foreign.Addressable)(java.lang.foreign.MemoryAddress)_GdkPixbufAnimationClass.get_iter$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_iter$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_iter"));
    public static VarHandle get_iter$VH() {
        return _GdkPixbufAnimationClass.get_iter$VH;
    }
    public static MemoryAddress get_iter$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GdkPixbufAnimationClass.get_iter$VH.get(seg);
    }
    public static void get_iter$set( MemorySegment seg, MemoryAddress x) {
        _GdkPixbufAnimationClass.get_iter$VH.set(seg, x);
    }
    public static MemoryAddress get_iter$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GdkPixbufAnimationClass.get_iter$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_iter$set(MemorySegment seg, long index, MemoryAddress x) {
        _GdkPixbufAnimationClass.get_iter$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_iter get_iter (MemorySegment segment, MemorySession session) {
        return get_iter.ofAddress(get_iter$get(segment), session);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


