// Generated by jextract

package io.github.jwharm.javagi.interop.jextract;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _GtkGLAreaClass {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            MemoryLayout.structLayout(
                MemoryLayout.structLayout(
                    Constants$root.C_LONG_LONG$LAYOUT.withName("g_type")
                ).withName("g_type_class"),
                Constants$root.C_POINTER$LAYOUT.withName("construct_properties"),
                Constants$root.C_POINTER$LAYOUT.withName("constructor"),
                Constants$root.C_POINTER$LAYOUT.withName("set_property"),
                Constants$root.C_POINTER$LAYOUT.withName("get_property"),
                Constants$root.C_POINTER$LAYOUT.withName("dispose"),
                Constants$root.C_POINTER$LAYOUT.withName("finalize"),
                Constants$root.C_POINTER$LAYOUT.withName("dispatch_properties_changed"),
                Constants$root.C_POINTER$LAYOUT.withName("notify"),
                Constants$root.C_POINTER$LAYOUT.withName("constructed"),
                Constants$root.C_LONG_LONG$LAYOUT.withName("flags"),
                MemoryLayout.sequenceLayout(6, Constants$root.C_POINTER$LAYOUT).withName("pdummy")
            ).withName("parent_class"),
            Constants$root.C_POINTER$LAYOUT.withName("show"),
            Constants$root.C_POINTER$LAYOUT.withName("hide"),
            Constants$root.C_POINTER$LAYOUT.withName("map"),
            Constants$root.C_POINTER$LAYOUT.withName("unmap"),
            Constants$root.C_POINTER$LAYOUT.withName("realize"),
            Constants$root.C_POINTER$LAYOUT.withName("unrealize"),
            Constants$root.C_POINTER$LAYOUT.withName("root"),
            Constants$root.C_POINTER$LAYOUT.withName("unroot"),
            Constants$root.C_POINTER$LAYOUT.withName("size_allocate"),
            Constants$root.C_POINTER$LAYOUT.withName("state_flags_changed"),
            Constants$root.C_POINTER$LAYOUT.withName("direction_changed"),
            Constants$root.C_POINTER$LAYOUT.withName("get_request_mode"),
            Constants$root.C_POINTER$LAYOUT.withName("measure"),
            Constants$root.C_POINTER$LAYOUT.withName("mnemonic_activate"),
            Constants$root.C_POINTER$LAYOUT.withName("grab_focus"),
            Constants$root.C_POINTER$LAYOUT.withName("focus"),
            Constants$root.C_POINTER$LAYOUT.withName("set_focus_child"),
            Constants$root.C_POINTER$LAYOUT.withName("move_focus"),
            Constants$root.C_POINTER$LAYOUT.withName("keynav_failed"),
            Constants$root.C_POINTER$LAYOUT.withName("query_tooltip"),
            Constants$root.C_POINTER$LAYOUT.withName("compute_expand"),
            Constants$root.C_POINTER$LAYOUT.withName("css_changed"),
            Constants$root.C_POINTER$LAYOUT.withName("system_setting_changed"),
            Constants$root.C_POINTER$LAYOUT.withName("snapshot"),
            Constants$root.C_POINTER$LAYOUT.withName("contains"),
            Constants$root.C_POINTER$LAYOUT.withName("priv"),
            MemoryLayout.sequenceLayout(8, Constants$root.C_POINTER$LAYOUT).withName("padding")
        ).withName("parent_class"),
        Constants$root.C_POINTER$LAYOUT.withName("render"),
        Constants$root.C_POINTER$LAYOUT.withName("resize"),
        Constants$root.C_POINTER$LAYOUT.withName("create_context"),
        MemoryLayout.sequenceLayout(8, Constants$root.C_POINTER$LAYOUT).withName("_padding")
    ).withName("_GtkGLAreaClass");
    public static MemoryLayout $LAYOUT() {
        return _GtkGLAreaClass.$struct$LAYOUT;
    }
    public static MemorySegment parent_class$slice(MemorySegment seg) {
        return seg.asSlice(0, 408);
    }
    static final FunctionDescriptor render$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle render$MH = RuntimeHelper.downcallHandle(
        _GtkGLAreaClass.render$FUNC
    );
    public interface render {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(render fi, MemorySession session) {
            return RuntimeHelper.upcallStub(render.class, fi, _GtkGLAreaClass.render$FUNC, session);
        }
        static render ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)_GtkGLAreaClass.render$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle render$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("render"));
    public static VarHandle render$VH() {
        return _GtkGLAreaClass.render$VH;
    }
    public static MemoryAddress render$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkGLAreaClass.render$VH.get(seg);
    }
    public static void render$set( MemorySegment seg, MemoryAddress x) {
        _GtkGLAreaClass.render$VH.set(seg, x);
    }
    public static MemoryAddress render$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkGLAreaClass.render$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void render$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkGLAreaClass.render$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static render render (MemorySegment segment, MemorySession session) {
        return render.ofAddress(render$get(segment), session);
    }
    static final FunctionDescriptor resize$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle resize$MH = RuntimeHelper.downcallHandle(
        _GtkGLAreaClass.resize$FUNC
    );
    public interface resize {

        void apply(java.lang.foreign.MemoryAddress _x0, int _x1, int _x2);
        static MemorySegment allocate(resize fi, MemorySession session) {
            return RuntimeHelper.upcallStub(resize.class, fi, _GtkGLAreaClass.resize$FUNC, session);
        }
        static resize ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1, int __x2) -> {
                try {
                    _GtkGLAreaClass.resize$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle resize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("resize"));
    public static VarHandle resize$VH() {
        return _GtkGLAreaClass.resize$VH;
    }
    public static MemoryAddress resize$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkGLAreaClass.resize$VH.get(seg);
    }
    public static void resize$set( MemorySegment seg, MemoryAddress x) {
        _GtkGLAreaClass.resize$VH.set(seg, x);
    }
    public static MemoryAddress resize$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkGLAreaClass.resize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void resize$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkGLAreaClass.resize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static resize resize (MemorySegment segment, MemorySession session) {
        return resize.ofAddress(resize$get(segment), session);
    }
    static final FunctionDescriptor create_context$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle create_context$MH = RuntimeHelper.downcallHandle(
        _GtkGLAreaClass.create_context$FUNC
    );
    public interface create_context {

        java.lang.foreign.Addressable apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(create_context fi, MemorySession session) {
            return RuntimeHelper.upcallStub(create_context.class, fi, _GtkGLAreaClass.create_context$FUNC, session);
        }
        static create_context ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (java.lang.foreign.Addressable)(java.lang.foreign.MemoryAddress)_GtkGLAreaClass.create_context$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle create_context$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("create_context"));
    public static VarHandle create_context$VH() {
        return _GtkGLAreaClass.create_context$VH;
    }
    public static MemoryAddress create_context$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkGLAreaClass.create_context$VH.get(seg);
    }
    public static void create_context$set( MemorySegment seg, MemoryAddress x) {
        _GtkGLAreaClass.create_context$VH.set(seg, x);
    }
    public static MemoryAddress create_context$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkGLAreaClass.create_context$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void create_context$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkGLAreaClass.create_context$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static create_context create_context (MemorySegment segment, MemorySession session) {
        return create_context.ofAddress(create_context$get(segment), session);
    }
    public static MemorySegment _padding$slice(MemorySegment seg) {
        return seg.asSlice(432, 64);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


