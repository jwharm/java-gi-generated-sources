// Generated by jextract

package io.github.jwharm.javagi.interop.jextract;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class tcp_cookie_transactions {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_SHORT$LAYOUT.withName("tcpct_flags"),
        Constants$root.C_CHAR$LAYOUT.withName("__tcpct_pad1"),
        Constants$root.C_CHAR$LAYOUT.withName("tcpct_cookie_desired"),
        Constants$root.C_SHORT$LAYOUT.withName("tcpct_s_data_desired"),
        Constants$root.C_SHORT$LAYOUT.withName("tcpct_used"),
        MemoryLayout.sequenceLayout(536, Constants$root.C_CHAR$LAYOUT).withName("tcpct_value")
    ).withName("tcp_cookie_transactions");
    public static MemoryLayout $LAYOUT() {
        return tcp_cookie_transactions.$struct$LAYOUT;
    }
    static final VarHandle tcpct_flags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("tcpct_flags"));
    public static VarHandle tcpct_flags$VH() {
        return tcp_cookie_transactions.tcpct_flags$VH;
    }
    public static short tcpct_flags$get(MemorySegment seg) {
        return (short)tcp_cookie_transactions.tcpct_flags$VH.get(seg);
    }
    public static void tcpct_flags$set( MemorySegment seg, short x) {
        tcp_cookie_transactions.tcpct_flags$VH.set(seg, x);
    }
    public static short tcpct_flags$get(MemorySegment seg, long index) {
        return (short)tcp_cookie_transactions.tcpct_flags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void tcpct_flags$set(MemorySegment seg, long index, short x) {
        tcp_cookie_transactions.tcpct_flags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle __tcpct_pad1$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("__tcpct_pad1"));
    public static VarHandle __tcpct_pad1$VH() {
        return tcp_cookie_transactions.__tcpct_pad1$VH;
    }
    public static byte __tcpct_pad1$get(MemorySegment seg) {
        return (byte)tcp_cookie_transactions.__tcpct_pad1$VH.get(seg);
    }
    public static void __tcpct_pad1$set( MemorySegment seg, byte x) {
        tcp_cookie_transactions.__tcpct_pad1$VH.set(seg, x);
    }
    public static byte __tcpct_pad1$get(MemorySegment seg, long index) {
        return (byte)tcp_cookie_transactions.__tcpct_pad1$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void __tcpct_pad1$set(MemorySegment seg, long index, byte x) {
        tcp_cookie_transactions.__tcpct_pad1$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle tcpct_cookie_desired$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("tcpct_cookie_desired"));
    public static VarHandle tcpct_cookie_desired$VH() {
        return tcp_cookie_transactions.tcpct_cookie_desired$VH;
    }
    public static byte tcpct_cookie_desired$get(MemorySegment seg) {
        return (byte)tcp_cookie_transactions.tcpct_cookie_desired$VH.get(seg);
    }
    public static void tcpct_cookie_desired$set( MemorySegment seg, byte x) {
        tcp_cookie_transactions.tcpct_cookie_desired$VH.set(seg, x);
    }
    public static byte tcpct_cookie_desired$get(MemorySegment seg, long index) {
        return (byte)tcp_cookie_transactions.tcpct_cookie_desired$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void tcpct_cookie_desired$set(MemorySegment seg, long index, byte x) {
        tcp_cookie_transactions.tcpct_cookie_desired$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle tcpct_s_data_desired$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("tcpct_s_data_desired"));
    public static VarHandle tcpct_s_data_desired$VH() {
        return tcp_cookie_transactions.tcpct_s_data_desired$VH;
    }
    public static short tcpct_s_data_desired$get(MemorySegment seg) {
        return (short)tcp_cookie_transactions.tcpct_s_data_desired$VH.get(seg);
    }
    public static void tcpct_s_data_desired$set( MemorySegment seg, short x) {
        tcp_cookie_transactions.tcpct_s_data_desired$VH.set(seg, x);
    }
    public static short tcpct_s_data_desired$get(MemorySegment seg, long index) {
        return (short)tcp_cookie_transactions.tcpct_s_data_desired$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void tcpct_s_data_desired$set(MemorySegment seg, long index, short x) {
        tcp_cookie_transactions.tcpct_s_data_desired$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle tcpct_used$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("tcpct_used"));
    public static VarHandle tcpct_used$VH() {
        return tcp_cookie_transactions.tcpct_used$VH;
    }
    public static short tcpct_used$get(MemorySegment seg) {
        return (short)tcp_cookie_transactions.tcpct_used$VH.get(seg);
    }
    public static void tcpct_used$set( MemorySegment seg, short x) {
        tcp_cookie_transactions.tcpct_used$VH.set(seg, x);
    }
    public static short tcpct_used$get(MemorySegment seg, long index) {
        return (short)tcp_cookie_transactions.tcpct_used$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void tcpct_used$set(MemorySegment seg, long index, short x) {
        tcp_cookie_transactions.tcpct_used$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment tcpct_value$slice(MemorySegment seg) {
        return seg.asSlice(8, 536);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


