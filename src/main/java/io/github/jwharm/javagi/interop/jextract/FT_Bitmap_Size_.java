// Generated by jextract

package io.github.jwharm.javagi.interop.jextract;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class FT_Bitmap_Size_ {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_SHORT$LAYOUT.withName("height"),
        Constants$root.C_SHORT$LAYOUT.withName("width"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_LONG_LONG$LAYOUT.withName("size"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("x_ppem"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("y_ppem")
    ).withName("FT_Bitmap_Size_");
    public static MemoryLayout $LAYOUT() {
        return FT_Bitmap_Size_.$struct$LAYOUT;
    }
    static final VarHandle height$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("height"));
    public static VarHandle height$VH() {
        return FT_Bitmap_Size_.height$VH;
    }
    public static short height$get(MemorySegment seg) {
        return (short)FT_Bitmap_Size_.height$VH.get(seg);
    }
    public static void height$set( MemorySegment seg, short x) {
        FT_Bitmap_Size_.height$VH.set(seg, x);
    }
    public static short height$get(MemorySegment seg, long index) {
        return (short)FT_Bitmap_Size_.height$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void height$set(MemorySegment seg, long index, short x) {
        FT_Bitmap_Size_.height$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle width$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("width"));
    public static VarHandle width$VH() {
        return FT_Bitmap_Size_.width$VH;
    }
    public static short width$get(MemorySegment seg) {
        return (short)FT_Bitmap_Size_.width$VH.get(seg);
    }
    public static void width$set( MemorySegment seg, short x) {
        FT_Bitmap_Size_.width$VH.set(seg, x);
    }
    public static short width$get(MemorySegment seg, long index) {
        return (short)FT_Bitmap_Size_.width$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void width$set(MemorySegment seg, long index, short x) {
        FT_Bitmap_Size_.width$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle size$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("size"));
    public static VarHandle size$VH() {
        return FT_Bitmap_Size_.size$VH;
    }
    public static long size$get(MemorySegment seg) {
        return (long)FT_Bitmap_Size_.size$VH.get(seg);
    }
    public static void size$set( MemorySegment seg, long x) {
        FT_Bitmap_Size_.size$VH.set(seg, x);
    }
    public static long size$get(MemorySegment seg, long index) {
        return (long)FT_Bitmap_Size_.size$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void size$set(MemorySegment seg, long index, long x) {
        FT_Bitmap_Size_.size$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle x_ppem$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("x_ppem"));
    public static VarHandle x_ppem$VH() {
        return FT_Bitmap_Size_.x_ppem$VH;
    }
    public static long x_ppem$get(MemorySegment seg) {
        return (long)FT_Bitmap_Size_.x_ppem$VH.get(seg);
    }
    public static void x_ppem$set( MemorySegment seg, long x) {
        FT_Bitmap_Size_.x_ppem$VH.set(seg, x);
    }
    public static long x_ppem$get(MemorySegment seg, long index) {
        return (long)FT_Bitmap_Size_.x_ppem$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void x_ppem$set(MemorySegment seg, long index, long x) {
        FT_Bitmap_Size_.x_ppem$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle y_ppem$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("y_ppem"));
    public static VarHandle y_ppem$VH() {
        return FT_Bitmap_Size_.y_ppem$VH;
    }
    public static long y_ppem$get(MemorySegment seg) {
        return (long)FT_Bitmap_Size_.y_ppem$VH.get(seg);
    }
    public static void y_ppem$set( MemorySegment seg, long x) {
        FT_Bitmap_Size_.y_ppem$VH.set(seg, x);
    }
    public static long y_ppem$get(MemorySegment seg, long index) {
        return (long)FT_Bitmap_Size_.y_ppem$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void y_ppem$set(MemorySegment seg, long index, long x) {
        FT_Bitmap_Size_.y_ppem$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


